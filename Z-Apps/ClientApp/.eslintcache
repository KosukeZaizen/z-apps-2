[{"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\index.tsx":"1","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\registerServiceWorker.ts":"2","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\common\\animation.ts":"3","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\common\\consts.ts":"4","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\common\\privateConsts.ts":"5","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\common\\functions.ts":"6","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\store\\configureStore.ts":"7","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\version.ts":"8","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\store\\BaseStore.ts":"9","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\store\\KanjiConverter.ts":"10","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\store\\StoriesTopStore.ts":"11","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\store\\StoriesStore.ts":"12","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\store\\StoriesEditStore.ts":"13","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\store\\VocabQuizStore.ts":"14","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\Articles\\index.ts":"15","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\Game\\index.ts":"16","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\LocalDebug\\index.ts":"17","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\Vocab\\index.ts":"18","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\index.ts":"19","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\common\\util\\cFetch.ts":"20","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\types\\stories.ts":"21","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\Articles\\App.tsx":"22","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\LocalDebug\\App.tsx":"23","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\Game\\App.tsx":"24","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\App.tsx":"25","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\Vocab\\App.tsx":"26","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\shared\\Animations\\FooterAnimation\\index.tsx":"27","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\shared\\404.tsx":"28","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\Vocab\\Vocab\\Top.tsx":"29","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\Articles\\Articles\\EditTop.tsx":"30","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\Articles\\Articles\\Edit.tsx":"31","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\shared\\YouTubeAd\\Popup.tsx":"32","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\Home.tsx":"33","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\Terms.tsx":"34","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\Developer.tsx":"35","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\RomajiConverter.tsx":"36","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\KanjiConverter.tsx":"37","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\HiraganaQuiz.tsx":"38","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\HiraganaAndKatakana.tsx":"39","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\KatakanaQuiz.tsx":"40","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\Stories\\StoriesTop\\StoriesEditTop.tsx":"41","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\Stories\\StoriesEdit.tsx":"42","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\Stories\\StoriesVideo.tsx":"43","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\SBDiner.tsx":"44","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\Boscobel.tsx":"45","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\ColorPalette.tsx":"46","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\Vocab\\VocabQuizTop.tsx":"47","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\Vocab\\VocabQuiz.tsx":"48","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\Vocab\\VocabKanjiQuizTop.tsx":"49","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\Vocab\\VocabKanjiQuiz.tsx":"50","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\Vocab\\Merge\\Top.tsx":"51","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\Vocab\\Edit\\Top.tsx":"52","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\Games\\NinjaGameTop.tsx":"53","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\Games\\NinjaGame.tsx":"54","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\Admin\\ApiCache.tsx":"55","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\Admin\\OpeLogTable.tsx":"56","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\Games\\NinjaGame3.tsx":"57","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\Games\\GameOver.tsx":"58","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\SiteMapEdit.tsx":"59","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\Games\\NinjaGame2.tsx":"60","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\common\\util\\romajiConvert.ts":"61","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\hooks\\useScreenSize.ts":"62","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\shared\\Animations\\ShurikenProgress\\index.tsx":"63","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\Articles\\Layout\\index.tsx":"64","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\Layout\\index.tsx":"65","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\types\\vocab.ts":"66","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\Game\\NinjaAdventure\\index.tsx":"67","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\common\\util\\compareObjects.ts":"68","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\Vocab\\Vocab\\index.tsx":"69","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\Vocab\\Layout\\index.tsx":"70","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\Game\\GameBase\\GameFrame\\index.tsx":"71","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\EnCheck\\index.tsx":"72","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\Stories\\StoriesTop\\index.tsx":"73","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\VocabExplorer\\index.tsx":"74","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\Vocab\\VocabList\\index.tsx":"75","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\Stories\\index.tsx":"76","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\Vocab\\VocabVideo\\index.tsx":"77","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\shared\\Helmet.tsx":"78","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\Vocab\\Edit\\index.tsx":"79","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\Vocab\\Merge\\index.tsx":"80","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\Admin\\index.tsx":"81","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\shared\\GoogleAd.tsx":"82","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\shared\\FaceBook.tsx":"83","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\shared\\InputRegisterToken.tsx":"84","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\shared\\HideHeaderAndFooter\\HideFooter.tsx":"85","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\Ninja\\Page1.tsx":"86","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\VocabQuiz\\AllKanjiList.tsx":"87","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\VocabQuiz\\AllVocabList.tsx":"88","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\Ninja\\Page2.tsx":"89","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\shared\\SnsShareButton.tsx":"90","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\shared\\Author.tsx":"91","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\Ninja3\\Page2.tsx":"92","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\Ninja2\\Page2.tsx":"93","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\Ninja2\\Page1.tsx":"94","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\common\\util\\VideoRecorder.ts":"95","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\shared\\Animations\\SeasonAnimation\\index.tsx":"96","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\shared\\CharacterComment\\index.tsx":"97","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\shared\\ScrollBox\\index.tsx":"98","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\Stories\\StoriesTop\\StoriesList.tsx":"99","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\Game\\NinjaAdventure\\Items\\Ninja.tsx":"100","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\shared\\YouTubeVideo\\VocabVideo.tsx":"101","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\shared\\HideHeaderAndFooter\\index.tsx":"102","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\Vocab\\VocabVideo\\Thumbnail.tsx":"103","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\Vocab\\VocabVideo\\TitlePage.tsx":"104","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\Vocab\\VocabVideo\\QuizPage.tsx":"105","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\Vocab\\VocabVideo\\MenuPage.tsx":"106","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\Vocab\\VocabVideo\\ListPage.tsx":"107","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\VocabExplorer\\GameItems\\Ninja.tsx":"108","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\Vocab\\VocabVideo\\LastPage.tsx":"109","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\shared\\YouTubeVideo\\StorageVideo.tsx":"110","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\shared\\FolktaleMenu\\index.tsx":"111","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\Ninja3\\stages\\Stage20.ts":"112","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\Ninja3\\stages\\Stage22.ts":"113","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\Ninja3\\stages\\Stage21.ts":"114","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\Ninja3\\stages\\Stage19.ts":"115","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\Ninja3\\stages\\Stage18.ts":"116","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\Ninja3\\stages\\Stage17.ts":"117","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\Ninja3\\stages\\Stage16.ts":"118","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\Ninja3\\stages\\Stage15.ts":"119","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\Ninja3\\stages\\Stage14.ts":"120","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\Ninja3\\stages\\Stage13.ts":"121","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\Ninja3\\stages\\Stage12.ts":"122","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\Ninja3\\stages\\Stage11.ts":"123","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\shared\\Markdown\\CodeRender\\PointBox.tsx":"124","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\Ninja\\objs\\obj.tsx":"125","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\Ninja\\objs\\ninja\\ninja.tsx":"126","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\shared\\Link\\ATargetBlank.tsx":"127","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\Ninja2\\objs\\obj.tsx":"128","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\Ninja2\\objs\\ninja\\ninja.tsx":"129","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\Game\\NinjaAdventure\\GameState.ts":"130","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\common\\util\\getHoverClass.ts":"131","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\common\\util\\Audio\\audioPlayAsync.ts":"132","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\Game\\GameBase\\Menu\\index.tsx":"133","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\Game\\NinjaAdventure\\Items\\StageItems\\index.tsx":"134","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\common\\util\\Game\\absoluteStyle.ts":"135","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\common\\util\\Game\\GameItem.ts":"136","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\shared\\YouTubeVideo\\index.tsx":"137","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\shared\\YouTubeAd\\index.tsx":"138","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\shared\\Animations\\SeasonAnimation\\FallingImageEdit.tsx":"139","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\Ninja3\\stages\\StagePartsGenerator.ts":"140","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\shared\\Markdown\\index.tsx":"141","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\Ninja3\\ImportImgs.tsx":"142","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\common\\util\\getAphroditeClassName.ts":"143","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\Ninja3\\OnTouch.ts":"144","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\Ninja3\\EachTime.ts":"145","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\Game\\types\\Direction.ts":"146","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\Game\\GameBase\\Menu\\Contents\\MenuContent.tsx":"147","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\Video\\index.tsx":"148","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\shared\\Animations\\ColorChangeButton\\index.tsx":"149","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\shared\\Markdown\\Table\\TableRender.tsx":"150","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\shared\\Markdown\\Table\\TableCellRender.tsx":"151","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\Ninja3\\CommonFnc.ts":"152","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\Ninja3\\Messages.ts":"153","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\Ninja3\\Consts.ts":"154","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\Game\\NinjaAdventure\\Stages\\index.tsx":"155","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\shared\\Markdown\\CodeRender\\index.tsx":"156","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\shared\\Markdown\\InlineCodeRender\\index.tsx":"157","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\shared\\Markdown\\LinkBlockRender\\index.tsx":"158","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\shared\\Markdown\\ImageRender\\index.tsx":"159","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\shared\\Markdown\\HeadingRenderer\\index.tsx":"160","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\Game\\StorageItems.ts":"161","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\Game\\NinjaAdventure\\Items\\StageItems\\StageChanger.tsx":"162","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\Game\\NinjaAdventure\\Items\\StageItems\\SpeakingCharacter.tsx":"163","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\Game\\NinjaAdventure\\Items\\StageItems\\Floor.tsx":"164","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\Game\\NinjaAdventure\\Items\\StageItems\\Enemy.tsx":"165","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\Game\\NinjaAdventure\\Items\\StageItems\\Block.tsx":"166","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\Game\\NinjaAdventure\\Items\\StageItems\\BackgroundImg.tsx":"167","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\shared\\Markdown\\LinkBlockRender\\linkShadowStyle.ts":"168","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\shared\\Markdown\\CodeRender\\ExampleSentence\\Folktale.tsx":"169","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\shared\\Markdown\\ImageRender\\Speaker.tsx":"170","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\shared\\Markdown\\CodeRender\\ExampleSentence\\index.tsx":"171","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\shared\\Markdown\\ImageRender\\VocabList\\index.tsx":"172","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\shared\\Markdown\\CodeRender\\ExampleSentence\\WordList.tsx":"173","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\shared\\Markdown\\CodeRender\\ExampleSentence\\AudioControl.tsx":"174","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\shared\\Markdown\\ImageRender\\VocabList\\List.tsx":"175","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\Ninja3\\stages\\Stage10.ts":"176","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\Ninja3\\stages\\Stage09.ts":"177","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\Ninja3\\stages\\Stage08.ts":"178","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\Ninja3\\stages\\Stage07.ts":"179","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\Ninja3\\stages\\Stage06.ts":"180","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\Ninja3\\stages\\Stage05.ts":"181","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\Ninja3\\stages\\Stage04.ts":"182","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\Ninja3\\stages\\Stage03.ts":"183","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\Ninja3\\stages\\Stage02.ts":"184","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\Ninja3\\stages\\Stage01.ts":"185","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\Ninja3\\GameCore.tsx":"186","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\Articles\\Articles\\RightPanel.tsx":"187","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\Ninja3\\objs\\ninja\\ninja.tsx":"188","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\Ninja3\\objs\\obj.tsx":"189","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\common\\util\\Game\\useGameState.ts":"190","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\common\\util\\Game\\GameStateManager.ts":"191","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\VocabExplorer\\GameItems\\Floor.tsx":"192","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\Game\\hooks\\useUnmounted.ts":"193","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\shared\\PleaseScrollDown.tsx":"194","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\Articles\\Articles\\Top.tsx":"195","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\Vocab\\Layout\\NavMenu.tsx":"196","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\Layout\\NavMenu.tsx":"197","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\Layout\\Footer.tsx":"198","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\Ninja3\\Page1.tsx":"199","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\common\\hooks\\useHashScroll.ts":"200","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\common\\util\\checkThumbnailExistence.ts":"201","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\shared\\HashScroll\\index.tsx":"202","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\KanaQuiz\\KanaQuizCore.tsx":"203","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\Articles\\Articles\\AuthorEditor.tsx":"204","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\common\\hooks\\useUnitLength.ts":"205","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\Game\\NinjaAdventure\\Items\\FixedItems\\index.ts":"206","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\appState.ts":"207","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\common\\util\\LazyLoad.tsx":"208","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\shared\\Link\\LinkOrA.tsx":"209","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\common\\util\\Audio\\EasyAudioPlayer.ts":"210","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\Articles\\Articles\\index.tsx":"211","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\KanaQuiz\\KanaQuiz1.tsx":"212","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\KanaQuiz\\KanaQuiz2.tsx":"213","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\Game\\NinjaAdventure\\Items\\FixedItems\\BlackFrame.tsx":"214","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\Game\\NinjaAdventure\\Items\\FixedItems\\GameController.tsx":"215","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\common\\util\\Array\\getRandomItem.ts":"216"},{"size":3026,"mtime":1638694163649,"results":"217","hashOfConfig":"218"},{"size":5143,"mtime":1647672614450,"results":"219","hashOfConfig":"218"},{"size":2795,"mtime":1624944454182,"results":"220","hashOfConfig":"218"},{"size":741,"mtime":1638964815597,"results":"221","hashOfConfig":"218"},{"size":231,"mtime":1585228141845,"results":"222","hashOfConfig":"218"},{"size":7270,"mtime":1638694163354,"results":"223","hashOfConfig":"218"},{"size":2519,"mtime":1624944454803,"results":"224","hashOfConfig":"218"},{"size":41,"mtime":1653577757405,"results":"225","hashOfConfig":"218"},{"size":2302,"mtime":1619221727120,"results":"226","hashOfConfig":"218"},{"size":1937,"mtime":1617233911197,"results":"227","hashOfConfig":"218"},{"size":967,"mtime":1647672898954,"results":"228","hashOfConfig":"218"},{"size":5246,"mtime":1638694163652,"results":"229","hashOfConfig":"218"},{"size":21309,"mtime":1653559087012,"results":"230","hashOfConfig":"218"},{"size":7306,"mtime":1633600885657,"results":"231","hashOfConfig":"218"},{"size":264,"mtime":1638694163422,"results":"232","hashOfConfig":"218"},{"size":247,"mtime":1627382445573,"results":"233","hashOfConfig":"218"},{"size":254,"mtime":1624944454211,"results":"234","hashOfConfig":"218"},{"size":250,"mtime":1638694163519,"results":"235","hashOfConfig":"218"},{"size":288,"mtime":1625303878193,"results":"236","hashOfConfig":"218"},{"size":263,"mtime":1614429442670,"results":"237","hashOfConfig":"218"},{"size":497,"mtime":1621665297992,"results":"238","hashOfConfig":"218"},{"size":3610,"mtime":1638694163392,"results":"239","hashOfConfig":"218"},{"size":1236,"mtime":1624944454209,"results":"240","hashOfConfig":"218"},{"size":3124,"mtime":1638694163425,"results":"241","hashOfConfig":"218"},{"size":11790,"mtime":1653547555253,"results":"242","hashOfConfig":"218"},{"size":2421,"mtime":1638694163486,"results":"243","hashOfConfig":"218"},{"size":9969,"mtime":1653576651008,"results":"244","hashOfConfig":"218"},{"size":1036,"mtime":1624944454215,"results":"245","hashOfConfig":"218"},{"size":11817,"mtime":1638694163508,"results":"246","hashOfConfig":"218"},{"size":29980,"mtime":1639264992075,"results":"247","hashOfConfig":"218"},{"size":32289,"mtime":1652271658120,"results":"248","hashOfConfig":"218"},{"size":3386,"mtime":1627370073597,"results":"249","hashOfConfig":"218"},{"size":19769,"mtime":1653540769711,"results":"250","hashOfConfig":"218"},{"size":1488,"mtime":1653358564176,"results":"251","hashOfConfig":"218"},{"size":4946,"mtime":1653142823098,"results":"252","hashOfConfig":"218"},{"size":16666,"mtime":1625304546188,"results":"253","hashOfConfig":"218"},{"size":20038,"mtime":1625304454010,"results":"254","hashOfConfig":"218"},{"size":8441,"mtime":1653534320509,"results":"255","hashOfConfig":"218"},{"size":11357,"mtime":1653392530807,"results":"256","hashOfConfig":"218"},{"size":7856,"mtime":1653388089856,"results":"257","hashOfConfig":"218"},{"size":13388,"mtime":1638694163585,"results":"258","hashOfConfig":"218"},{"size":39320,"mtime":1624944454564,"results":"259","hashOfConfig":"218"},{"size":14222,"mtime":1638694163587,"results":"260","hashOfConfig":"218"},{"size":24541,"mtime":1653099400211,"results":"261","hashOfConfig":"218"},{"size":19477,"mtime":1653055643696,"results":"262","hashOfConfig":"218"},{"size":15246,"mtime":1624944454448,"results":"263","hashOfConfig":"218"},{"size":7840,"mtime":1653391688498,"results":"264","hashOfConfig":"218"},{"size":48985,"mtime":1653543332600,"results":"265","hashOfConfig":"218"},{"size":8343,"mtime":1653391736417,"results":"266","hashOfConfig":"218"},{"size":47866,"mtime":1653543280297,"results":"267","hashOfConfig":"218"},{"size":11599,"mtime":1651066357814,"results":"268","hashOfConfig":"218"},{"size":12632,"mtime":1641170785679,"results":"269","hashOfConfig":"218"},{"size":2949,"mtime":1624944454537,"results":"270","hashOfConfig":"218"},{"size":4517,"mtime":1624944454529,"results":"271","hashOfConfig":"218"},{"size":589,"mtime":1624944454434,"results":"272","hashOfConfig":"218"},{"size":10779,"mtime":1625304608309,"results":"273","hashOfConfig":"218"},{"size":5185,"mtime":1624944454534,"results":"274","hashOfConfig":"218"},{"size":1567,"mtime":1627370783647,"results":"275","hashOfConfig":"218"},{"size":13725,"mtime":1647672385531,"results":"276","hashOfConfig":"218"},{"size":4680,"mtime":1624944454532,"results":"277","hashOfConfig":"218"},{"size":4070,"mtime":1638694163387,"results":"278","hashOfConfig":"218"},{"size":789,"mtime":1653353739732,"results":"279","hashOfConfig":"218"},{"size":606,"mtime":1624944454246,"results":"280","hashOfConfig":"218"},{"size":426,"mtime":1638694163418,"results":"281","hashOfConfig":"218"},{"size":906,"mtime":1653521731514,"results":"282","hashOfConfig":"218"},{"size":779,"mtime":1638694163655,"results":"283","hashOfConfig":"218"},{"size":1523,"mtime":1638694163478,"results":"284","hashOfConfig":"218"},{"size":590,"mtime":1638694163380,"results":"285","hashOfConfig":"218"},{"size":16752,"mtime":1640939737315,"results":"286","hashOfConfig":"218"},{"size":831,"mtime":1638694163504,"results":"287","hashOfConfig":"218"},{"size":1721,"mtime":1638694163432,"results":"288","hashOfConfig":"218"},{"size":344,"mtime":1638694163582,"results":"289","hashOfConfig":"218"},{"size":15646,"mtime":1643101306020,"results":"290","hashOfConfig":"218"},{"size":3707,"mtime":1638694163642,"results":"291","hashOfConfig":"218"},{"size":19970,"mtime":1653308477017,"results":"292","hashOfConfig":"218"},{"size":45323,"mtime":1651381125231,"results":"293","hashOfConfig":"218"},{"size":10622,"mtime":1638694163636,"results":"294","hashOfConfig":"218"},{"size":1020,"mtime":1625304222482,"results":"295","hashOfConfig":"218"},{"size":23029,"mtime":1638694163597,"results":"296","hashOfConfig":"218"},{"size":25516,"mtime":1640584539692,"results":"297","hashOfConfig":"218"},{"size":1229,"mtime":1638694163574,"results":"298","hashOfConfig":"218"},{"size":966,"mtime":1624944454276,"results":"299","hashOfConfig":"218"},{"size":1034,"mtime":1624944454266,"results":"300","hashOfConfig":"218"},{"size":1133,"mtime":1624944454293,"results":"301","hashOfConfig":"218"},{"size":546,"mtime":1624944454287,"results":"302","hashOfConfig":"218"},{"size":5629,"mtime":1625304660971,"results":"303","hashOfConfig":"218"},{"size":5804,"mtime":1624944454788,"results":"304","hashOfConfig":"218"},{"size":5722,"mtime":1653309915875,"results":"305","hashOfConfig":"218"},{"size":104437,"mtime":1624944454650,"results":"306","hashOfConfig":"218"},{"size":1847,"mtime":1625302802667,"results":"307","hashOfConfig":"218"},{"size":10203,"mtime":1653442077568,"results":"308","hashOfConfig":"218"},{"size":23498,"mtime":1624944454699,"results":"309","hashOfConfig":"218"},{"size":159368,"mtime":1624944454666,"results":"310","hashOfConfig":"218"},{"size":6098,"mtime":1625304678307,"results":"311","hashOfConfig":"218"},{"size":3078,"mtime":1647085656087,"results":"312","hashOfConfig":"218"},{"size":4820,"mtime":1627259190287,"results":"313","hashOfConfig":"218"},{"size":2178,"mtime":1627027983872,"results":"314","hashOfConfig":"218"},{"size":326,"mtime":1639046606157,"results":"315","hashOfConfig":"218"},{"size":5419,"mtime":1624944454571,"results":"316","hashOfConfig":"218"},{"size":3635,"mtime":1638694163441,"results":"317","hashOfConfig":"218"},{"size":1072,"mtime":1640939617040,"results":"318","hashOfConfig":"218"},{"size":573,"mtime":1624944454290,"results":"319","hashOfConfig":"218"},{"size":3732,"mtime":1624944454623,"results":"320","hashOfConfig":"218"},{"size":5990,"mtime":1638694163634,"results":"321","hashOfConfig":"218"},{"size":4721,"mtime":1652590268479,"results":"322","hashOfConfig":"218"},{"size":13880,"mtime":1638694163632,"results":"323","hashOfConfig":"218"},{"size":3313,"mtime":1652590264657,"results":"324","hashOfConfig":"218"},{"size":1407,"mtime":1653572637806,"results":"325","hashOfConfig":"218"},{"size":2249,"mtime":1638694163626,"results":"326","hashOfConfig":"218"},{"size":3034,"mtime":1651153581571,"results":"327","hashOfConfig":"218"},{"size":3552,"mtime":1625306038428,"results":"328","hashOfConfig":"218"},{"size":1242,"mtime":1624944454775,"results":"329","hashOfConfig":"218"},{"size":2722,"mtime":1624944454782,"results":"330","hashOfConfig":"218"},{"size":1375,"mtime":1624944454779,"results":"331","hashOfConfig":"218"},{"size":2306,"mtime":1624944454772,"results":"332","hashOfConfig":"218"},{"size":2971,"mtime":1624944454769,"results":"333","hashOfConfig":"218"},{"size":2786,"mtime":1624944454765,"results":"334","hashOfConfig":"218"},{"size":2877,"mtime":1624944454762,"results":"335","hashOfConfig":"218"},{"size":2266,"mtime":1624944454759,"results":"336","hashOfConfig":"218"},{"size":1232,"mtime":1624944454756,"results":"337","hashOfConfig":"218"},{"size":3050,"mtime":1624944454753,"results":"338","hashOfConfig":"218"},{"size":3051,"mtime":1624944454748,"results":"339","hashOfConfig":"218"},{"size":1556,"mtime":1624944454744,"results":"340","hashOfConfig":"218"},{"size":1788,"mtime":1647845406825,"results":"341","hashOfConfig":"218"},{"size":12153,"mtime":1653312250071,"results":"342","hashOfConfig":"218"},{"size":712,"mtime":1624944454655,"results":"343","hashOfConfig":"218"},{"size":439,"mtime":1625370180594,"results":"344","hashOfConfig":"218"},{"size":8677,"mtime":1653312269674,"results":"345","hashOfConfig":"218"},{"size":712,"mtime":1624944454672,"results":"346","hashOfConfig":"218"},{"size":808,"mtime":1638694163436,"results":"347","hashOfConfig":"218"},{"size":265,"mtime":1626421288399,"results":"348","hashOfConfig":"218"},{"size":304,"mtime":1652939308464,"results":"349","hashOfConfig":"218"},{"size":8825,"mtime":1627610899114,"results":"350","hashOfConfig":"218"},{"size":4745,"mtime":1638694163470,"results":"351","hashOfConfig":"218"},{"size":147,"mtime":1638694163370,"results":"352","hashOfConfig":"218"},{"size":1891,"mtime":1638694163363,"results":"353","hashOfConfig":"218"},{"size":2972,"mtime":1640937535187,"results":"354","hashOfConfig":"218"},{"size":992,"mtime":1625306074427,"results":"355","hashOfConfig":"218"},{"size":7954,"mtime":1638694163531,"results":"356","hashOfConfig":"218"},{"size":15316,"mtime":1624944454784,"results":"357","hashOfConfig":"218"},{"size":1829,"mtime":1638694163568,"results":"358","hashOfConfig":"218"},{"size":3800,"mtime":1624944454689,"results":"359","hashOfConfig":"218"},{"size":185,"mtime":1635649014171,"results":"360","hashOfConfig":"218"},{"size":9365,"mtime":1624944454693,"results":"361","hashOfConfig":"218"},{"size":7200,"mtime":1624944454684,"results":"362","hashOfConfig":"218"},{"size":181,"mtime":1627444342802,"results":"363","hashOfConfig":"218"},{"size":703,"mtime":1627604923298,"results":"364","hashOfConfig":"218"},{"size":1138,"mtime":1627648141762,"results":"365","hashOfConfig":"218"},{"size":1485,"mtime":1624944454219,"results":"366","hashOfConfig":"218"},{"size":795,"mtime":1653113459107,"results":"367","hashOfConfig":"218"},{"size":691,"mtime":1625372767367,"results":"368","hashOfConfig":"218"},{"size":1940,"mtime":1624944454678,"results":"369","hashOfConfig":"218"},{"size":13652,"mtime":1624944454692,"results":"370","hashOfConfig":"218"},{"size":357,"mtime":1624944454681,"results":"371","hashOfConfig":"218"},{"size":2272,"mtime":1638694163473,"results":"372","hashOfConfig":"218"},{"size":4035,"mtime":1647845390565,"results":"373","hashOfConfig":"218"},{"size":154,"mtime":1624944454335,"results":"374","hashOfConfig":"218"},{"size":1323,"mtime":1638694163555,"results":"375","hashOfConfig":"218"},{"size":1787,"mtime":1651153749401,"results":"376","hashOfConfig":"218"},{"size":514,"mtime":1624949451665,"results":"377","hashOfConfig":"218"},{"size":542,"mtime":1638694163481,"results":"378","hashOfConfig":"218"},{"size":1097,"mtime":1638694163465,"results":"379","hashOfConfig":"218"},{"size":4110,"mtime":1638694163461,"results":"380","hashOfConfig":"218"},{"size":783,"mtime":1627444379787,"results":"381","hashOfConfig":"218"},{"size":5643,"mtime":1638694163457,"results":"382","hashOfConfig":"218"},{"size":1457,"mtime":1638694163453,"results":"383","hashOfConfig":"218"},{"size":2624,"mtime":1638694163445,"results":"384","hashOfConfig":"218"},{"size":334,"mtime":1625486470005,"results":"385","hashOfConfig":"218"},{"size":2714,"mtime":1625303831725,"results":"386","hashOfConfig":"218"},{"size":2059,"mtime":1624944454323,"results":"387","hashOfConfig":"218"},{"size":7163,"mtime":1624944454311,"results":"388","hashOfConfig":"218"},{"size":2577,"mtime":1638694163543,"results":"389","hashOfConfig":"218"},{"size":4949,"mtime":1624944454308,"results":"390","hashOfConfig":"218"},{"size":1278,"mtime":1624944454300,"results":"391","hashOfConfig":"218"},{"size":5729,"mtime":1625302802638,"results":"392","hashOfConfig":"218"},{"size":1119,"mtime":1624944454741,"results":"393","hashOfConfig":"218"},{"size":2595,"mtime":1624944454738,"results":"394","hashOfConfig":"218"},{"size":2844,"mtime":1624944454735,"results":"395","hashOfConfig":"218"},{"size":3078,"mtime":1624944454732,"results":"396","hashOfConfig":"218"},{"size":2995,"mtime":1624944454729,"results":"397","hashOfConfig":"218"},{"size":2242,"mtime":1624944454726,"results":"398","hashOfConfig":"218"},{"size":2182,"mtime":1624944454723,"results":"399","hashOfConfig":"218"},{"size":1117,"mtime":1624944454719,"results":"400","hashOfConfig":"218"},{"size":1996,"mtime":1624944454715,"results":"401","hashOfConfig":"218"},{"size":1032,"mtime":1624944454712,"results":"402","hashOfConfig":"218"},{"size":6138,"mtime":1624944454686,"results":"403","hashOfConfig":"218"},{"size":3404,"mtime":1653479655727,"results":"404","hashOfConfig":"218"},{"size":710,"mtime":1624944454705,"results":"405","hashOfConfig":"218"},{"size":8715,"mtime":1653312287047,"results":"406","hashOfConfig":"218"},{"size":1185,"mtime":1638694163373,"results":"407","hashOfConfig":"218"},{"size":1005,"mtime":1638694163367,"results":"408","hashOfConfig":"218"},{"size":741,"mtime":1638694163638,"results":"409","hashOfConfig":"218"},{"size":626,"mtime":1627469824852,"results":"410","hashOfConfig":"218"},{"size":3082,"mtime":1624944454355,"results":"411","hashOfConfig":"218"},{"size":7456,"mtime":1652512138009,"results":"412","hashOfConfig":"218"},{"size":3580,"mtime":1638694163501,"results":"413","hashOfConfig":"218"},{"size":6190,"mtime":1653576931241,"results":"414","hashOfConfig":"218"},{"size":1110,"mtime":1653521304414,"results":"415","hashOfConfig":"218"},{"size":5982,"mtime":1625304695091,"results":"416","hashOfConfig":"218"},{"size":403,"mtime":1653534412643,"results":"417","hashOfConfig":"218"},{"size":259,"mtime":1653039624240,"results":"418","hashOfConfig":"218"},{"size":1691,"mtime":1653534284741,"results":"419","hashOfConfig":"218"},{"size":4094,"mtime":1653388867633,"results":"420","hashOfConfig":"218"},{"size":12146,"mtime":1642769616345,"results":"421","hashOfConfig":"218"},{"size":901,"mtime":1638694163358,"results":"422","hashOfConfig":"218"},{"size":167,"mtime":1627533920408,"results":"423","hashOfConfig":"218"},{"size":1099,"mtime":1653611177873,"results":"424","hashOfConfig":"218"},{"size":585,"mtime":1653147618483,"results":"425","hashOfConfig":"218"},{"size":517,"mtime":1625302802620,"results":"426","hashOfConfig":"218"},{"size":1650,"mtime":1652964361599,"results":"427","hashOfConfig":"218"},{"size":14508,"mtime":1647679327945,"results":"428","hashOfConfig":"218"},{"size":17901,"mtime":1653534284291,"results":"429","hashOfConfig":"218"},{"size":17876,"mtime":1653534284278,"results":"430","hashOfConfig":"218"},{"size":2358,"mtime":1629527931434,"results":"431","hashOfConfig":"218"},{"size":7941,"mtime":1629527937724,"results":"432","hashOfConfig":"218"},{"size":107,"mtime":1652609186304,"results":"433","hashOfConfig":"218"},{"filePath":"434","messages":"435","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"jh4w9",{"filePath":"436","messages":"437","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"438","messages":"439","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"440"},{"filePath":"441","messages":"442","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"443","messages":"444","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"445","messages":"446","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"447"},{"filePath":"448","messages":"449","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"450"},{"filePath":"451","messages":"452","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"453","messages":"454","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"455","messages":"456","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"457","messages":"458","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"459","messages":"460","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"461","messages":"462","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"463","messages":"464","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"465","messages":"466","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"467","messages":"468","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"469","messages":"470","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"471","messages":"472","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"473","messages":"474","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"475","messages":"476","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"477","messages":"478","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"479","messages":"480","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"481","messages":"482","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"483","messages":"484","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"485","messages":"486","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"487","messages":"488","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"489","messages":"490","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"491","messages":"492","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"493","messages":"494","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"495","messages":"496","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"497","messages":"498","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"499"},{"filePath":"500","messages":"501","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"502","messages":"503","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"504","messages":"505","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"506","messages":"507","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"508","messages":"509","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"510","messages":"511","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"512","messages":"513","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"514"},{"filePath":"515","messages":"516","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"517","messages":"518","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"519"},{"filePath":"520","messages":"521","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"522","messages":"523","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"524","messages":"525","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"526"},{"filePath":"527","messages":"528","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"529"},{"filePath":"530","messages":"531","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"532"},{"filePath":"533","messages":"534","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"535","messages":"536","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"537","messages":"538","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"539","messages":"540","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"541","messages":"542","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"543"},{"filePath":"544","messages":"545","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"546"},{"filePath":"547","messages":"548","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"549"},{"filePath":"550","messages":"551","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"552","messages":"553","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"554","messages":"555","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"556","messages":"557","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"558","messages":"559","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"560","messages":"561","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"562"},{"filePath":"563","messages":"564","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"565"},{"filePath":"566","messages":"567","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"568","messages":"569","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"570","messages":"571","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"572","messages":"573","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"574","messages":"575","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"576","messages":"577","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"578","messages":"579","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"580"},{"filePath":"581","messages":"582","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"583","messages":"584","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"585"},{"filePath":"586","messages":"587","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"588"},{"filePath":"589","messages":"590","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"591","messages":"592","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"593","messages":"594","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"595","messages":"596","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"597","messages":"598","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"599"},{"filePath":"600","messages":"601","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"602","messages":"603","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"604","messages":"605","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"606"},{"filePath":"607","messages":"608","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"609","messages":"610","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"611","messages":"612","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"613","messages":"614","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"615","messages":"616","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"617","messages":"618","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"619","messages":"620","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"621","messages":"622","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"623","messages":"624","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"625","messages":"626","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"627","messages":"628","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"629","messages":"630","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"631"},{"filePath":"632","messages":"633","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"634","messages":"635","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"636","messages":"637","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"638","messages":"639","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"640"},{"filePath":"641","messages":"642","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"643","messages":"644","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"645"},{"filePath":"646","messages":"647","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"648","messages":"649","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"650","messages":"651","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"652","messages":"653","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"654","messages":"655","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"656","messages":"657","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"658","messages":"659","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"660","messages":"661","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"662","messages":"663","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"664"},{"filePath":"665","messages":"666","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"667","messages":"668","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"669","messages":"670","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"671","messages":"672","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"673"},{"filePath":"674","messages":"675","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"676","messages":"677","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"678","messages":"679","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"680","messages":"681","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"682","messages":"683","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"684","messages":"685","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"686","messages":"687","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"688","messages":"689","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"690"},{"filePath":"691","messages":"692","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"693","messages":"694","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"695","messages":"696","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"697","messages":"698","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"699","messages":"700","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"701","messages":"702","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"703","messages":"704","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"705","messages":"706","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"707","messages":"708","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"709","messages":"710","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"711","messages":"712","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"713","messages":"714","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"715","messages":"716","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"717","messages":"718","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"719","messages":"720","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"721","messages":"722","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"723","messages":"724","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"725"},{"filePath":"726","messages":"727","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"728"},{"filePath":"729","messages":"730","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"731","messages":"732","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"733"},{"filePath":"734","messages":"735","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"736","messages":"737","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"738","messages":"739","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"740"},{"filePath":"741","messages":"742","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"743","messages":"744","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"745","messages":"746","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"747","messages":"748","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"749","messages":"750","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"751","messages":"752","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"753","messages":"754","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"755"},{"filePath":"756","messages":"757","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"758","messages":"759","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"760","messages":"761","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"762"},{"filePath":"763","messages":"764","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"765","messages":"766","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"767","messages":"768","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"769","messages":"770","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"771","messages":"772","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"773","messages":"774","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"775","messages":"776","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"777","messages":"778","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"779","messages":"780","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"781","messages":"782","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"783","messages":"784","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"785","messages":"786","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"787"},{"filePath":"788","messages":"789","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"790"},{"filePath":"791","messages":"792","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"793"},{"filePath":"794","messages":"795","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"796","messages":"797","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"798"},{"filePath":"799","messages":"800","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"801","messages":"802","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"803","messages":"804","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"805","messages":"806","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"807","messages":"808","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"809"},{"filePath":"810","messages":"811","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"812","messages":"813","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"814","messages":"815","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"816","messages":"817","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"818","messages":"819","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"820"},{"filePath":"821","messages":"822","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"823","messages":"824","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"825","messages":"826","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"827","messages":"828","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"829","messages":"830","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"831","messages":"832","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"833","messages":"834","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"835","messages":"836","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"837","messages":"838","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"839","messages":"840","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"841","messages":"842","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"843","messages":"844","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"845","messages":"846","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"847","messages":"848","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"849","messages":"850","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"851"},{"filePath":"852","messages":"853","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"854"},{"filePath":"855","messages":"856","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"857","messages":"858","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"859","messages":"860","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"861","messages":"862","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"863","messages":"864","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"865","messages":"866","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"867","messages":"868","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"869","messages":"870","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"871","messages":"872","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"873","messages":"874","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"875","messages":"876","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"877","messages":"878","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"879"},{"filePath":"880","messages":"881","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"882"},{"filePath":"883","messages":"884","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"885","messages":"886","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"887","messages":"888","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"889"},{"filePath":"890","messages":"891","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"892","messages":"893","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"894","messages":"895","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"896"},{"filePath":"897","messages":"898","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"899","messages":"900","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"901"},{"filePath":"902","messages":"903","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"904"},{"filePath":"905","messages":"906","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"907","messages":"908","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"909","messages":"910","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\index.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\registerServiceWorker.ts",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\common\\animation.ts",["911"],"import { useEffect } from \"react\";\r\nimport {\r\n    finishFooterAnimation,\r\n    restartFooterAnimation,\r\n} from \"../components/shared/Animations/FooterAnimation\";\r\n\r\nconst timeStep = 1000; //ms\r\n\r\nlet animationObjects: AnimationObject<any>[] = [];\r\n\r\ninterface MinimumAnimationState {\r\n    time: number;\r\n    [key: string]: any;\r\n}\r\n\r\nexport interface AnimationObject<StateToAnimate extends MinimumAnimationState> {\r\n    state: StateToAnimate;\r\n    fncForEachTime: (state: StateToAnimate) => StateToAnimate; //単位時間あたりの変更を加えたステートを返す関数\r\n    setState: React.Dispatch<React.SetStateAction<StateToAnimate>>;\r\n    expirationTime: number;\r\n}\r\n\r\n//各コンポーネントRFCのuseEffect内でこのクラスをnewし、returnでcleanUpAnimationを返す\r\nexport class AnimationEngine<StateToAnimate extends MinimumAnimationState> {\r\n    animationObject: AnimationObject<StateToAnimate>;\r\n\r\n    constructor(\r\n        state: StateToAnimate,\r\n        fncForEachTime: (state: StateToAnimate) => StateToAnimate,\r\n        setState: React.Dispatch<React.SetStateAction<StateToAnimate>>,\r\n        expirationTime: number = 0\r\n    ) {\r\n        this.animationObject = {\r\n            state,\r\n            fncForEachTime,\r\n            setState,\r\n            expirationTime,\r\n        };\r\n        if (expirationTime > 0) {\r\n            setTimeout(() => {\r\n                this.cleanUpAnimation();\r\n            }, expirationTime);\r\n        }\r\n        animationObjects.push(this.animationObject);\r\n    }\r\n\r\n    cleanUpAnimation = () => {\r\n        animationObjects = animationObjects.filter(\r\n            obj => obj !== this.animationObject\r\n        );\r\n    };\r\n}\r\n\r\nlet intervalId = 0;\r\n\r\n//アプリケーションの初期化時に一度呼び出す関数\r\nexport function startAnimation() {\r\n    intervalId = window.setInterval(() => {\r\n        //タイムステップごとのオブジェクト状態更新\r\n        animationObjects.forEach(obj => {\r\n            //各オブジェクト毎の処理\r\n            const { state, fncForEachTime, setState } = obj;\r\n            const newState = fncForEachTime(state);\r\n            obj.state = newState;\r\n            setState(newState);\r\n        });\r\n    }, timeStep);\r\n}\r\n\r\n//アニメーションの初期化（登録済みのアニメーションの除去）\r\nexport function StopAnimation() {\r\n    useEffect(() => {\r\n        const previousAnimationObjects = [...animationObjects];\r\n\r\n        animationObjects = [];\r\n        //finishWelcomeAnimation();\r\n        finishFooterAnimation();\r\n        clearInterval(intervalId);\r\n\r\n        return () => {\r\n            animationObjects = previousAnimationObjects;\r\n            startAnimation();\r\n            restartFooterAnimation();\r\n        };\r\n    }, []);\r\n    return null;\r\n}\r\n","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\common\\consts.ts",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\common\\privateConsts.ts",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\common\\functions.ts",["912"],"import { APP_VERSION } from \"../version\";\r\n\r\nexport function getParams(): { [key: string]: string } {\r\n    let arg: { [key: string]: string } = {};\r\n    const pair = window.location.search.substring(1).split(\"&\");\r\n    for (let i = 0; pair[i]; i++) {\r\n        const kv = pair[i].split(\"=\");\r\n        arg[kv[0]] = kv[1];\r\n    }\r\n    return arg;\r\n}\r\n\r\nexport async function sendPost(objToSend: object, url: string) {\r\n    const method = \"POST\";\r\n    const body = JSON.stringify(objToSend);\r\n    const headers = {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n    };\r\n    const response = await fetch(url, { method, headers, body });\r\n    return response.json();\r\n}\r\n\r\nexport function sendPostWithoutAwait(objToSend: object, url: string) {\r\n    const method = \"POST\";\r\n    const body = JSON.stringify(objToSend);\r\n    const headers = {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n    };\r\n    fetch(url, { method, headers, body });\r\n}\r\n\r\nexport async function sendPostNoJsonResult(objToSend: object, url: string) {\r\n    const method = \"POST\";\r\n    const body = JSON.stringify(objToSend);\r\n    const headers = {\r\n        \"Content-Type\": \"application/json\",\r\n    };\r\n    const response = await fetch(url, { method, headers, body });\r\n    return response;\r\n}\r\n\r\nexport async function sendPostNoJsonResultWithoutAwait(\r\n    objToSend: object,\r\n    url: string\r\n) {\r\n    const method = \"POST\";\r\n    const body = JSON.stringify(objToSend);\r\n    const headers = {\r\n        \"Content-Type\": \"application/json\",\r\n    };\r\n    fetch(url, { method, headers, body });\r\n}\r\n\r\nexport function sendClientOpeLog(\r\n    operationName: string,\r\n    parameters: string = \"\"\r\n) {\r\n    const saveKey = \"userId\";\r\n    const item = window.localStorage.getItem(saveKey);\r\n    let userId = item && JSON.parse(item);\r\n\r\n    if (!userId) {\r\n        const nowDate = new Date();\r\n        const rand = Math.floor(Math.random() * 10000);\r\n\r\n        userId = `${nowDate.getFullYear()}/${\r\n            nowDate.getMonth() + 1\r\n        }/${nowDate.getDate()}-${nowDate.getHours()}:${nowDate.getMinutes()}:${nowDate.getSeconds()}-${rand}`;\r\n        window.localStorage.setItem(saveKey, JSON.stringify(userId));\r\n    }\r\n\r\n    const log = {\r\n        url: window.location.href,\r\n        operationName,\r\n        userId,\r\n        parameters,\r\n    };\r\n    sendPostNoJsonResultWithoutAwait(log, \"api/SystemBase/RegisterLog\");\r\n}\r\n\r\nexport async function checkAppVersion() {\r\n    const url = `api/SystemBase/GetVersion/V${new Date().getMilliseconds()}`;\r\n    fetch(url).then(res => {\r\n        res.json().then(v => {\r\n            const userAgent = navigator.userAgent;\r\n            sendClientOpeLog(\r\n                `Came from ${document.referrer}`,\r\n                `ClientVersion:${APP_VERSION} ServerVersion:${v} UserAgent:${userAgent}`\r\n            );\r\n            console.log(\"ClientVersion: \" + APP_VERSION);\r\n            console.log(\"ServerVersion: \" + v);\r\n\r\n            if (Number(v) !== APP_VERSION && !userAgent.includes(\"Googlebot\")) {\r\n                const saveKey = \"AppVersionCheckErrorCount\";\r\n                const errCount: number =\r\n                    Number(sessionStorage.getItem(saveKey)) || 0;\r\n\r\n                if (errCount <= 5) {\r\n                    window.sessionStorage.setItem(\r\n                        saveKey,\r\n                        (errCount + 1).toString()\r\n                    );\r\n                    //@ts-ignore\r\n                    window.location.reload(true);\r\n                }\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\nexport function reloadAndRedirect(saveKey: string) {\r\n    //初回はリロードし、時刻記録\r\n    //その後、10秒間リロード連打\r\n    //その後、404ページにリダイレクト\r\n\r\n    const savedErrTime = window.sessionStorage.getItem(saveKey);\r\n    const intSavedTime = savedErrTime && parseInt(savedErrTime);\r\n\r\n    const now = new Date();\r\n    const nowTime = now.getTime();\r\n\r\n    if (intSavedTime && nowTime - intSavedTime < 15000) {\r\n        if (nowTime - intSavedTime < 10000) {\r\n            //@ts-ignore\r\n            window.location.reload(true);\r\n        } else {\r\n            window.location.href = `/not-found?p=${window.location.pathname}`;\r\n        }\r\n    } else {\r\n        window.sessionStorage.setItem(saveKey, nowTime.toString());\r\n        //@ts-ignore\r\n        window.location.reload(true);\r\n    }\r\n    return;\r\n}\r\n\r\nexport function reloadAndRedirect_OneTimeReload(saveKey: string) {\r\n    //★広告表示等のため、リロード連打がまずい場合はこちらを使う\r\n    //初回は時刻を記録し、1回だけリロード\r\n    //その後、404ページにリダイレクト\r\n    //存在してはいけないページがIndexされないため、２回目は即時リダイレクトを行う\r\n\r\n    const savedErrTime = window.sessionStorage.getItem(saveKey);\r\n    const intSavedTime = savedErrTime && parseInt(savedErrTime);\r\n\r\n    const now = new Date();\r\n    const nowTime = now.getTime();\r\n\r\n    if (intSavedTime && nowTime - intSavedTime < 15000) {\r\n        window.location.href = `/not-found?p=${window.location.pathname}`;\r\n    } else {\r\n        window.sessionStorage.setItem(saveKey, nowTime.toString());\r\n        //@ts-ignore\r\n        window.location.reload(true);\r\n    }\r\n    return;\r\n}\r\n\r\n//localStorageかDBからデータを取得し、reduxのstoreを更新\r\nexport function loadLocalStorageOrDB(\r\n    url: string,\r\n    type: string,\r\n    stateName: string,\r\n    fileName: string,\r\n    dispatch: Function\r\n) {\r\n    const saveKey = fileName + stateName;\r\n\r\n    const loadData = (url: string, type: string, stateName: string) => {\r\n        fetch(url).then(res => {\r\n            res.json().then(objResult => {\r\n                const action: any = {\r\n                    type,\r\n                };\r\n                action[stateName] = objResult;\r\n                dispatch(action);\r\n\r\n                window.localStorage.setItem(saveKey, JSON.stringify(objResult));\r\n            });\r\n        });\r\n    };\r\n\r\n    try {\r\n        const item = window.localStorage.getItem(saveKey);\r\n        const savedObject = item && JSON.parse(item);\r\n\r\n        if (savedObject && !navigator.userAgent.includes(\"Googlebot\")) {\r\n            const action: any = { type };\r\n            action[stateName] = savedObject;\r\n            dispatch(action);\r\n        }\r\n        loadData(url, type, stateName);\r\n    } catch (e) {\r\n        reloadAndRedirect_OneTimeReload(\"db-access-error-time\");\r\n    }\r\n}\r\n\r\n//配列シャッフル\r\nexport function shuffle<T>(array: T[]): T[] {\r\n    let n = array.length,\r\n        t,\r\n        i;\r\n\r\n    while (n) {\r\n        i = Math.floor(Math.random() * n--);\r\n        t = array[n];\r\n        array[n] = array[i];\r\n        array[i] = t;\r\n    }\r\n\r\n    return array;\r\n}\r\n\r\nexport async function sleepAsync(milliSecond: number) {\r\n    return new Promise(resolve =>\r\n        setTimeout(() => resolve(undefined), milliSecond)\r\n    );\r\n}\r\n\r\nexport function debounce<T extends unknown[]>(\r\n    fn: (...arg: T) => void,\r\n    milliSecond: number\r\n) {\r\n    let timer: number;\r\n    return function (...arg: T) {\r\n        clearTimeout(timer);\r\n        timer = window.setTimeout(() => fn(...arg), milliSecond);\r\n    };\r\n}\r\n","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\store\\configureStore.ts",["913"],"import { routerMiddleware, routerReducer } from \"react-router-redux\";\r\nimport { applyMiddleware, combineReducers, compose, createStore } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport * as Base from \"./BaseStore\";\r\nimport * as KanjiConverter from \"./KanjiConverter\";\r\nimport * as StoriesEdit from \"./StoriesEditStore\";\r\nimport * as Stories from \"./StoriesStore\";\r\nimport * as StoriesTop from \"./StoriesTopStore\";\r\nimport * as VocabQuiz from \"./VocabQuizStore\";\r\n\r\nexport type ApplicationState = {\r\n    base: Base.BaseState;\r\n    kanjiConverter: KanjiConverter.State;\r\n    stories: Stories.StoriesState;\r\n    storiesEdit: StoriesEdit.StoriesEditState;\r\n    storiesTop: StoriesTop.State;\r\n    vocabQuiz: VocabQuiz.IVocabQuizState;\r\n};\r\n\r\nconst reducers = {\r\n    base: Base.reducer,\r\n    kanjiConverter: KanjiConverter.reducer,\r\n    stories: Stories.reducer,\r\n    storiesEdit: StoriesEdit.reducer,\r\n    storiesTop: StoriesTop.reducer,\r\n    vocabQuiz: VocabQuiz.reducer,\r\n};\r\n\r\nexport default function configureStore(history: any, initialState?: any) {\r\n    const middleware = [thunk, routerMiddleware(history)];\r\n\r\n    // In development, use the browser's Redux dev tools extension if installed\r\n    const enhancers = [];\r\n    const isDevelopment = process.env.NODE_ENV === \"development\";\r\n    if (\r\n        isDevelopment &&\r\n        typeof window !== \"undefined\" &&\r\n        (window as any).devToolsExtension\r\n    ) {\r\n        enhancers.push((window as any).devToolsExtension());\r\n    }\r\n\r\n    const rootReducer = combineReducers({\r\n        ...reducers,\r\n        routing: routerReducer,\r\n    });\r\n\r\n    return createStore(\r\n        rootReducer,\r\n        initialState,\r\n        compose(applyMiddleware(...middleware), ...enhancers)\r\n    );\r\n}\r\n\r\nexport interface ThunkDispatch<TBasicAction, TExtraThunkArg> {\r\n    <TReturnType>(\r\n        thunkAction: AppThunkAction<TBasicAction, TReturnType, TExtraThunkArg>\r\n    ): TReturnType;\r\n    <A extends TBasicAction>(action: A): A;\r\n    <TAction extends TBasicAction, TReturnType>(\r\n        action:\r\n            | TAction\r\n            | AppThunkAction<TBasicAction, TReturnType, TExtraThunkArg>\r\n    ): TAction | TReturnType;\r\n}\r\n\r\nexport interface AppThunkAction<\r\n    TAction,\r\n    TReturnType = void,\r\n    TExtraThunkArg = never\r\n> {\r\n    (\r\n        dispatch: ThunkDispatch<TAction, TExtraThunkArg>,\r\n        getState: () => ApplicationState,\r\n        extraArguments?: TExtraThunkArg\r\n    ): TReturnType;\r\n}\r\n\r\nexport type AsMapObject<K> = { [U in keyof K]: K[U] };\r\n","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\version.ts",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\store\\BaseStore.ts",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\store\\KanjiConverter.ts",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\store\\StoriesTopStore.ts",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\store\\StoriesStore.ts",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\store\\StoriesEditStore.ts",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\store\\VocabQuizStore.ts",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\Articles\\index.ts",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\Game\\index.ts",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\LocalDebug\\index.ts",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\Vocab\\index.ts",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\index.ts",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\common\\util\\cFetch.ts",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\types\\stories.ts",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\Articles\\App.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\LocalDebug\\App.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\Game\\App.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\App.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\Vocab\\App.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\shared\\Animations\\FooterAnimation\\index.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\shared\\404.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\Vocab\\Vocab\\Top.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\Articles\\Articles\\EditTop.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\Articles\\Articles\\Edit.tsx",["914"],"import { Card, Tooltip } from \"@material-ui/core\";\r\nimport Popover from \"@material-ui/core/Popover\";\r\nimport ArrowForward from \"@material-ui/icons/ArrowForward\";\r\nimport * as React from \"react\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\nimport { ArticleContent, BreadCrumbs, getIndex } from \".\";\r\nimport {\r\n    articlesStorage,\r\n    ARTICLES_URL,\r\n    BLOB_URL,\r\n} from \"../../../common/consts\";\r\nimport { checkThumbnailExistence } from \"../../../common/util/checkThumbnailExistence\";\r\nimport ShurikenProgress from \"../../shared/Animations/ShurikenProgress\";\r\nimport { Author } from \"../../shared/Author\";\r\nimport Head from \"../../shared/Helmet\";\r\nimport { Markdown } from \"../../shared/Markdown\";\r\nimport { checkImgExtension } from \"../../shared/Markdown/ImageRender\";\r\nimport { AuthorEditor } from \"./AuthorEditor\";\r\nimport { RightPanel } from \"./RightPanel\";\r\nimport \"./style.css\";\r\n\r\nexport interface Page {\r\n    url?: string;\r\n    title: string;\r\n    description: string;\r\n    articleContent: string;\r\n    released?: boolean;\r\n    isAboutFolktale?: boolean;\r\n    authorId: number;\r\n}\r\n\r\nexport const getImgNumber = (num: number = 0) => {\r\n    const today = new Date();\r\n    const todayNumber = today.getMonth() + today.getDate() + num;\r\n    const mod = todayNumber % 30;\r\n    if (mod > 22) return 2;\r\n    if (mod > 14) return 3;\r\n    return 1;\r\n};\r\n\r\nconst Articles = ({\r\n    match: {\r\n        params: { pageName },\r\n    },\r\n    history,\r\n}: RouteComponentProps<{ pageName: string }>) => {\r\n    const [title, setTitle] = useState<Page[\"title\"]>(\"\");\r\n    const [description, setDescription] = useState<Page[\"description\"]>(\"\");\r\n    const [content, setContent] = useState<Page[\"articleContent\"]>(\"\");\r\n    const [released, setReleased] = useState<Page[\"released\"]>(false);\r\n    const [isAboutFolktale, setIsAboutFolktale] =\r\n        useState<Page[\"isAboutFolktale\"]>(false);\r\n    const [allAuthors, setAllAuthors] = useState<Author[]>([]);\r\n    const [openAuthorEditor, setOpenAuthorEditor] = useState(false);\r\n    const [authorImgVersion, setAuthorImgVersion] = useState(0);\r\n    const [author, setAuthor] = useState<Author | undefined>(undefined);\r\n\r\n    const [openSamplePanel, setOpenSamplePanel] = useState(false);\r\n\r\n    const [indexLi, setIndexLi] = useState<JSX.Element[]>([]);\r\n    const [screenWidth, setScreenWidth] = useState(window.innerWidth);\r\n    const [height, setHeight] = useState(window.innerHeight);\r\n    const [imgNumber, setImgNumber] = useState(getImgNumber(pageName.length));\r\n    const [token, setToken] = useState(\"\");\r\n\r\n    const getArticle = async () => {\r\n        try {\r\n            const lowerPageName = pageName.toLowerCase();\r\n            if (pageName !== lowerPageName) {\r\n                history.push(`/articlesEdit/${lowerPageName}`);\r\n                return;\r\n            }\r\n\r\n            const response: Response = await fetch(\r\n                `api/Articles/GetArticleForEdit?p=${pageName}`\r\n            );\r\n            const page: Page = await response.json();\r\n            const {\r\n                title,\r\n                description,\r\n                articleContent,\r\n                released,\r\n                isAboutFolktale,\r\n                authorId,\r\n            } = page;\r\n            setTitle(title);\r\n            setDescription(description);\r\n            setContent(articleContent);\r\n            setReleased(released);\r\n            setIsAboutFolktale(isAboutFolktale);\r\n\r\n            const authorResponse: Response = await fetch(\r\n                \"api/Articles/GetAllAuthors\"\r\n            );\r\n            const authors: Author[] = await authorResponse.json();\r\n            setAllAuthors(authors);\r\n            setAuthor(authors.find(a => a.authorId === authorId));\r\n            setAuthorImgVersion(authorImgVersion + 1);\r\n        } catch (e) {\r\n            alert(\"Something is wrong!\");\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        void getArticle();\r\n\r\n        const onChangeScreenSize = () => {\r\n            if (screenWidth !== window.innerWidth) {\r\n                setScreenWidth(window.innerWidth);\r\n            }\r\n            if (height !== window.innerHeight) {\r\n                setHeight(window.innerHeight);\r\n            }\r\n        };\r\n\r\n        let timer: number;\r\n        window.onresize = () => {\r\n            if (timer > 0) {\r\n                clearTimeout(timer);\r\n            }\r\n            timer = window.setTimeout(() => {\r\n                onChangeScreenSize();\r\n            }, 100);\r\n        };\r\n\r\n        for (let i = 0; i < 5; i++) {\r\n            setTimeout(() => {\r\n                onChangeScreenSize();\r\n            }, i * 1000);\r\n        }\r\n\r\n        setImgNumber(getImgNumber(pageName.length));\r\n\r\n        const saveData = localStorage.getItem(\"folktales-register-token\");\r\n        const objSaveData = saveData && JSON.parse(saveData);\r\n        setToken(objSaveData?.token || \"\");\r\n    }, [pageName]);\r\n\r\n    useEffect(() => {\r\n        if (!content) return;\r\n        setIndexLi(getIndex(content));\r\n    }, [content]);\r\n\r\n    const save = async () => {\r\n        try {\r\n            // convert h1 to h2\r\n            const replacedContent = content.replace(\r\n                /^(\\s*)#(\\s+\\S+)$/m,\r\n                \"$1##$2\"\r\n            );\r\n\r\n            const imgLine = replacedContent\r\n                ?.split(/\\r?\\n/g)\r\n                ?.find(\r\n                    c =>\r\n                        c.includes(\"![\") &&\r\n                        (checkImgExtension(c) || c.includes(\"](youtube)\"))\r\n                );\r\n\r\n            const imgPath = await getImgPath(imgLine);\r\n\r\n            const formData = new FormData();\r\n            formData.append(\"url\", pageName);\r\n            formData.append(\"title\", title);\r\n            formData.append(\"description\", description);\r\n            formData.append(\"articleContent\", replacedContent);\r\n            formData.append(\"imgPath\", imgPath);\r\n            formData.append(\r\n                \"isAboutFolktale\",\r\n                isAboutFolktale ? \"true\" : \"false\"\r\n            );\r\n            formData.append(\"token\", token);\r\n\r\n            const res = await fetch(\"/api/Articles/UpdateContents\", {\r\n                method: \"POST\",\r\n                body: formData,\r\n            });\r\n            const result = await res.json();\r\n            getArticle();\r\n\r\n            return result.result;\r\n        } catch (e) {\r\n            return \"Failed to save...\";\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div\r\n            style={{\r\n                position: \"relative\",\r\n            }}\r\n        >\r\n            <Head title={title} desc={description} noindex />\r\n            <BreadCrumbs title={title} />\r\n            <button\r\n                style={{\r\n                    position: \"absolute\",\r\n                    top: 30,\r\n                    left: 10,\r\n                    zIndex: 5000,\r\n                    width: \"33%\",\r\n                }}\r\n                className=\"btn btn-primary\"\r\n                onClick={() => {\r\n                    (async () => {\r\n                        await save();\r\n\r\n                        window.open(\r\n                            `${ARTICLES_URL}/preview/${pageName}`,\r\n                            undefined,\r\n                            `left=0, top=0, width=${window.screen.width}, height=${window.screen.height}`\r\n                        );\r\n                    })();\r\n                }}\r\n            >\r\n                {\"Full screen preview\"}\r\n            </button>\r\n            <div\r\n                style={{ width: \"100%\", height: height - 130, display: \"flex\" }}\r\n            >\r\n                <div\r\n                    style={{\r\n                        flex: 1,\r\n                        padding: \"60px 30px 30px\",\r\n                        height: height - 130,\r\n                        overflowY: \"scroll\",\r\n                        marginRight: 15,\r\n                    }}\r\n                >\r\n                    <ArticleContent\r\n                        pageName={pageName}\r\n                        title={title}\r\n                        description={description}\r\n                        imgNumber={imgNumber}\r\n                        width={screenWidth / 3}\r\n                        indexLi={indexLi}\r\n                        content={content}\r\n                        adsense={false}\r\n                        isAboutFolktale={isAboutFolktale}\r\n                        allAuthors={allAuthors}\r\n                        author={author}\r\n                        screenWidth={screenWidth}\r\n                    />\r\n                </div>\r\n                <div\r\n                    style={{\r\n                        flex: 2,\r\n                        width: \"100%\",\r\n                        overflowY: \"scroll\",\r\n                    }}\r\n                >\r\n                    <div style={{ display: \"flex\" }}>\r\n                        <input\r\n                            type=\"text\"\r\n                            value={title}\r\n                            onChange={e => setTitle(e.target.value)}\r\n                            style={{ width: \"100%\" }}\r\n                        />\r\n                        {author?.isAdmin && (\r\n                            <button\r\n                                onClick={() => {\r\n                                    setTitle(\"folktale\");\r\n                                    setDescription(pageName);\r\n                                }}\r\n                            >\r\n                                folktale\r\n                            </button>\r\n                        )}\r\n                    </div>\r\n                    {title != \"folktale\" && (\r\n                        <textarea\r\n                            style={{ width: \"100%\", height: 90 }}\r\n                            value={description}\r\n                            onChange={e => setDescription(e.target.value)}\r\n                        />\r\n                    )}\r\n                    <textarea\r\n                        style={{\r\n                            width: \"100%\",\r\n                            height:\r\n                                title != \"folktale\"\r\n                                    ? height - 270\r\n                                    : height - 170,\r\n                            padding: 10,\r\n                        }}\r\n                        value={content}\r\n                        onChange={e => {\r\n                            setContent(e.target.value);\r\n                        }}\r\n                    />\r\n                </div>\r\n            </div>\r\n            <div\r\n                style={{\r\n                    width: \"100%\",\r\n                    display: \"flex\",\r\n                    alignItems: \"center\",\r\n                    justifyContent: \"center\",\r\n                }}\r\n            >\r\n                {released && (\r\n                    <span style={{ color: \"red\", margin: \"0 15px\" }}>\r\n                        {\"released\"}\r\n                    </span>\r\n                )}\r\n                <input\r\n                    type=\"text\"\r\n                    style={{ width: 150, margin: 15 }}\r\n                    onChange={e => setToken(e.target.value)}\r\n                    defaultValue={token}\r\n                    placeholder=\"Access Token\"\r\n                />\r\n                {author?.isAdmin && (\r\n                    <span style={{ margin: 15 }}>\r\n                        {\"isAboutFolktale:\"}\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            checked={isAboutFolktale}\r\n                            onChange={ev =>\r\n                                setIsAboutFolktale(ev.target.checked)\r\n                            }\r\n                        />\r\n                    </span>\r\n                )}\r\n                <button\r\n                    className=\"btn btn-primary\"\r\n                    style={{ margin: 15 }}\r\n                    onClick={async () => {\r\n                        const confirmationResult = window.confirm(\r\n                            \"Do you really want to save?\"\r\n                        );\r\n                        if (!confirmationResult) {\r\n                            return;\r\n                        }\r\n\r\n                        localStorage.setItem(\r\n                            \"folktales-register-token\",\r\n                            JSON.stringify({ token })\r\n                        );\r\n\r\n                        alert(await save());\r\n                    }}\r\n                >\r\n                    Save\r\n                </button>\r\n                <button\r\n                    className=\"btn btn-primary\"\r\n                    style={{ margin: 15 }}\r\n                    disabled={released}\r\n                    onClick={async () => {\r\n                        const confirmationResult = window.confirm(\r\n                            \"Do you really want to release?\"\r\n                        );\r\n                        if (!confirmationResult) {\r\n                            return;\r\n                        }\r\n\r\n                        const resultSave = await save();\r\n                        if (resultSave !== \"success\") {\r\n                            alert(resultSave);\r\n                            return;\r\n                        }\r\n\r\n                        const formData = new FormData();\r\n                        formData.append(\"url\", pageName);\r\n                        formData.append(\"token\", token);\r\n\r\n                        fetch(\"/api/Articles/Register\", {\r\n                            method: \"POST\",\r\n                            body: formData,\r\n                        })\r\n                            .then(async response => {\r\n                                const result: {\r\n                                    result: string;\r\n                                } = await response.json();\r\n                                alert(result.result);\r\n\r\n                                if (result.result === \"success\") {\r\n                                    setTimeout(() => {\r\n                                        window.open(\r\n                                            `${ARTICLES_URL}/${pageName}`,\r\n                                            \"_blank\"\r\n                                        );\r\n                                    }, 1000);\r\n                                    void getArticle();\r\n                                }\r\n                            })\r\n                            .catch(() => {\r\n                                alert(\"Failed to release...\");\r\n                            });\r\n                    }}\r\n                >\r\n                    Release\r\n                </button>\r\n                <button\r\n                    className=\"btn btn-primary\"\r\n                    style={{ margin: 15 }}\r\n                    disabled={!released}\r\n                    onClick={() => {\r\n                        const confirmationResult = window.confirm(\r\n                            \"Do you really want to hide?\"\r\n                        );\r\n                        if (!confirmationResult) {\r\n                            return;\r\n                        }\r\n\r\n                        localStorage.setItem(\r\n                            \"folktales-register-token\",\r\n                            JSON.stringify({ token })\r\n                        );\r\n\r\n                        const formData = new FormData();\r\n                        formData.append(\"url\", pageName);\r\n                        formData.append(\"token\", token);\r\n\r\n                        fetch(\"/api/Articles/Hide\", {\r\n                            method: \"POST\",\r\n                            body: formData,\r\n                        })\r\n                            .then(async response => {\r\n                                const { result } = await response.json();\r\n                                alert(result);\r\n\r\n                                if (result === \"success\") {\r\n                                    void getArticle();\r\n                                }\r\n                            })\r\n                            .catch(() => {\r\n                                alert(\"Failed to hide...\");\r\n                            });\r\n                    }}\r\n                >\r\n                    Hide\r\n                </button>\r\n                <MultimediaButton token={token} folderName={pageName} />\r\n                <button\r\n                    className=\"btn btn-primary\"\r\n                    style={{ margin: 15 }}\r\n                    onClick={() => {\r\n                        setOpenSamplePanel(true);\r\n                    }}\r\n                >\r\n                    Markdown Sample\r\n                </button>\r\n                {author && (\r\n                    <Tooltip\r\n                        title={\r\n                            <span\r\n                                style={{\r\n                                    fontSize: \"large\",\r\n                                }}\r\n                            >\r\n                                {\"Edit Author Info\"}\r\n                            </span>\r\n                        }\r\n                        placement=\"top\"\r\n                    >\r\n                        <img\r\n                            style={{\r\n                                width: 60,\r\n                                height: 60,\r\n                                objectFit: \"cover\",\r\n                                objectPosition: \"50% 50%\",\r\n                                borderRadius: \"50%\",\r\n                                marginLeft: 15,\r\n                                cursor: \"pointer\",\r\n                            }}\r\n                            src={`${articlesStorage}_authors/${author.authorId}${author.imgExtension}?v=${authorImgVersion}`}\r\n                            onClick={() => {\r\n                                setOpenAuthorEditor(true);\r\n                            }}\r\n                        />\r\n                    </Tooltip>\r\n                )}\r\n            </div>\r\n            <SamplePanel\r\n                openSamplePanel={openSamplePanel}\r\n                setOpenSamplePanel={setOpenSamplePanel}\r\n                screenWidth={screenWidth}\r\n            />\r\n            <AuthorPanel\r\n                author={author}\r\n                openAuthorEditor={openAuthorEditor}\r\n                setOpenAuthorEditor={setOpenAuthorEditor}\r\n                screenWidth={screenWidth}\r\n                getArticle={getArticle}\r\n                token={token}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nasync function getImgPath(imgLine?: string): Promise<string> {\r\n    if (!imgLine) {\r\n        return \"\";\r\n    }\r\n\r\n    if (!imgLine.includes(\"](youtube)\")) {\r\n        return imgLine.split(\"](\")[1].replace(\")\", \"\");\r\n    }\r\n\r\n    const videoId = imgLine.replace(\"![\", \"\").replace(\"](youtube)\", \"\");\r\n\r\n    if (await checkThumbnailExistence(videoId, \"hq720.jpg\")) {\r\n        return `https://img.youtube.com/vi/${videoId}/hq720.jpg`;\r\n    }\r\n\r\n    if (await checkThumbnailExistence(videoId, \"hqdefault.jpg\")) {\r\n        return `https://img.youtube.com/vi/${videoId}/hqdefault.jpg`;\r\n    }\r\n\r\n    return `https://img.youtube.com/vi/${videoId}/0.jpg`;\r\n}\r\n\r\nexport default Articles;\r\n\r\nconst samples = [\r\n    { title: \"Bold\", content: `It's **bold** here!` },\r\n    { title: \"Red\", content: `It's \\`red\\` here!` },\r\n    { title: \"Yellow background\", content: `It's *yellow* here!` },\r\n    {\r\n        title: \"Table\",\r\n        content: `| header1 | header2 | header3 |\\n|    -    |    -    |    -    |\\n|   aaa   |   bbb   |   ccc   |\\n|   ddd   |   eee   |   fff   |`,\r\n    },\r\n    { title: \"H2 header\", content: `## This is h2 header\\nThis is a content.` },\r\n    {\r\n        title: \"H3 header\",\r\n        content: `### This is h3 header\\nThis is a content.`,\r\n    },\r\n    {\r\n        title: \"H4 header\",\r\n        content: `#### This is h4 header\\nThis is a content.`,\r\n    },\r\n    {\r\n        title: \"Link\",\r\n        content: \"[Jump to Lingual Ninja](https://www.lingual-ninja.com)\",\r\n    },\r\n    {\r\n        title: \"Unordered list\",\r\n        content: `- Item1\\n- Item2\\n- Item3`,\r\n    },\r\n    {\r\n        title: \"Ordered list\",\r\n        content: `1. Item1\\n2. Item2\\n3. Item3`,\r\n    },\r\n    {\r\n        title: \"Blockquote\",\r\n        content: `> When we quote sentences from other website, we need to use this.  \\n> To break lines in Blockquote, we need to put two spaces  \\n> at the end of the line.`,\r\n    },\r\n    {\r\n        title: \"Green box\",\r\n        content: `\\`\\`\\`This_is_the_title\\nThis is a content.\\n\\`\\`\\``,\r\n    },\r\n    {\r\n        title: \"Green box (without title)\",\r\n        content: `\\`\\`\\`box\\nThis is a content.\\n\\`\\`\\``,\r\n    },\r\n    {\r\n        title: \"Hidden block\",\r\n        content: `\\`\\`\\`button-Show_The_Answer-Close\\nこれ は おちゃ です。\\n\\`\\`\\``,\r\n    },\r\n    {\r\n        title: \"Sample sentence\",\r\n        content: `\\`\\`\\`e\\n天気が良ければ公園に行こう。\\nてんき が よけれ ば こうえん に いこ う。\\nte n ki ga yo ke re ba ko u e n ni i ko u\\nIf the weather is good, let's go to the park.\\n{K:[3,7],H:[6,11],R:[11,22],E:[0,2,18,22]}\\nhttps://lingualninja.blob.core.windows.net/lingual-storage/articles/japanese-i-adjectives-list-for-jlpt-n5/hypothetical_form.m4a\\n[\"天気\",\"てんき\",\"weather\",\"が\",\"\",\"が is a Japanese particle that is used right after the subject of a verb.\",\"良ければ\",\"よければ\",\"If ... is good\",\"公園\",\"こうえん\",\"park\",\"に\",\"\",\"to\",\"行こう\",\"いこう\",\"Let's go\"]\\n\\`\\`\\``,\r\n    },\r\n    {\r\n        title: \"Sample sentence (with borders)\",\r\n        content: `\\`\\`\\`Example-black\\n\\`\\`\\`e\\n天気が良ければ公園に行こう。\\nてんき が よけれ ば こうえん に いこ う。\\nte n ki ga yo ke re ba ko u e n ni i ko u\\nIf the weather is good, let's go to the park.\\n{K:[3,7],H:[6,11],R:[11,22],E:[0,2,18,22]}\\nhttps://lingualninja.blob.core.windows.net/lingual-storage/articles/japanese-i-adjectives-list-for-jlpt-n5/hypothetical_form.m4a\\n[\"天気\",\"てんき\",\"weather\",\"が\",\"\",\"が is a Japanese particle that is used right after the subject of a verb.\",\"良ければ\",\"よければ\",\"If ... is good\",\"公園\",\"こうえん\",\"park\",\"に\",\"\",\"to\",\"行こう\",\"いこう\",\"Let's go\"]\\n\\`\\`\\``,\r\n    },\r\n] as const;\r\n\r\nfunction SamplePanel({\r\n    openSamplePanel,\r\n    setOpenSamplePanel,\r\n    screenWidth,\r\n}: {\r\n    openSamplePanel: boolean;\r\n    setOpenSamplePanel: (open: boolean) => void;\r\n    screenWidth: number;\r\n}) {\r\n    return (\r\n        <RightPanel\r\n            open={openSamplePanel}\r\n            onClose={() => {\r\n                setOpenSamplePanel(false);\r\n            }}\r\n            style={{ backgroundColor: \"#F2F2F2\" }}\r\n            screenWidth={screenWidth}\r\n            panelWidth={screenWidth - 30}\r\n        >\r\n            <div style={{ padding: 10 }}>\r\n                <h2>Markdown Samples</h2>\r\n                <p>Please copy to use them!</p>\r\n                {samples.map(s => (\r\n                    <SampleCard key={s.title} {...s} />\r\n                ))}\r\n            </div>\r\n        </RightPanel>\r\n    );\r\n}\r\n\r\nfunction SampleCard({ title, content }: { title: string; content: string }) {\r\n    return (\r\n        <Card style={{ padding: 10, margin: \"10px 0\" }}>\r\n            <h3>{title}</h3>\r\n            <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n                <div\r\n                    style={{\r\n                        flex: 1,\r\n                        display: \"flex\",\r\n                        alignItems: \"center\",\r\n                        justifyContent: \"center\",\r\n                    }}\r\n                >\r\n                    <code style={{ whiteSpace: \"pre-wrap\" }}>\r\n                        {content.split(\"\\n\").map((c, i) => (\r\n                            <div key={i}>{c}</div>\r\n                        ))}\r\n                    </code>\r\n                </div>\r\n                <ArrowForward\r\n                    style={{\r\n                        width: 35,\r\n                        height: 35,\r\n                        cursor: \"pointer\",\r\n                    }}\r\n                />\r\n                <div\r\n                    style={{\r\n                        flex: 1,\r\n                        display: \"flex\",\r\n                        alignItems: \"center\",\r\n                        justifyContent: \"center\",\r\n                    }}\r\n                >\r\n                    <Markdown source={content} />\r\n                </div>\r\n            </div>\r\n        </Card>\r\n    );\r\n}\r\n\r\nfunction AuthorPanel({\r\n    author,\r\n    openAuthorEditor,\r\n    setOpenAuthorEditor,\r\n    screenWidth,\r\n    getArticle,\r\n    token,\r\n}: {\r\n    author?: Author;\r\n    openAuthorEditor: boolean;\r\n    setOpenAuthorEditor: (open: boolean) => void;\r\n    screenWidth: number;\r\n    getArticle: () => void;\r\n    token: string;\r\n}) {\r\n    return (\r\n        <RightPanel\r\n            open={openAuthorEditor}\r\n            onClose={() => {\r\n                setOpenAuthorEditor(false);\r\n            }}\r\n            style={{ backgroundColor: \"#F2F2F2\" }}\r\n            screenWidth={screenWidth}\r\n            panelWidth={screenWidth - 30}\r\n        >\r\n            {author ? (\r\n                <AuthorEditor\r\n                    initialAuthor={author}\r\n                    onClose={() => {\r\n                        getArticle();\r\n                        setOpenAuthorEditor(false);\r\n                    }}\r\n                    token={token}\r\n                />\r\n            ) : (\r\n                <div\r\n                    style={{\r\n                        width: \"100%\",\r\n                        height: \"100%\",\r\n                        display: \"flex\",\r\n                        alignItems: \"center\",\r\n                        justifyContent: \"center\",\r\n                    }}\r\n                >\r\n                    <ShurikenProgress size=\"20%\" />\r\n                </div>\r\n            )}\r\n        </RightPanel>\r\n    );\r\n}\r\n\r\nconst createMarkdown = \"Create markdown\";\r\nfunction MultimediaButton({\r\n    token,\r\n    folderName,\r\n}: {\r\n    token: string;\r\n    folderName: string;\r\n}) {\r\n    const multimediaRef = useRef(null);\r\n    const [open, setOpen] = useState(false);\r\n    const [file, setFile] = useState<File>();\r\n    const [submitting, setSubmitting] = useState(false);\r\n\r\n    const message = file\r\n        ? `Please push the \"${createMarkdown}\" button`\r\n        : \"Please choose the file to embed in the article\";\r\n\r\n    return (\r\n        <>\r\n            <button\r\n                className=\"btn btn-primary\"\r\n                style={{ margin: 15 }}\r\n                onClick={() => {\r\n                    setOpen(true);\r\n                }}\r\n            >\r\n                <span ref={multimediaRef}>Multimedia</span>\r\n            </button>\r\n            <Popover open={open} anchorEl={multimediaRef.current}>\r\n                {submitting ? (\r\n                    <div\r\n                        style={{\r\n                            padding: 50,\r\n                            width: 456,\r\n                            height: 271,\r\n                            display: \"flex\",\r\n                            alignItems: \"center\",\r\n                            justifyContent: \"center\",\r\n                        }}\r\n                    >\r\n                        <ShurikenProgress size=\"20%\" />\r\n                    </div>\r\n                ) : (\r\n                    <div style={{ padding: 50, width: 456, height: 271 }}>\r\n                        <p style={{ color: \"red\" }}>{message}</p>\r\n                        <input\r\n                            type=\"file\"\r\n                            name=\"file\"\r\n                            onChange={e => {\r\n                                const target = e.target;\r\n                                const file = target.files?.item(0);\r\n                                if (file) {\r\n                                    setFile(file);\r\n                                }\r\n                            }}\r\n                        />\r\n                        <div style={{ display: \"flex\", marginTop: 30 }}>\r\n                            <button\r\n                                className=\"btn btn-primary\"\r\n                                style={{ margin: 15 }}\r\n                                onClick={() => {\r\n                                    setFile(undefined);\r\n                                    setOpen(false);\r\n                                }}\r\n                            >\r\n                                Close\r\n                            </button>\r\n                            <button\r\n                                className=\"btn btn-primary\"\r\n                                style={{ margin: 15 }}\r\n                                onClick={() => {\r\n                                    if (!file) {\r\n                                        return;\r\n                                    }\r\n                                    setSubmitting(true);\r\n\r\n                                    const formData = new FormData();\r\n                                    formData.append(\"file\", file);\r\n                                    formData.append(\"folderName\", folderName);\r\n                                    formData.append(\"token\", token);\r\n\r\n                                    (async () => {\r\n                                        const res = await fetch(\r\n                                            \"/api/Articles/UploadMedia\",\r\n                                            {\r\n                                                method: \"POST\",\r\n                                                body: formData,\r\n                                            }\r\n                                        );\r\n                                        const result = await res.json();\r\n                                        if (result.result !== \"ok\") {\r\n                                            alert(\r\n                                                result.result ||\r\n                                                    \"File upload failed! Something is wrong!\"\r\n                                            );\r\n                                            setSubmitting(false);\r\n                                            return;\r\n                                        }\r\n\r\n                                        const copyResult = execCopy(\r\n                                            `![${\r\n                                                file.name.split(\".\")[0]\r\n                                            }](${BLOB_URL}/articles/_multimedia/${folderName}/${file.name\r\n                                                .split(\" \")\r\n                                                .join(\"_\")})`\r\n                                        );\r\n                                        if (!copyResult) {\r\n                                            alert(\r\n                                                `Copy failed! Please try \"${createMarkdown}\" again!`\r\n                                            );\r\n                                            setSubmitting(false);\r\n                                            return;\r\n                                        }\r\n                                        setFile(undefined);\r\n                                        setOpen(false);\r\n                                        setSubmitting(false);\r\n\r\n                                        alert(\r\n                                            \"Markdown was successfully created and copied! Please just paste it by pushing [Ctrl + v]!\"\r\n                                        );\r\n                                    })();\r\n                                }}\r\n                                disabled={!file}\r\n                            >\r\n                                {createMarkdown}\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </Popover>\r\n        </>\r\n    );\r\n}\r\n\r\nfunction execCopy(string?: string) {\r\n    const tmp = document.createElement(\"div\");\r\n    const pre = document.createElement(\"pre\");\r\n\r\n    pre.style.webkitUserSelect = \"auto\";\r\n    pre.style.userSelect = \"auto\";\r\n\r\n    tmp.appendChild(pre).textContent = string || null;\r\n\r\n    const s = tmp.style;\r\n    s.position = \"fixed\";\r\n    s.right = \"200%\";\r\n\r\n    document.body.appendChild(tmp);\r\n    void document.getSelection()?.selectAllChildren(tmp);\r\n\r\n    const result = document.execCommand(\"copy\");\r\n\r\n    document.body.removeChild(tmp);\r\n\r\n    return result;\r\n}\r\n","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\shared\\YouTubeAd\\Popup.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\Home.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\Terms.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\Developer.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\RomajiConverter.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\KanjiConverter.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\HiraganaQuiz.tsx",["915"],"import { Location } from \"history\";\r\nimport * as React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { BLOG_URL } from \"../../../common/consts\";\r\nimport { useHashScroll } from \"../../../common/hooks/useHashScroll\";\r\nimport FB from \"../../shared/FaceBook\";\r\nimport Helmet from \"../../shared/Helmet\";\r\nimport \"./parts/KanaQuiz/KanaQuiz.css\";\r\nimport { QuizCore } from \"./parts/KanaQuiz/KanaQuizCore\";\r\nimport { KanaQuizConsts } from \"./parts/KanaQuiz/types\";\r\n\r\nfunction HiraganaQuiz({ location }: { location: Location }) {\r\n    useHashScroll(location);\r\n\r\n    return (\r\n        <div className=\"kana-quiz center\">\r\n            <Helmet\r\n                title=\"Hiragana Quiz\"\r\n                desc=\"A web app to remember Hiragana! I hope this will help you to study!\"\r\n            />\r\n            <div\r\n                className=\"breadcrumbs\"\r\n                itemScope\r\n                itemType=\"https://schema.org/BreadcrumbList\"\r\n                style={{ textAlign: \"left\", maxWidth: \"600px\" }}\r\n            >\r\n                <span\r\n                    itemProp=\"itemListElement\"\r\n                    itemScope\r\n                    itemType=\"http://schema.org/ListItem\"\r\n                >\r\n                    <Link\r\n                        to=\"/\"\r\n                        itemProp=\"item\"\r\n                        style={{ marginRight: \"5px\", marginLeft: \"5px\" }}\r\n                    >\r\n                        <span itemProp=\"name\">{\"Home\"}</span>\r\n                    </Link>\r\n                    <meta itemProp=\"position\" content=\"1\" />\r\n                </span>\r\n                {\" > \"}\r\n                <span\r\n                    itemProp=\"itemListElement\"\r\n                    itemScope\r\n                    itemType=\"http://schema.org/ListItem\"\r\n                >\r\n                    <Link\r\n                        to=\"/hiragana-katakana\"\r\n                        itemProp=\"item\"\r\n                        style={{ marginRight: \"5px\", marginLeft: \"5px\" }}\r\n                    >\r\n                        <span itemProp=\"name\">{\"Hiragana and Katakana\"}</span>\r\n                        <meta itemProp=\"position\" content=\"2\" />\r\n                    </Link>\r\n                </span>\r\n                {\" > \"}\r\n                <span\r\n                    itemProp=\"itemListElement\"\r\n                    itemScope\r\n                    itemType=\"http://schema.org/ListItem\"\r\n                >\r\n                    <span\r\n                        itemProp=\"name\"\r\n                        style={{ marginRight: \"5px\", marginLeft: \"5px\" }}\r\n                    >\r\n                        {\"Hiragana Quiz\"}\r\n                    </span>\r\n                    <meta itemProp=\"position\" content=\"3\" />\r\n                </span>\r\n            </div>\r\n            <hr style={{ maxWidth: \"600px\" }} />\r\n            <QuizCore consts={consts} />\r\n            <div style={{ maxWidth: \"600px\" }}>\r\n                <hr />\r\n                <br />\r\n                <Link to=\"/vocabulary-quiz\">\r\n                    <button className=\"btn btn-dark btn-lg btn-block\">\r\n                        {\"Japanese Vocabulary Quiz\"}\r\n                    </button>\r\n                </Link>\r\n                <br />\r\n                <hr />\r\n            </div>\r\n            <div style={{ fontSize: \"x-large\", margin: \"20px\" }}>\r\n                <Link to=\"/folktales\">\r\n                    {\"Learn Japanese from Japanese folktales >>\"}\r\n                </Link>\r\n            </div>\r\n            <br />\r\n            <FB />\r\n            <br />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HiraganaQuiz;\r\n\r\nexport const hiraganaList = {\r\n    a: \"あ\",\r\n    i: \"い\",\r\n    u: \"う\",\r\n    e: \"え\",\r\n    o: \"お\",\r\n    ka: \"か\",\r\n    ki: \"き\",\r\n    ku: \"く\",\r\n    ke: \"け\",\r\n    ko: \"こ\",\r\n    sa: \"さ\",\r\n    shi: \"し\",\r\n    su: \"す\",\r\n    se: \"せ\",\r\n    so: \"そ\",\r\n    ta: \"た\",\r\n    chi: \"ち\",\r\n    tsu: \"つ\",\r\n    te: \"て\",\r\n    to: \"と\",\r\n    na: \"な\",\r\n    ni: \"に\",\r\n    nu: \"ぬ\",\r\n    ne: \"ね\",\r\n    no: \"の\",\r\n    ha: \"は\",\r\n    hi: \"ひ\",\r\n    fu: \"ふ\",\r\n    he: \"へ\",\r\n    ho: \"ほ\",\r\n    ma: \"ま\",\r\n    mi: \"み\",\r\n    mu: \"む\",\r\n    me: \"め\",\r\n    mo: \"も\",\r\n    ya: \"や\",\r\n    yu: \"ゆ\",\r\n    yo: \"よ\",\r\n    ra: \"ら\",\r\n    ri: \"り\",\r\n    ru: \"る\",\r\n    re: \"れ\",\r\n    ro: \"ろ\",\r\n    wa: \"わ\",\r\n    _wo: \"を\",\r\n    n: \"ん\",\r\n    ga: \"が\",\r\n    gi: \"ぎ\",\r\n    gu: \"ぐ\",\r\n    ge: \"げ\",\r\n    go: \"ご\",\r\n    za: \"ざ\",\r\n    ji: \"じ\",\r\n    zu: \"ず\",\r\n    ze: \"ぜ\",\r\n    zo: \"ぞ\",\r\n    da: \"だ\",\r\n    _ji: \"ぢ\",\r\n    _zu: \"づ\",\r\n    de: \"で\",\r\n    do: \"ど\",\r\n    ba: \"ば\",\r\n    bi: \"び\",\r\n    bu: \"ぶ\",\r\n    be: \"べ\",\r\n    bo: \"ぼ\",\r\n    pa: \"ぱ\",\r\n    pi: \"ぴ\",\r\n    pu: \"ぷ\",\r\n    pe: \"ぺ\",\r\n    po: \"ぽ\",\r\n    kya: \"きゃ\",\r\n    kyu: \"きゅ\",\r\n    kyo: \"きょ\",\r\n    sha: \"しゃ\",\r\n    shu: \"しゅ\",\r\n    sho: \"しょ\",\r\n    cha: \"ちゃ\",\r\n    chu: \"ちゅ\",\r\n    cho: \"ちょ\",\r\n    nya: \"にゃ\",\r\n    nyu: \"にゅ\",\r\n    nyo: \"にょ\",\r\n    hya: \"ひゃ\",\r\n    hyu: \"ひゅ\",\r\n    hyo: \"ひょ\",\r\n    mya: \"みゃ\",\r\n    myu: \"みゅ\",\r\n    myo: \"みょ\",\r\n    rya: \"りゃ\",\r\n    ryu: \"りゅ\",\r\n    ryo: \"りょ\",\r\n    gya: \"ぎゃ\",\r\n    gyu: \"ぎゅ\",\r\n    gyo: \"ぎょ\",\r\n    ja: \"じゃ\",\r\n    ju: \"じゅ\",\r\n    jo: \"じょ\",\r\n    bya: \"びゃ\",\r\n    byu: \"びゅ\",\r\n    byo: \"びょ\",\r\n    pya: \"ぴゃ\",\r\n    pyu: \"ぴゅ\",\r\n    pyo: \"ぴょ\",\r\n} as const;\r\n\r\nexport const consts: KanaQuizConsts = {\r\n    KANA_TYPE: \"Hiragana\",\r\n    OTHER_KANA_TYPE: \"Katakana\",\r\n    KANA_LIST: hiraganaList,\r\n    OBJ_LINKS: {\r\n        \"Hiragana chart\": `${BLOG_URL}/2018/07/hiragana-list.html`,\r\n        \"Dull sound\": `${BLOG_URL}/2018/07/dull-sound.html`,\r\n        \"P-sound\": `${BLOG_URL}/2018/07/p-sound.html`,\r\n        \"Syllabic nasal\": `${BLOG_URL}/2018/07/syllabic-nasal.html`,\r\n        \"Contracted sound\": `${BLOG_URL}/2018/07/contracted-sound.html`,\r\n        \"Romaji chart\": `${BLOG_URL}/2018/07/romaji.html`,\r\n    },\r\n    MARK_DOWN: `\r\n## What is Hiragana?\r\nJapanese language has three types of characters.\r\nThe three are Hiragana, Katakana, and Kanji.\r\nHiragana is the most basic character in Japanese.\r\nThis is the first step for learning Japanese!\r\n\r\n## How to use Hiragana Quiz\r\nThere are three options implemented in this app.\r\n\"Random 10 characters\", \"Random 30 characters\", and “All Hiragana characters”.\r\n\r\n### Random 10 characters mode\r\nPlease try this option first.\r\n10 Hiragana characters will be shown randomly, and you will choose how to pronounce them with Romaji.\r\nAfter starting the quiz, one Hiragana character will appear on the top of the screen, and below it, you will see 4 options where Romaji characters are written.\r\nYou can choose the correct pronunciation of the Hiragana character from the 4 options.\r\n\r\nEven if you make a mistake, don’t worry because there will be only 10 questions in this mode.\r\nAfter you finish all 10 questions, you can check your score.\r\nAlso, you can check the list of Hiragana characters in which you didn’t choose the correct answer.\r\nPlease remember the Hiragana characters in which you didn’t choose the correct option.\r\nAfter remembering, please try again!\r\n\r\n### Random 30 characters mode\r\nIf you can pass the “Random 10 characters mode”, please try “Random 30 characters mode”.\r\nSince you have already gotten use to this app, you can probably proceed with this quiz smoothly.\r\nIf you make mistakes, please remember them after the quiz.\r\nThe list of the Hiragana characters that you didn’t pass will be shown at the end of the quiz in this mode as well.\r\n\r\n### All Hiragana characters mode\r\nIf you got a perfect score in the other two modes, please try “All Hiragana characters mode”!\r\nThis quiz may be long because there are 104 questions included in this mode.\r\nEven if it’s hard, don’t give up because when you get a perfect score, you will be a Hiragana master!\r\n\r\n## The next step after taking this Hiragana Quiz\r\nAfter you get a perfect score in “All Hiragana characters mode”, the next step is remembering Katakana.\r\nSince you already remembered all of the Hiragana characters using this Hiragana Quiz, remembering the Katakana characters will be quite easy for you.\r\nMany Katakana characters look like Hiragana characters.\r\nSo, the knowledge you obtained from the Hiragana Quiz will be useful.\r\nPlease proceed to the next step by clicking the “Katakana Quiz” button below!`,\r\n} as const;\r\n","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\HiraganaAndKatakana.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\KatakanaQuiz.tsx",["916"],"import { Location } from \"history\";\r\nimport * as React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { BLOG_URL } from \"../../../common/consts\";\r\nimport { useHashScroll } from \"../../../common/hooks/useHashScroll\";\r\nimport FB from \"../../shared/FaceBook\";\r\nimport Helmet from \"../../shared/Helmet\";\r\nimport \"./parts/KanaQuiz/KanaQuiz.css\";\r\nimport { QuizCore } from \"./parts/KanaQuiz/KanaQuizCore\";\r\nimport { KanaQuizConsts } from \"./parts/KanaQuiz/types\";\r\n\r\nfunction KatakanaQuiz({ location }: { location: Location }) {\r\n    useHashScroll(location);\r\n\r\n    return (\r\n        <div className=\"kana-quiz center\">\r\n            <Helmet\r\n                title=\"Katakana Quiz\"\r\n                desc=\"A web app to remember Katakana! I hope this will help you to study!\"\r\n            />\r\n            <div\r\n                className=\"breadcrumbs\"\r\n                itemScope\r\n                itemType=\"https://schema.org/BreadcrumbList\"\r\n                style={{ textAlign: \"left\", maxWidth: \"600px\" }}\r\n            >\r\n                <span\r\n                    itemProp=\"itemListElement\"\r\n                    itemScope\r\n                    itemType=\"http://schema.org/ListItem\"\r\n                >\r\n                    <Link\r\n                        to=\"/\"\r\n                        itemProp=\"item\"\r\n                        style={{ marginRight: \"5px\", marginLeft: \"5px\" }}\r\n                    >\r\n                        <span itemProp=\"name\">{\"Home\"}</span>\r\n                    </Link>\r\n                    <meta itemProp=\"position\" content=\"1\" />\r\n                </span>\r\n                {\" > \"}\r\n                <span\r\n                    itemProp=\"itemListElement\"\r\n                    itemScope\r\n                    itemType=\"http://schema.org/ListItem\"\r\n                >\r\n                    <Link\r\n                        to=\"/hiragana-katakana\"\r\n                        itemProp=\"item\"\r\n                        style={{ marginRight: \"5px\", marginLeft: \"5px\" }}\r\n                    >\r\n                        <span itemProp=\"name\">{\"Hiragana and Katakana\"}</span>\r\n                        <meta itemProp=\"position\" content=\"2\" />\r\n                    </Link>\r\n                </span>\r\n                {\" > \"}\r\n                <span\r\n                    itemProp=\"itemListElement\"\r\n                    itemScope\r\n                    itemType=\"http://schema.org/ListItem\"\r\n                >\r\n                    <span\r\n                        itemProp=\"name\"\r\n                        style={{ marginRight: \"5px\", marginLeft: \"5px\" }}\r\n                    >\r\n                        {\"Katakana Quiz\"}\r\n                    </span>\r\n                    <meta itemProp=\"position\" content=\"3\" />\r\n                </span>\r\n            </div>\r\n            <hr style={{ maxWidth: \"600px\" }} />\r\n            <QuizCore consts={consts} />\r\n            <div style={{ maxWidth: \"600px\" }}>\r\n                <hr />\r\n                <br />\r\n                <Link to=\"/vocabulary-quiz\">\r\n                    <button className=\"btn btn-dark btn-lg btn-block\">\r\n                        {\"Japanese Vocabulary Quiz\"}\r\n                    </button>\r\n                </Link>\r\n                <br />\r\n                <hr />\r\n            </div>\r\n            <div style={{ fontSize: \"x-large\", margin: \"20px\" }}>\r\n                <Link to=\"/folktales\">\r\n                    {\"Learn Japanese from Japanese folktales >>\"}\r\n                </Link>\r\n            </div>\r\n            <br />\r\n            <FB />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default KatakanaQuiz;\r\n\r\nexport const katakanaList = {\r\n    a: \"ア\",\r\n    i: \"イ\",\r\n    u: \"ウ\",\r\n    e: \"エ\",\r\n    o: \"オ\",\r\n    ka: \"カ\",\r\n    ki: \"キ\",\r\n    ku: \"ク\",\r\n    ke: \"ケ\",\r\n    ko: \"コ\",\r\n    sa: \"サ\",\r\n    shi: \"シ\",\r\n    su: \"ス\",\r\n    se: \"セ\",\r\n    so: \"ソ\",\r\n    ta: \"タ\",\r\n    chi: \"チ\",\r\n    tsu: \"ツ\",\r\n    te: \"テ\",\r\n    to: \"ト\",\r\n    na: \"ナ\",\r\n    ni: \"ニ\",\r\n    nu: \"ヌ\",\r\n    ne: \"ネ\",\r\n    no: \"ノ\",\r\n    ha: \"ハ\",\r\n    hi: \"ヒ\",\r\n    fu: \"フ\",\r\n    he: \"ヘ\",\r\n    ho: \"ホ\",\r\n    ma: \"マ\",\r\n    mi: \"ミ\",\r\n    mu: \"ム\",\r\n    me: \"メ\",\r\n    mo: \"モ\",\r\n    ya: \"ヤ\",\r\n    yu: \"ユ\",\r\n    yo: \"ヨ\",\r\n    ra: \"ラ\",\r\n    ri: \"リ\",\r\n    ru: \"ル\",\r\n    re: \"レ\",\r\n    ro: \"ロ\",\r\n    wa: \"ワ\",\r\n    _wo: \"ヲ\",\r\n    n: \"ン\",\r\n    ga: \"ガ\",\r\n    gi: \"ギ\",\r\n    gu: \"グ\",\r\n    ge: \"ゲ\",\r\n    go: \"ゴ\",\r\n    za: \"ザ\",\r\n    ji: \"ジ\",\r\n    zu: \"ズ\",\r\n    ze: \"ゼ\",\r\n    zo: \"ゾ\",\r\n    da: \"ダ\",\r\n    _ji: \"ヂ\",\r\n    _zu: \"ヅ\",\r\n    de: \"デ\",\r\n    do: \"ド\",\r\n    ba: \"バ\",\r\n    bi: \"ビ\",\r\n    bu: \"ブ\",\r\n    be: \"ベ\",\r\n    bo: \"ボ\",\r\n    pa: \"パ\",\r\n    pi: \"ピ\",\r\n    pu: \"プ\",\r\n    pe: \"ペ\",\r\n    po: \"ポ\",\r\n    kya: \"キャ\",\r\n    kyu: \"キュ\",\r\n    kyo: \"キョ\",\r\n    sha: \"シャ\",\r\n    shu: \"シュ\",\r\n    sho: \"ショ\",\r\n    cha: \"チャ\",\r\n    chu: \"チュ\",\r\n    cho: \"チョ\",\r\n    nya: \"ニャ\",\r\n    nyu: \"ニュ\",\r\n    nyo: \"ニョ\",\r\n    hya: \"ヒャ\",\r\n    hyu: \"ヒュ\",\r\n    hyo: \"ヒョ\",\r\n    mya: \"ミャ\",\r\n    myu: \"ミュ\",\r\n    myo: \"ミョ\",\r\n    rya: \"リャ\",\r\n    ryu: \"リュ\",\r\n    ryo: \"リョ\",\r\n    gya: \"ギャ\",\r\n    gyu: \"ギュ\",\r\n    gyo: \"ギョ\",\r\n    ja: \"ジャ\",\r\n    ju: \"ジュ\",\r\n    jo: \"ジョ\",\r\n    bya: \"ビャ\",\r\n    byu: \"ビュ\",\r\n    byo: \"ビョ\",\r\n    pya: \"ピャ\",\r\n    pyu: \"ピュ\",\r\n    pyo: \"ピョ\",\r\n} as const;\r\n\r\nconst consts: KanaQuizConsts = {\r\n    KANA_TYPE: \"Katakana\",\r\n    OTHER_KANA_TYPE: \"Hiragana\",\r\n    KANA_LIST: katakanaList,\r\n    OBJ_LINKS: {\r\n        \"Katakana chart\": `${BLOG_URL}/2018/08/katakana-chart.html`,\r\n        \"Japlish - Eat a Pee Man!?\": `${BLOG_URL}/2018/09/japlish-wasei-eigo.html`,\r\n    },\r\n    MARK_DOWN: `\r\n## What is Katakana?\r\nJapanese language has three types of characters.\r\nThe three characters are Hiragana, Katakana, and Kanji.\r\nHiragana is the most basic character in Japanese.\r\nAfter remembering Hiragana, you should start to learn Katakana.\r\n\r\nKatakana and Hiragana look very similar.\r\nBasically, we use Hiragana more than Katakana.\r\n\r\n### When do Japanese people use Katakana?\r\nKatakana is used in the limited cases below:\r\n- Loan-words from foreign countries\r\n- Onomatopoeic word\r\n\r\nWe use Katakana for the two purposes above.\r\nIf you want to know more detailed information, please check this link:\r\n [When should we use Katakana? >>](${BLOG_URL}/2018/08/katakana-chart.html#Katakana-chart6)\r\n\r\n## What you should do before taking this Katakana Quiz\r\n\r\nBefore remembering Katakana, you should remember Hiragana.\r\nIf you still don't remember all the Hiragana characters,\r\n please try this Hiragana Quiz: [Hiragana Quiz >>](/hiragana-quiz)\r\n\r\n## How to use Katakana Quiz\r\nHow you use this Katakana Quiz is the same way you use the Hiragana Quiz.\r\nIf you have some issues when using the Katakana Quiz,\r\n please check the explanation in the Hiragana Quiz page:\r\n [Hiragana Quiz >>](/hiragana-quiz)\r\n\r\n## The next step after taking this Katakana Quiz\r\nAfter you get a perfect score in “All Katakana characters mode”,\r\n the next step is remembering vocabulary and practice reading and listening.\r\n\r\n### Remembering vocabulary\r\n\r\nThis website has basic vocabulary lists and quizzes for N5 exam.\r\nI recommend you to remember basic N5 vocabulary using this quiz:\r\n [Vocabulary Quiz >>](/vocabulary-quiz)\r\n\r\n### Practice reading and listening\r\nIf you want to enjoy Japanese stories while remembering vocabulary,\r\n there is a good way.\r\nThis website has a reading practice tool called \"[Japanese Folktales](/folktales)\".\r\nYou can read Japanese folktales in Romaji, Hiragana, and Katakana.\r\nAlso, you can listen to the stories spoken by a native Japanese speaker.\r\nPlease try to get used to listening and reading Japanese:\r\n [Japanese Folktales >>](/folktales)\r\n\r\nI hope this application helps you to study Japanese!\r\n`,\r\n} as const;\r\n","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\Stories\\StoriesTop\\StoriesEditTop.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\Stories\\StoriesEdit.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\Stories\\StoriesVideo.tsx",["917"],"import * as React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\nimport Button from \"reactstrap/lib/Button\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { StopAnimation } from \"../../../../common/animation\";\r\nimport * as consts from \"../../../../common/consts\";\r\nimport { BLOB_URL } from \"../../../../common/consts\";\r\nimport { sleepAsync } from \"../../../../common/functions\";\r\nimport * as storiesEditStore from \"../../../../store/StoriesEditStore\";\r\nimport { sentence } from \"../../../../types/stories\";\r\nimport CharacterComment from \"../../../shared/CharacterComment\";\r\nimport Head from \"../../../shared/Helmet\";\r\n\r\ntype Props = storiesEditStore.StoriesEditState &\r\n    storiesEditStore.IActionCreators &\r\n    RouteComponentProps<{ storyName: string }>;\r\ntype State = {\r\n    storyName: string;\r\n    isStarted: boolean;\r\n    isEnding: boolean;\r\n    playingSentence: number;\r\n    isFooterShown: boolean;\r\n};\r\nclass StoriesVideo extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        const { params } = props.match;\r\n        const storyName = params.storyName.toString();\r\n\r\n        this.state = {\r\n            storyName: storyName,\r\n            playingSentence: -1,\r\n            isStarted: false,\r\n            isEnding: false,\r\n            isFooterShown: true,\r\n        };\r\n\r\n        this.props.loadStory(this.state.storyName);\r\n    }\r\n\r\n    startVideo = async () => {\r\n        const { storyDesc, sentences } = this.props;\r\n\r\n        const playOne = async (currentIndex: number) => {\r\n            return new Promise(async r => {\r\n                const shortStoryName = storyDesc.storyName.split(\"--\")[0];\r\n                const music = new Audio(\r\n                    `${BLOB_URL}/folktalesAudio/${shortStoryName}/folktale-audio${sentences[currentIndex].lineNumber}.m4a`\r\n                );\r\n                music.onended = async () => {\r\n                    await sleepAsync(1000);\r\n                    music.currentTime = 0;\r\n                    music.onended = async () => {\r\n                        await sleepAsync(2000);\r\n                        r(undefined);\r\n                    };\r\n                    music.play();\r\n                };\r\n                music.play();\r\n            });\r\n        };\r\n        this.setState({ isStarted: true });\r\n        await sleepAsync(5000);\r\n        for (let k in sentences) {\r\n            this.setState({ playingSentence: Number(k) });\r\n            await playOne(Number(k));\r\n        }\r\n        await sleepAsync(1000);\r\n        this.setState({ isEnding: true });\r\n    };\r\n\r\n    componentDidUpdate() {\r\n        if (this.props.storyDesc.storyId) {\r\n            if (!this.props.sentences || this.props.sentences.length <= 0) {\r\n                this.props.loadSentences(this.props.storyDesc.storyId);\r\n                this.props.loadWords(this.props.storyDesc.storyId);\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { sentences, words } = this.props;\r\n        const {\r\n            playingSentence,\r\n            isStarted,\r\n            isEnding,\r\n            isFooterShown,\r\n        } = this.state;\r\n\r\n        const storyName = this.props.storyDesc.storyName || \"\";\r\n        const title = storyName.split(\"--\").join(\" - \").split(\"_\").join(\" \");\r\n\r\n        const line = (type: keyof sentence) => {\r\n            const r = sentences[playingSentence][\"romaji\"];\r\n            const size =\r\n                r?.length < 150\r\n                    ? {}\r\n                    : r?.length < 210\r\n                    ? { fontSize: 27 }\r\n                    : { fontSize: 26 };\r\n\r\n            const isHidden = r?.length > 330 && type === \"kanji\";\r\n            const capitalType = type.charAt(0).toUpperCase() + type.slice(1);\r\n            return (\r\n                !isHidden && (\r\n                    <>\r\n                        <Button\r\n                            color=\"success\"\r\n                            style={{\r\n                                fontSize: \"x-large\",\r\n                                fontWeight: \"bold\",\r\n                            }}\r\n                            size=\"sm\"\r\n                        >\r\n                            {capitalType}\r\n                        </Button>\r\n                        <ul style={{ margin: \"5px 0 20px\", ...size }}>\r\n                            <li>{sentences[playingSentence][type]}</li>\r\n                        </ul>\r\n                    </>\r\n                )\r\n            );\r\n        };\r\n\r\n        return (\r\n            <div className=\"center\" style={{ overflow: \"hidden\" }}>\r\n                <Head title={title + \" Story\"} noindex />\r\n                <StopAnimation />\r\n                <div\r\n                    style={{\r\n                        width: \"100%\",\r\n                        height: \"100%\",\r\n                        backgroundColor: \"#1b181b\",\r\n                        position: \"fixed\",\r\n                        top: 0,\r\n                        right: 0,\r\n                        zIndex: -1,\r\n                    }}\r\n                ></div>\r\n                <h1\r\n                    style={{\r\n                        margin: \"30px\",\r\n                        lineHeight: \"30px\",\r\n                        color: \"#eb6905\",\r\n                    }}\r\n                    className=\"whiteShadow\"\r\n                >\r\n                    <b>{title}</b>\r\n                </h1>\r\n                {sentences?.length > 0 && words?.length > 0 ? (\r\n                    <>\r\n                        <button onClick={this.startVideo}>\r\n                            {\"start video\"}\r\n                        </button>\r\n                        <br />\r\n                        <br />\r\n                        <button\r\n                            onClick={() => {\r\n                                this.setState({ isFooterShown: false });\r\n                                this.startVideo();\r\n                            }}\r\n                        >\r\n                            {\"without footer\"}\r\n                        </button>\r\n                    </>\r\n                ) : (\r\n                    <p>{\"loading\"}</p>\r\n                )}\r\n                <br />\r\n                {isStarted && (\r\n                    <div\r\n                        style={{\r\n                            width: \"100%\",\r\n                            height: \"100%\",\r\n                            backgroundColor: \"white\",\r\n                            position: \"fixed\",\r\n                            top: 0,\r\n                            left: 0,\r\n                            zIndex: 9999999999999999,\r\n                            textAlign: \"left\",\r\n                            display: \"flex\",\r\n                            alignItems: \"center\",\r\n                            justifyContent: \"center\",\r\n                        }}\r\n                    >\r\n                        {this.state.storyName ? (\r\n                            <img\r\n                                src={`${consts.BLOB_URL}/folktalesImg/${\r\n                                    storyName.split(\"--\")[0]\r\n                                }.png`}\r\n                                alt={title}\r\n                                style={{\r\n                                    width: \"100%\",\r\n                                    maxHeight: \"100%\",\r\n                                    position: \"relative\",\r\n                                    zIndex: -9999,\r\n                                    objectFit: \"contain\",\r\n                                }}\r\n                            />\r\n                        ) : null}\r\n                        <div\r\n                            style={{\r\n                                position: \"absolute\",\r\n                                top: 0,\r\n                                left: 0,\r\n                                zIndex: 100,\r\n                                width: \"100%\",\r\n                                height: \"100%\",\r\n                                backgroundColor: \"white\",\r\n                                opacity: 0.7,\r\n                            }}\r\n                            className=\"whiteShadow\"\r\n                        ></div>\r\n                        <div\r\n                            style={{\r\n                                position: \"absolute\",\r\n                                top: 0,\r\n                                left: 0,\r\n                                padding: 10,\r\n                                fontSize: \"xx-large\",\r\n                                fontWeight: \"bold\",\r\n                                zIndex: 999999,\r\n                                width: \"100%\",\r\n                                height: \"100%\",\r\n                            }}\r\n                        >\r\n                            {playingSentence >= 0 ? (\r\n                                !isEnding ? (\r\n                                    <div className=\"whiteShadow\">\r\n                                        {line(\"kanji\")}\r\n                                        {line(\"hiragana\")}\r\n                                        {line(\"romaji\")}\r\n                                        {line(\"english\")}\r\n                                    </div>\r\n                                ) : (\r\n                                    <div\r\n                                        style={{\r\n                                            display: \"flex\",\r\n                                            justifyContent: \"center\",\r\n                                            alignItems: \"center\",\r\n                                            width: \"100%\",\r\n                                            height: \"100%\",\r\n                                        }}\r\n                                    >\r\n                                        <div style={{ textAlign: \"center\" }}>\r\n                                            <h1\r\n                                                style={{\r\n                                                    margin: 35,\r\n                                                    fontSize: \"50px\",\r\n                                                    fontWeight: \"bold\",\r\n                                                }}\r\n                                                className=\"whiteShadow\"\r\n                                            >\r\n                                                Thank you for watching!\r\n                                            </h1>\r\n                                            <CharacterComment\r\n                                                imgNumber={1}\r\n                                                comment=\"Don't forget to subscribe to this channel!\"\r\n                                                screenWidth={window.innerWidth}\r\n                                                commentStyle={{\r\n                                                    textAlign: \"left\",\r\n                                                    padding: \"10px 30px\",\r\n                                                    fontSize: \"30px\",\r\n                                                }}\r\n                                            />\r\n                                        </div>\r\n                                    </div>\r\n                                )\r\n                            ) : (\r\n                                <div\r\n                                    style={{\r\n                                        display: \"flex\",\r\n                                        justifyContent: \"center\",\r\n                                        alignItems: \"center\",\r\n                                        width: \"100%\",\r\n                                        height: \"100%\",\r\n                                    }}\r\n                                    className=\"whiteShadow\"\r\n                                >\r\n                                    <h1\r\n                                        style={{\r\n                                            display: \"block\",\r\n                                            fontSize: \"100px\",\r\n                                            textAlign: \"center\",\r\n                                        }}\r\n                                        className=\"whiteShadow\"\r\n                                    >\r\n                                        {title.split(\" - \").map((s, i) => (\r\n                                            <>\r\n                                                <p>{!i ? s : `(${s})`}</p>\r\n                                            </>\r\n                                        ))}\r\n                                    </h1>\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                        {isFooterShown && (\r\n                            <div\r\n                                style={{\r\n                                    position: \"absolute\",\r\n                                    bottom: 0,\r\n                                    left: 0,\r\n                                    padding: 5,\r\n                                    fontSize: \"large\",\r\n\r\n                                    zIndex: 999999,\r\n                                    width: \"100%\",\r\n                                    backgroundColor: \"white\",\r\n                                    textAlign: \"center\",\r\n                                }}\r\n                            >\r\n                                If you want to check the word list for this\r\n                                story, please visit:{\" \"}\r\n                                <span style={{ color: \"blue\" }}>\r\n                                    {window.location.href\r\n                                        .replace(\"Video\", \"\")\r\n                                        .replace(\r\n                                            \"localhost:5001\",\r\n                                            consts.Z_APPS_HOST\r\n                                        )}\r\n                                </span>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    (state: any) => state.storiesEdit,\r\n    dispatch => bindActionCreators(storiesEditStore.actionCreators, dispatch)\r\n)(StoriesVideo);\r\n","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\SBDiner.tsx",["918"],"import * as React from \"react\";\r\nimport { ChangeEvent, ReactNode, useEffect, useState } from \"react\";\r\nimport { EmptyObject } from \"redux\";\r\nimport { BLOB_URL } from \"../../../common/consts\";\r\nimport Head from \"../../shared/Helmet\";\r\nimport { ATargetBlank } from \"../../shared/Link/ATargetBlank\";\r\n\r\ntype ImgType = \"top1\" | \"top2\" | \"burger_menu\" | \"drink_menu\";\r\n\r\ntype State = Partial<{\r\n    top2: File;\r\n    top1: { file: File; order: number }[];\r\n    burger_menu: { file: File; order: number }[];\r\n    drink_menu: { file: File; order: number }[];\r\n    pw: string;\r\n    isUploading: boolean;\r\n}>;\r\n\r\nexport default class SBDiner extends React.Component<EmptyObject, State> {\r\n    constructor(props: EmptyObject) {\r\n        super(props);\r\n\r\n        //セーブデータがあればそれを設定\r\n        const saveData = localStorage.getItem(\"sb-diner-token\");\r\n        const objSaveData = saveData && JSON.parse(saveData);\r\n\r\n        let token;\r\n        if (objSaveData) {\r\n            token = objSaveData.token || \"\";\r\n        } else {\r\n            token = \"\";\r\n        }\r\n\r\n        this.state = {\r\n            top1: [],\r\n            burger_menu: [],\r\n            drink_menu: [],\r\n            top2: undefined,\r\n            pw: token,\r\n            isUploading: false,\r\n        };\r\n\r\n        // disable popup ad\r\n        localStorage.setItem(\"YouTubeAdClosed\", new Date().toISOString());\r\n    }\r\n\r\n    handleChangeFile = (\r\n        e: React.ChangeEvent<HTMLInputElement>,\r\n        imageType: ImgType,\r\n        multipleFiles?: boolean\r\n    ) => {\r\n        const target = e.target;\r\n        const file = target.files?.item(0);\r\n\r\n        if (multipleFiles) {\r\n            if (!target.files) return;\r\n\r\n            const fileArray = Array.from(target.files);\r\n            if (\r\n                fileArray.some(\r\n                    file => !file.name.toLowerCase().endsWith(\".png\")\r\n                )\r\n            ) {\r\n                alert(\"画像の拡張子はpngでお願いします！\");\r\n                return;\r\n            }\r\n\r\n            this.setState({\r\n                [imageType]: fileArray.map((file, order) => ({\r\n                    file,\r\n                    order,\r\n                })),\r\n            });\r\n            return;\r\n        }\r\n\r\n        // Single file\r\n        if (file && !file.name.toLowerCase().endsWith(\".png\")) {\r\n            alert(\"画像の拡張子はpngでお願いします！\");\r\n            return;\r\n        }\r\n        this.setState({ [imageType]: file || undefined });\r\n    };\r\n\r\n    handleChangePW = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({ pw: e.target.value });\r\n        localStorage.setItem(\r\n            \"sb-diner-token\",\r\n            JSON.stringify({ token: e.target.value })\r\n        );\r\n    };\r\n\r\n    uploadFile = (imageType: string) => {\r\n        this.setState({ isUploading: true });\r\n\r\n        let file = null;\r\n        if (imageType === \"top2\") {\r\n            file = this.state.top2;\r\n        }\r\n\r\n        if (!file || file.name.split(\".\").pop()?.toLowerCase() !== \"png\") {\r\n            alert(\"Error! Please select a png file.\");\r\n            this.setState({ isUploading: false });\r\n            return;\r\n        }\r\n\r\n        const formData = new FormData();\r\n        formData.append(\"file\", file);\r\n        formData.append(\"shop\", \"sb-diner\");\r\n        formData.append(\"fileName\", imageType);\r\n        formData.append(\"pw\", this.state.pw || \"\");\r\n\r\n        fetch(\"/api/ShopImg/Upload\", { method: \"POST\", body: formData })\r\n            .then(async response => {\r\n                const result = await response.json();\r\n                if (result) {\r\n                    if (result.errMessage) {\r\n                        alert(result.errMessage);\r\n                    } else {\r\n                        alert(\r\n                            \"スマホ用サブ画像のアップロードに成功しました！\\n\\nS.B Dinerのサイトを開きます。画像が変更されていない場合は、ブラウザのリロードを行ってみてください。\\nなお、こちらはスマホ用のサブ画像なので、スマホでしか表示されません。\"\r\n                        );\r\n                        window.open(\"https://www.sb-diner.com/\");\r\n\r\n                        // @ts-ignore\r\n                        window.location.reload(true);\r\n                    }\r\n                } else {\r\n                    alert(\"Failed to upload... Status:\" + response.status);\r\n                }\r\n                this.setState({ isUploading: false });\r\n            })\r\n            .catch(() => {\r\n                alert(\"Failed to upload...\");\r\n                this.setState({ isUploading: false });\r\n            });\r\n    };\r\n\r\n    uploadMultipleFiles = async (\r\n        imgType: \"top1\" | \"burger_menu\" | \"drink_menu\",\r\n        urlToOpen?: string\r\n    ) => {\r\n        this.setState({ isUploading: true });\r\n\r\n        if (\r\n            !window.confirm(\r\n                \"新しいトップ画像をアップロードすると、古いファイルは削除されます。よろしいですか？\"\r\n            )\r\n        ) {\r\n            this.setState({ isUploading: false });\r\n            return;\r\n        }\r\n\r\n        const img = this.state[imgType];\r\n        if (!img) {\r\n            return;\r\n        }\r\n        const files = [...img]\r\n            .sort((a, b) => a.order - b.order)\r\n            .map(m => m.file);\r\n\r\n        for (let file of files) {\r\n            if (!file || file.name.split(\".\").pop()?.toLowerCase() !== \"png\") {\r\n                alert(\"png形式でお願いします！\");\r\n                this.setState({ isUploading: false });\r\n                return;\r\n            }\r\n        }\r\n\r\n        //古いTop1画像をストレージから削除\r\n        const formData = new FormData();\r\n        formData.append(\"shop\", \"sb-diner\");\r\n        formData.append(\"pw\", this.state.pw || \"\");\r\n        formData.append(\"type\", imgType);\r\n        const error = await this.sendPost(\r\n            formData,\r\n            \"/api/ShopImg/DeleteOldMenu\"\r\n        );\r\n        if (error) {\r\n            alert(error);\r\n            this.setState({ isUploading: false });\r\n            return;\r\n        }\r\n\r\n        for (let i in files) {\r\n            //１ファイルずつアップロード\r\n            const formData = new FormData();\r\n            formData.append(\"file\", files[i]);\r\n            formData.append(\"shop\", \"sb-diner\");\r\n            formData.append(\r\n                \"fileName\",\r\n                `${imgType}/sb-diner-${imgType}-${(\r\n                    \"00\" +\r\n                    (Number(i) + 1)\r\n                ).slice(-2)}`\r\n            );\r\n            formData.append(\"pw\", this.state.pw || \"\");\r\n\r\n            const error = await this.sendPost(formData, \"/api/ShopImg/Upload\");\r\n            if (error) {\r\n                alert(error);\r\n                this.setState({ isUploading: false });\r\n                return;\r\n            }\r\n        }\r\n\r\n        this.setState({ isUploading: false });\r\n        alert(\r\n            \"トップ画像のアップロードに成功しました！\\n\\nS.B Dinerのサイトを開きます。画像が変更されていない場合は、ブラウザのリロードを行ってみてください。\"\r\n        );\r\n        window.open(urlToOpen || \"https://www.sb-diner.com/\");\r\n    };\r\n\r\n    sendPost = async (formData: FormData, url: string): Promise<string> => {\r\n        try {\r\n            const response = await fetch(url, {\r\n                method: \"POST\",\r\n                body: formData,\r\n            });\r\n            const result = await response.json();\r\n            if (result) {\r\n                if (result.errMessage) {\r\n                    return result.errMessage;\r\n                } else {\r\n                    //成功\r\n                    return \"\";\r\n                }\r\n            } else {\r\n                return \"アップロード失敗... ステータス:\" + response.status;\r\n            }\r\n        } catch (e) {\r\n            console.log(e);\r\n            return \"アップロードに失敗しました\";\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const { top1, burger_menu, drink_menu, isUploading } = this.state;\r\n\r\n        const createObjectURL: (file: File) => string =\r\n            (window.URL || window.webkitURL).createObjectURL ||\r\n            (\r\n                window as typeof window & {\r\n                    createObjectURL: (file: File) => string;\r\n                }\r\n            ).createObjectURL;\r\n\r\n        return (\r\n            <div>\r\n                <Head title={\"S.B. Diner - 画像アップロード\"} noindex />\r\n                <div\r\n                    style={{\r\n                        width: \"100%\",\r\n                        height: \"100%\",\r\n                        backgroundColor: \"#1b181b\",\r\n                        position: \"fixed\",\r\n                        top: 0,\r\n                        right: 0,\r\n                        zIndex: -1,\r\n                    }}\r\n                ></div>\r\n                <div style={{ maxWidth: 1000, color: \"white\" }}>\r\n                    <h1\r\n                        style={{\r\n                            margin: \"30px 0\",\r\n                            lineHeight: \"30px\",\r\n                            color: \"#eb6905\",\r\n                            fontWeight: \"bold\",\r\n                        }}\r\n                    >\r\n                        S.B. Diner 画像 Uploader\r\n                    </h1>\r\n                    <br />\r\n                    航介から連絡されたパスワード入力欄：\r\n                    <br />\r\n                    <input\r\n                        type=\"text\"\r\n                        onChange={this.handleChangePW}\r\n                        value={this.state.pw}\r\n                        style={{ color: \"black\" }}\r\n                    />\r\n                    <br />\r\n                    （パスワード紛失したら連絡下さい）\r\n                    <br />\r\n                    <br />\r\n                    <MultipleImagesField\r\n                        h2Title=\"トップ画像\"\r\n                        imgType={\"top1\"}\r\n                        files={top1 || []}\r\n                        createObjectURL={createObjectURL}\r\n                        isUploading={isUploading}\r\n                        setState={(state: State) => {\r\n                            this.setState(state);\r\n                        }}\r\n                        uploadMultipleFiles={() =>\r\n                            this.uploadMultipleFiles(\"top1\")\r\n                        }\r\n                        handleChangeFile={e =>\r\n                            this.handleChangeFile(e, \"top1\", true)\r\n                        }\r\n                        explanation={\r\n                            <>\r\n                                PC、スマホ共にトップに表示される画像です。\r\n                                <br />\r\n                                複数の画像を設定頂くと、一定時間で緩やかに画像が切り替わります。\r\n                                <br />\r\n                                以下のボタンから、掲載したい全ての画像を、一度に選択してください。（一度に複数のファイルを選択可能です。）\r\n                            </>\r\n                        }\r\n                    />\r\n                    <div\r\n                        style={{\r\n                            padding: \"10px\",\r\n                            marginBottom: \"10px\",\r\n                            border: \"5px double #333333\",\r\n                            color: \"#eb6905\",\r\n                        }}\r\n                    >\r\n                        <h2>スマホ用サブ画像</h2>\r\n                        <br />\r\n                        スマホでサイトを開いた時に、トップ画像の下部に表示されるサブの画像です。\r\n                        <br />\r\n                        <br />\r\n                        現在の画像:\r\n                        <br />\r\n                        <img\r\n                            src={`${BLOB_URL}/sb-diner/top2.png`}\r\n                            style={{ width: \"100%\" }}\r\n                            alt=\"s.b. diner top2\"\r\n                        />\r\n                        <br />\r\n                        <br />\r\n                        png形式のファイルのみアップロード可能です。\r\n                        <br />\r\n                        jpgなどから変換する必要がある場合は、「\r\n                        <ATargetBlank href=\"https://jpg2png.com/ja/\">\r\n                            JPG to PNG\r\n                        </ATargetBlank>\r\n                        」のようなサイトを利用すると便利だと思います。\r\n                        <br />\r\n                        <br />\r\n                        <input\r\n                            type=\"file\"\r\n                            name=\"top2\"\r\n                            onChange={e => this.handleChangeFile(e, \"top2\")}\r\n                        />\r\n                        <br />\r\n                        <br />\r\n                        {this.state.top2 && (\r\n                            <button\r\n                                style={{\r\n                                    marginTop: 10,\r\n                                    marginBottom: 10,\r\n                                    fontWeight: \"bold\",\r\n                                    cursor: isUploading\r\n                                        ? \"not-allowed\"\r\n                                        : undefined,\r\n                                }}\r\n                                className=\"btn btn-primary btn-lg\"\r\n                                onClick={() => this.uploadFile(\"top2\")}\r\n                                disabled={isUploading}\r\n                            >\r\n                                {isUploading\r\n                                    ? \"アップロード中…\"\r\n                                    : \"アップロード実行\"}\r\n                            </button>\r\n                        )}\r\n                    </div>\r\n                    <MultipleImagesField\r\n                        h2Title=\"ハンバーガーメニュー\"\r\n                        imgType={\"burger_menu\"}\r\n                        files={burger_menu || []}\r\n                        createObjectURL={createObjectURL}\r\n                        isUploading={isUploading}\r\n                        setState={(state: State) => {\r\n                            this.setState(state);\r\n                        }}\r\n                        uploadMultipleFiles={() =>\r\n                            this.uploadMultipleFiles(\r\n                                \"burger_menu\",\r\n                                \"https://www.sb-diner.com/p/burger-menu.html\"\r\n                            )\r\n                        }\r\n                        handleChangeFile={e =>\r\n                            this.handleChangeFile(e, \"burger_menu\", true)\r\n                        }\r\n                        explanation={\r\n                            <>\r\n                                「BURGER MENU」ページに表示される画像です。\r\n                                <br />\r\n                                以下のボタンから、掲載したい全ての画像を、一度に選択してください。（一度に複数のファイルを選択可能です。）\r\n                            </>\r\n                        }\r\n                    />\r\n                    <MultipleImagesField\r\n                        h2Title=\"ドリンクメニュー\"\r\n                        imgType={\"drink_menu\"}\r\n                        files={drink_menu || []}\r\n                        createObjectURL={createObjectURL}\r\n                        isUploading={isUploading}\r\n                        setState={(state: State) => {\r\n                            this.setState(state);\r\n                        }}\r\n                        uploadMultipleFiles={() =>\r\n                            this.uploadMultipleFiles(\r\n                                \"drink_menu\",\r\n                                \"https://www.sb-diner.com/p/drink-menu.html\"\r\n                            )\r\n                        }\r\n                        handleChangeFile={e =>\r\n                            this.handleChangeFile(e, \"drink_menu\", true)\r\n                        }\r\n                        explanation={\r\n                            <>\r\n                                「DRINK MENU」ページに表示される画像です。\r\n                                <br />\r\n                                以下のボタンから、掲載したい全ての画像を、一度に選択してください。（一度に複数のファイルを選択可能です。）\r\n                            </>\r\n                        }\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction MultipleImagesField({\r\n    h2Title,\r\n    imgType,\r\n    files,\r\n    createObjectURL,\r\n    isUploading,\r\n    setState,\r\n    uploadMultipleFiles,\r\n    handleChangeFile,\r\n    explanation,\r\n}: {\r\n    h2Title: string;\r\n    imgType: ImgType;\r\n    files: { file: File; order: number }[];\r\n    createObjectURL: (file: File) => string;\r\n    isUploading?: boolean;\r\n    setState: (state: State) => void;\r\n    uploadMultipleFiles: () => void;\r\n    handleChangeFile: (ev: ChangeEvent<HTMLInputElement>) => void;\r\n    explanation: ReactNode;\r\n}) {\r\n    return (\r\n        <div\r\n            style={{\r\n                padding: \"10px\",\r\n                marginBottom: \"10px\",\r\n                border: \"5px double #333333\",\r\n                color: \"#eb6905\",\r\n            }}\r\n        >\r\n            <h2>{h2Title}</h2>\r\n            {files\r\n                .sort((a, b) => a.order - b.order)\r\n                .filter(m => m.file instanceof File)\r\n                .map((m, i) => (\r\n                    <div\r\n                        key={`${m.order}-${i}`}\r\n                        style={{\r\n                            width: \"30%\",\r\n                            margin: \"20px 5px 5px\",\r\n                            display: \"inline-block\",\r\n                        }}\r\n                    >\r\n                        <div\r\n                            style={{\r\n                                display: \"flex\",\r\n                                marginBottom: 2,\r\n                            }}\r\n                        >\r\n                            <span>表示順：</span>\r\n                            <input\r\n                                type=\"number\"\r\n                                style={{\r\n                                    width: \"50%\",\r\n                                    marginRight: \"auto\",\r\n                                    textAlign: \"right\",\r\n                                    color: \"black\",\r\n                                }}\r\n                                defaultValue={`${m.order + 1}`}\r\n                                onBlur={e => {\r\n                                    setState({\r\n                                        [imgType]: [\r\n                                            ...files.filter(\r\n                                                me => me.file !== m.file\r\n                                            ),\r\n                                            {\r\n                                                file: m.file,\r\n                                                order:\r\n                                                    Number(e.target.value) - 1,\r\n                                            },\r\n                                        ],\r\n                                    });\r\n                                }}\r\n                            />\r\n                        </div>\r\n                        <img\r\n                            alt={`img${i}`}\r\n                            style={{ width: \"100%\" }}\r\n                            src={createObjectURL(m.file)}\r\n                        />\r\n                    </div>\r\n                ))}\r\n            <br />\r\n            {files.length > 0 ? (\r\n                <span>\r\n                    上記の「表示順」の値が小さいファイルから順番にサイトに表示されます。\r\n                    <br />\r\n                    「表示順」の値を変更して、適切な順番に並び替えてください。\r\n                    <br />\r\n                    （「表示順」の数値は連続してなくてもOKっす）\r\n                    <br />\r\n                    <br />\r\n                    <button\r\n                        style={{ color: \"black\" }}\r\n                        onClick={() => setState({ [imgType]: [] })}\r\n                    >\r\n                        クリア（ファイルを選びなおす）\r\n                    </button>\r\n                    <br />\r\n                    <br />\r\n                    <button\r\n                        style={{\r\n                            marginTop: 10,\r\n                            marginBottom: 10,\r\n                            fontWeight: \"bold\",\r\n                            cursor: isUploading ? \"not-allowed\" : undefined,\r\n                        }}\r\n                        className=\"btn btn-primary btn-lg\"\r\n                        onClick={uploadMultipleFiles}\r\n                        disabled={isUploading}\r\n                    >\r\n                        {isUploading ? \"アップロード中…\" : \"アップロード実行\"}\r\n                    </button>\r\n                </span>\r\n            ) : (\r\n                <span>\r\n                    {explanation}\r\n                    <br />\r\n                    <br />\r\n                    現在の画像：\r\n                    <br />\r\n                    <MultipleImagesPreview imgType={imgType} />\r\n                    <br />\r\n                    png形式のファイルのみアップロード可能です。\r\n                    <br />\r\n                    jpgなどから変換する必要がある場合は、「\r\n                    <ATargetBlank href=\"https://jpg2png.com/ja/\">\r\n                        JPG to PNG\r\n                    </ATargetBlank>\r\n                    」のようなサイトを利用すると便利だと思います。\r\n                    <br />\r\n                    <br />\r\n                    <input\r\n                        type=\"file\"\r\n                        name={imgType}\r\n                        onChange={handleChangeFile}\r\n                        multiple\r\n                    />\r\n                </span>\r\n            )}\r\n            <br />\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction MultipleImagesPreview({ imgType }: { imgType: ImgType }) {\r\n    const [images, setImages] = useState<HTMLImageElement[]>([]);\r\n    useEffect(() => {\r\n        (async () => {\r\n            setImages(await getTopPreviewImages(imgType));\r\n        })();\r\n    }, [imgType]);\r\n\r\n    return (\r\n        <div>\r\n            {images.map(image => (\r\n                <img\r\n                    key={image.src}\r\n                    src={image.src}\r\n                    style={{\r\n                        width: \"100%\",\r\n                        maxWidth: 300,\r\n                        marginRight: 5,\r\n                        marginBottom: 5,\r\n                    }}\r\n                />\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nasync function getTopPreviewImages(\r\n    imgType: ImgType\r\n): Promise<HTMLImageElement[]> {\r\n    const images: HTMLImageElement[] = [];\r\n    let hasMoreImages = true;\r\n    let i = 0;\r\n    while (hasMoreImages) {\r\n        i++;\r\n        const imgId = (\"00\" + i).slice(-2);\r\n        const imgUrl = `https://lingualninja.blob.core.windows.net/lingual-storage/sb-diner/${imgType}/sb-diner-${imgType}-${imgId}.png`;\r\n\r\n        const newImage = new Image();\r\n\r\n        const image = await new Promise<HTMLImageElement | null>(\r\n            (resolve, reject) => {\r\n                try {\r\n                    newImage.onload = function () {\r\n                        const img = document.createElement(\"img\");\r\n                        img.src = imgUrl;\r\n\r\n                        resolve(img);\r\n                    };\r\n\r\n                    newImage.onerror = function () {\r\n                        hasMoreImages = false;\r\n\r\n                        resolve(null);\r\n                    };\r\n\r\n                    newImage.src = imgUrl;\r\n                } catch (e) {\r\n                    console.log(\"e\", e);\r\n                    reject(e);\r\n                }\r\n            }\r\n        );\r\n        if (image) {\r\n            images.push(image);\r\n        }\r\n    }\r\n    return images;\r\n}\r\n","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\Boscobel.tsx",["919"],"import * as React from \"react\";\r\nimport { BLOB_URL } from \"../../../common/consts\";\r\nimport Head from \"../../shared/Helmet\";\r\n\r\nexport default class Boscobel extends React.Component {\r\n    consts = {\r\n        background: \"background\",\r\n        top: \"top\",\r\n        menu: \"menu\",\r\n    };\r\n\r\n    state: {\r\n        background?: File;\r\n        top?: File;\r\n        menu: { file: File; order: number }[];\r\n        pw: string;\r\n        isUploading: boolean;\r\n    };\r\n\r\n    constructor(props: {}) {\r\n        super(props);\r\n\r\n        //セーブデータがあればそれを設定\r\n        const saveData = localStorage.getItem(\"boscobel-token\");\r\n        const objSaveData = saveData && JSON.parse(saveData);\r\n\r\n        let token;\r\n        if (objSaveData) {\r\n            token = objSaveData.token || \"\";\r\n        } else {\r\n            token = \"\";\r\n        }\r\n\r\n        this.state = {\r\n            background: undefined,\r\n            top: undefined,\r\n            menu: [],\r\n            pw: token,\r\n            isUploading: false,\r\n        };\r\n\r\n        // disable popup ad\r\n        localStorage.setItem(\"YouTubeAdClosed\", new Date().toISOString());\r\n    }\r\n\r\n    handleChangeFile = (\r\n        e: React.ChangeEvent<HTMLInputElement>,\r\n        imageType: string\r\n    ) => {\r\n        const target = e.target;\r\n        const file = target.files?.item(0);\r\n        if (imageType === this.consts.background) {\r\n            this.setState({ background: file });\r\n        } else if (imageType === this.consts.top) {\r\n            this.setState({ top: file });\r\n        } else if (imageType === this.consts.menu) {\r\n            if (!target.files) return;\r\n            this.setState({\r\n                menu: Array.from(target.files).map((file, order) => ({\r\n                    file,\r\n                    order,\r\n                })),\r\n            });\r\n        }\r\n    };\r\n\r\n    handleChangePW = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({ pw: e.target.value });\r\n        localStorage.setItem(\r\n            \"boscobel-token\",\r\n            JSON.stringify({ token: e.target.value })\r\n        );\r\n    };\r\n\r\n    uploadFile = (imageType: string) => {\r\n        this.setState({ isUploading: true });\r\n\r\n        let file = null;\r\n        if (imageType === this.consts.background) {\r\n            file = this.state.background;\r\n        } else if (imageType === this.consts.top) {\r\n            file = this.state.top;\r\n        }\r\n\r\n        if (!file || file.name.split(\".\").pop()?.toLowerCase() !== \"png\") {\r\n            alert(\"Error! Please select a png file.\");\r\n            this.setState({ isUploading: false });\r\n            return;\r\n        }\r\n\r\n        const formData = new FormData();\r\n        formData.append(\"file\", file);\r\n        formData.append(\"shop\", \"boscobel\");\r\n        formData.append(\"fileName\", imageType);\r\n        formData.append(\"pw\", this.state.pw);\r\n\r\n        fetch(\"/api/ShopImg/Upload\", { method: \"POST\", body: formData })\r\n            .then(async response => {\r\n                const result = await response.json();\r\n                if (result) {\r\n                    if (result.errMessage) {\r\n                        alert(result.errMessage);\r\n                    } else {\r\n                        alert(\"Success to upload!\");\r\n                        window.open(\"https://www.cafe-boscobel.com/\");\r\n                        // @ts-ignore\r\n                        window.location.reload(true);\r\n                    }\r\n                } else {\r\n                    alert(\"Failed to upload... Status:\" + response.status);\r\n                }\r\n                this.setState({ isUploading: false });\r\n            })\r\n            .catch(() => {\r\n                alert(\"Failed to upload...\");\r\n                this.setState({ isUploading: false });\r\n            });\r\n    };\r\n\r\n    uploadMenuFiles = async () => {\r\n        this.setState({ isUploading: true });\r\n\r\n        if (\r\n            !window.confirm(\r\n                \"新しいメニューをアップロードすると、古いメニューのファイルは削除されます。よろしいですか？\"\r\n            )\r\n        ) {\r\n            this.setState({ isUploading: false });\r\n            return;\r\n        }\r\n\r\n        const { menu } = this.state;\r\n        const files = [...menu]\r\n            .sort((a, b) => a.order - b.order)\r\n            .map(m => m.file);\r\n\r\n        for (let file of files) {\r\n            if (!file || file.name.split(\".\").pop()?.toLowerCase() !== \"png\") {\r\n                alert(\"png形式でお願いします！\");\r\n                this.setState({ isUploading: false });\r\n                return;\r\n            }\r\n        }\r\n\r\n        //古いメニューをストレージから削除\r\n        const formData = new FormData();\r\n        formData.append(\"shop\", \"boscobel\");\r\n        formData.append(\"pw\", this.state.pw);\r\n        const error = await this.sendPost(\r\n            formData,\r\n            \"/api/ShopImg/DeleteOldMenu\"\r\n        );\r\n        if (error) {\r\n            alert(error);\r\n            this.setState({ isUploading: false });\r\n            return;\r\n        }\r\n\r\n        for (let i in files) {\r\n            //１ファイルずつアップロード\r\n            const formData = new FormData();\r\n            formData.append(\"file\", files[i]);\r\n            formData.append(\"shop\", \"boscobel\");\r\n            formData.append(\r\n                \"fileName\",\r\n                `menu/cafe-boscobel-menu-${(\"00\" + (Number(i) + 1)).slice(-2)}`\r\n            );\r\n            formData.append(\"pw\", this.state.pw);\r\n\r\n            const error = await this.sendPost(formData, \"/api/ShopImg/Upload\");\r\n            if (error) {\r\n                alert(error);\r\n                this.setState({ isUploading: false });\r\n                return;\r\n            }\r\n        }\r\n\r\n        this.setState({ isUploading: false });\r\n        alert(\"メニューのアップロードに成功しました！\");\r\n    };\r\n\r\n    sendPost = async (formData: FormData, url: string): Promise<string> => {\r\n        try {\r\n            const response = await fetch(url, {\r\n                method: \"POST\",\r\n                body: formData,\r\n            });\r\n            const result = await response.json();\r\n            if (result) {\r\n                if (result.errMessage) {\r\n                    return result.errMessage;\r\n                } else {\r\n                    //成功\r\n                    return \"\";\r\n                }\r\n            } else {\r\n                return \"Failed to upload... Status:\" + response.status;\r\n            }\r\n        } catch (e) {\r\n            return \"Failed to upload...\";\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const { menu, isUploading } = this.state;\r\n\r\n        const createObjectURL: (file: File) => string =\r\n            (window.URL || window.webkitURL).createObjectURL ||\r\n            (\r\n                window as typeof window & {\r\n                    createObjectURL: (file: File) => string;\r\n                }\r\n            ).createObjectURL;\r\n\r\n        return (\r\n            <div className=\"center\">\r\n                <Head title={\"Boscobel - Upload Image\"} noindex={true} />\r\n                <div\r\n                    style={{\r\n                        width: \"100%\",\r\n                        height: \"100%\",\r\n                        backgroundColor: \"#1b181b\",\r\n                        position: \"fixed\",\r\n                        top: 0,\r\n                        right: 0,\r\n                        zIndex: -1,\r\n                    }}\r\n                ></div>\r\n                <div style={{ maxWidth: 1000, color: \"white\" }}>\r\n                    <h1\r\n                        style={{\r\n                            margin: \"30px\",\r\n                            lineHeight: \"30px\",\r\n                            color: \"#eb6905\",\r\n                        }}\r\n                    >\r\n                        <b>Boscobel - Upload Image</b>\r\n                    </h1>\r\n                    <br />\r\n                    パスワード（30cmを超える金魚の名前は？）\r\n                    <input\r\n                        type=\"text\"\r\n                        onChange={this.handleChangePW}\r\n                        value={this.state.pw}\r\n                        style={{ color: \"black\" }}\r\n                    />\r\n                    <br />\r\n                    <br />\r\n                    <div\r\n                        style={{\r\n                            padding: \"10px\",\r\n                            marginBottom: \"10px\",\r\n                            border: \"5px double #333333\",\r\n                            color: \"#eb6905\",\r\n                        }}\r\n                    >\r\n                        <h2>Background Image</h2>\r\n                        <br />\r\n                        Current image:\r\n                        <br />\r\n                        <img\r\n                            src={`${BLOB_URL}/boscobel/background.png`}\r\n                            style={{ width: \"100%\" }}\r\n                            alt=\"boscobel background\"\r\n                        />\r\n                        <br />\r\n                        <br />\r\n                        png形式のファイルのみアップロード可能です。\r\n                        <br />\r\n                        <br />\r\n                        <input\r\n                            type=\"file\"\r\n                            name=\"background\"\r\n                            onChange={e =>\r\n                                this.handleChangeFile(e, this.consts.background)\r\n                            }\r\n                        />\r\n                        <br />\r\n                        <br />\r\n                        <button\r\n                            style={{\r\n                                marginTop: 10,\r\n                                marginBottom: 10,\r\n                                height: 28,\r\n                                paddingTop: 0,\r\n                            }}\r\n                            className=\"btn btn-primary btn-xs\"\r\n                            onClick={() =>\r\n                                this.uploadFile(this.consts.background)\r\n                            }\r\n                            disabled={isUploading}\r\n                        >\r\n                            {isUploading ? (\r\n                                <b>アップロード中…</b>\r\n                            ) : (\r\n                                <b>Upload</b>\r\n                            )}\r\n                        </button>\r\n                    </div>\r\n                    <br />\r\n                    <div\r\n                        style={{\r\n                            padding: \"10px\",\r\n                            marginBottom: \"10px\",\r\n                            border: \"5px double #333333\",\r\n                            color: \"#eb6905\",\r\n                        }}\r\n                    >\r\n                        <h2>Top Image</h2>\r\n                        <br />\r\n                        Current image:\r\n                        <br />\r\n                        <img\r\n                            src={`${BLOB_URL}/boscobel/top.png`}\r\n                            style={{ width: \"100%\" }}\r\n                            alt=\"boscobel top\"\r\n                        />\r\n                        <br />\r\n                        <br />\r\n                        png形式のファイルのみアップロード可能です。\r\n                        <br />\r\n                        <br />\r\n                        <input\r\n                            type=\"file\"\r\n                            name=\"top\"\r\n                            onChange={e =>\r\n                                this.handleChangeFile(e, this.consts.top)\r\n                            }\r\n                        />\r\n                        <br />\r\n                        <br />\r\n                        <button\r\n                            style={{\r\n                                marginTop: 10,\r\n                                marginBottom: 10,\r\n                                height: 28,\r\n                                paddingTop: 0,\r\n                            }}\r\n                            className=\"btn btn-primary btn-xs\"\r\n                            onClick={() => this.uploadFile(this.consts.top)}\r\n                            disabled={isUploading}\r\n                        >\r\n                            {isUploading ? (\r\n                                <b>アップロード中…</b>\r\n                            ) : (\r\n                                <b>Upload</b>\r\n                            )}\r\n                        </button>\r\n                    </div>\r\n                    <br />\r\n                    <div\r\n                        style={{\r\n                            padding: \"10px\",\r\n                            marginBottom: \"10px\",\r\n                            border: \"5px double #333333\",\r\n                            color: \"#eb6905\",\r\n                        }}\r\n                    >\r\n                        <h2>Menu</h2>\r\n                        {menu\r\n                            .sort((a, b) => a.order - b.order)\r\n                            .filter(m => m.file instanceof File)\r\n                            .map((m, i) => (\r\n                                <div\r\n                                    key={`${m.order}-${i}`}\r\n                                    style={{\r\n                                        width: \"30%\",\r\n                                        margin: \"20px 5px 5px\",\r\n                                        display: \"inline-block\",\r\n                                    }}\r\n                                >\r\n                                    <div\r\n                                        style={{\r\n                                            display: \"flex\",\r\n                                            marginBottom: 2,\r\n                                        }}\r\n                                    >\r\n                                        <span>表示順：</span>\r\n                                        <input\r\n                                            type=\"number\"\r\n                                            style={{\r\n                                                width: \"50%\",\r\n                                                marginRight: \"auto\",\r\n                                                textAlign: \"right\",\r\n                                                color: \"black\",\r\n                                            }}\r\n                                            defaultValue={`${m.order + 1}`}\r\n                                            onBlur={e => {\r\n                                                this.setState({\r\n                                                    menu: [\r\n                                                        ...menu.filter(\r\n                                                            me =>\r\n                                                                me.file !==\r\n                                                                m.file\r\n                                                        ),\r\n                                                        {\r\n                                                            file: m.file,\r\n                                                            order:\r\n                                                                Number(\r\n                                                                    e.target\r\n                                                                        .value\r\n                                                                ) - 1,\r\n                                                        },\r\n                                                    ],\r\n                                                });\r\n                                            }}\r\n                                        />\r\n                                    </div>\r\n                                    <img\r\n                                        alt={`boscobel${i}`}\r\n                                        style={{ width: \"100%\" }}\r\n                                        src={createObjectURL(m.file)}\r\n                                    />\r\n                                </div>\r\n                            ))}\r\n                        <br />\r\n                        {menu.length > 0 ? (\r\n                            <span>\r\n                                上記の「表示順」の値が小さいファイルから順番にサイトに表示されます。\r\n                                <br />\r\n                                「表示順」の値は変更可能です。\r\n                                <br />\r\n                                （「表示順」の数値は連続してなくてもOKっす）\r\n                                <br />\r\n                                <br />\r\n                                <button\r\n                                    style={{ color: \"black\" }}\r\n                                    onClick={() => this.setState({ menu: [] })}\r\n                                >\r\n                                    クリア（ファイルを選びなおす）\r\n                                </button>\r\n                                <br />\r\n                                <br />\r\n                                <button\r\n                                    style={{\r\n                                        marginTop: 10,\r\n                                        marginBottom: 10,\r\n                                        height: 28,\r\n                                        paddingTop: 0,\r\n                                    }}\r\n                                    className=\"btn btn-primary btn-xs\"\r\n                                    onClick={() => this.uploadMenuFiles()}\r\n                                    disabled={isUploading}\r\n                                >\r\n                                    {isUploading ? (\r\n                                        <b>アップロード中…</b>\r\n                                    ) : (\r\n                                        <b>Upload</b>\r\n                                    )}\r\n                                </button>\r\n                            </span>\r\n                        ) : (\r\n                            <span>\r\n                                以下のボタンから、メニューとしてサイトに掲載したい全ての画像を、一度に選択してください。\r\n                                <br />\r\n                                （一度に複数のファイルを選択可能です。）\r\n                                <br />\r\n                                png形式のファイルのみアップロード可能です。\r\n                                <br />\r\n                                <br />\r\n                                <input\r\n                                    type=\"file\"\r\n                                    name=\"menu\"\r\n                                    onChange={e =>\r\n                                        this.handleChangeFile(\r\n                                            e,\r\n                                            this.consts.menu\r\n                                        )\r\n                                    }\r\n                                    multiple\r\n                                />\r\n                            </span>\r\n                        )}\r\n                        <br />\r\n                    </div>\r\n                    <br />\r\n                    <br />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\ColorPalette.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\Vocab\\VocabQuizTop.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\Vocab\\VocabQuiz.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\Vocab\\VocabKanjiQuizTop.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\Vocab\\VocabKanjiQuiz.tsx",["920"],"import Paper from \"@material-ui/core/Paper\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport React, { useMemo, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link, RouteComponentProps } from \"react-router-dom\";\r\nimport Button from \"reactstrap/lib/Button\";\r\nimport Card from \"reactstrap/lib/Card\";\r\nimport CardTitle from \"reactstrap/lib/CardTitle\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport * as consts from \"../../../../common/consts\";\r\nimport { sendClientOpeLog, shuffle } from \"../../../../common/functions\";\r\nimport { ApplicationState } from \"../../../../store/configureStore\";\r\nimport * as vocabStore from \"../../../../store/VocabQuizStore\";\r\nimport { sound, vocab, vocabGenre } from \"../../../../types/vocab\";\r\nimport { SeasonAnimation } from \"../../../shared/Animations/SeasonAnimation\";\r\nimport ShurikenProgress from \"../../../shared/Animations/ShurikenProgress\";\r\nimport { AuthorArea } from \"../../../shared/Author\";\r\nimport CharacterComment from \"../../../shared/CharacterComment\";\r\nimport FB from \"../../../shared/FaceBook\";\r\nimport { FolktaleMenu } from \"../../../shared/FolktaleMenu\";\r\nimport Head from \"../../../shared/Helmet\";\r\nimport \"../../../shared/PleaseScrollDown.css\";\r\nimport { FBShareBtn, TwitterShareBtn } from \"../../../shared/SnsShareButton\";\r\nimport AllKanjiList from \"../parts/VocabQuiz/AllKanjiList\";\r\nimport AllVocabList from \"../parts/VocabQuiz/AllVocabList\";\r\n\r\ntype Props = vocabStore.IVocabQuizState &\r\n    vocabStore.ActionCreators &\r\n    RouteComponentProps<{ genreName: string }>;\r\ntype State = {\r\n    genreName: string;\r\n    screenWidth: number;\r\n    pleaseScrollDown: boolean;\r\n    imgNumber: number;\r\n};\r\n\r\nclass VocabQuiz extends React.Component<Props, State> {\r\n    correctSounds = [new Audio(), new Audio()];\r\n    ref: React.RefObject<HTMLHeadingElement>;\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        const { params } = props.match;\r\n        const genreName = params.genreName.toString().split(\"#\")[0];\r\n\r\n        this.state = {\r\n            genreName,\r\n            screenWidth: window.innerWidth,\r\n            pleaseScrollDown: false,\r\n            imgNumber: this.getImgNumber(genreName?.length),\r\n        };\r\n\r\n        let timer: number;\r\n        window.onresize = () => {\r\n            if (timer > 0) {\r\n                clearTimeout(timer);\r\n            }\r\n\r\n            timer = window.setTimeout(() => {\r\n                this.changeScreenSize();\r\n            }, 100);\r\n        };\r\n\r\n        this.ref = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { loadVocabs, loadAllGenres, loadAllVocabs } = this.props;\r\n        const { genreName } = this.state;\r\n        loadVocabs(genreName);\r\n        loadAllGenres();\r\n        setTimeout(loadAllVocabs, 15000);\r\n\r\n        for (let i = 0; i < 5; i++) {\r\n            setTimeout(() => {\r\n                this.changeScreenSize();\r\n            }, i * 1000);\r\n        }\r\n        this.correctSounds[0].src =\r\n            consts.BLOB_URL + \"/appsPublic/sound/correctSound.mp3\";\r\n        this.correctSounds[1].src =\r\n            consts.BLOB_URL + \"/appsPublic/sound/incorrectSound.mp3\";\r\n        this.correctSounds.forEach(s => s.load);\r\n    }\r\n\r\n    componentDidUpdate(previousProps: Props) {\r\n        if (previousProps.location !== this.props.location) {\r\n            const genreName =\r\n                this.props.location.pathname\r\n                    .split(\"/\")\r\n                    .filter(a => a)\r\n                    .pop()\r\n                    ?.split(\"#\")\r\n                    .pop() || \"\";\r\n            this.setState({\r\n                genreName,\r\n                imgNumber: this.getImgNumber(genreName?.length),\r\n            });\r\n            this.props.loadVocabs(genreName);\r\n            this.props.loadAllGenres();\r\n        }\r\n    }\r\n\r\n    changeScreenSize = () => {\r\n        if (this.state.screenWidth !== window.innerWidth) {\r\n            this.setState({\r\n                screenWidth: window.innerWidth,\r\n            });\r\n        }\r\n    };\r\n\r\n    getImgNumber = (num: number = 0) => {\r\n        const today = new Date();\r\n        const todayNumber = today.getMonth() + today.getDate() + num;\r\n        const mod = todayNumber % 27;\r\n        if (mod > 13) return 3;\r\n        if (mod > 5) return 1;\r\n        return 2;\r\n    };\r\n\r\n    render() {\r\n        const {\r\n            vocabGenre,\r\n            currentPage,\r\n            changePage,\r\n            allGenres,\r\n            vocabList,\r\n            vocabSounds,\r\n        } = this.props;\r\n        const { screenWidth, imgNumber } = this.state;\r\n\r\n        const genreName: string =\r\n            (vocabGenre && vocabGenre.genreName) || this.state.genreName || \"\";\r\n        const titleToShowUpper: string = genreName\r\n            .split(\"_\")\r\n            .map(t => t && t[0].toUpperCase() + t.substr(1))\r\n            .join(\" \");\r\n        const titleToShowLower: string = genreName.split(\"_\").join(\" \");\r\n\r\n        let pageData: JSX.Element;\r\n        switch (currentPage) {\r\n            case 2:\r\n                pageData = (\r\n                    <Page2\r\n                        vocabList={vocabList}\r\n                        changePage={changePage}\r\n                        screenWidth={screenWidth}\r\n                        imgNumber={imgNumber}\r\n                        correctSounds={this.correctSounds}\r\n                        vocabSounds={vocabSounds?.map(a => a.audio)}\r\n                    />\r\n                );\r\n                break;\r\n            case 3:\r\n                pageData = (\r\n                    <Page3\r\n                        vocabList={vocabList}\r\n                        changePage={changePage}\r\n                        screenWidth={screenWidth}\r\n                        imgNumber={imgNumber}\r\n                        vocabSounds={vocabSounds?.map(a => a.audio)}\r\n                        vocabGenre={vocabGenre}\r\n                        titleToShowUpper={titleToShowUpper}\r\n                    />\r\n                );\r\n                break;\r\n            default:\r\n                pageData = (\r\n                    <Page1\r\n                        vocabList={vocabList}\r\n                        screenWidth={screenWidth}\r\n                        imgNumber={imgNumber}\r\n                        changePage={changePage}\r\n                        vocabSounds={vocabSounds}\r\n                        criteriaRef={this.ref}\r\n                    />\r\n                );\r\n        }\r\n\r\n        return (\r\n            <div className=\"center\">\r\n                <Head\r\n                    title={\"Japanese Kanji Quiz - \" + titleToShowUpper}\r\n                    desc={\r\n                        \"Free web app to remember Kanji for \" +\r\n                        titleToShowLower +\r\n                        \"! Try to get a perfect score on all the quizzes!\"\r\n                    }\r\n                    noindex\r\n                />\r\n                <div style={{ maxWidth: 700 }}>\r\n                    <div\r\n                        className=\"breadcrumbs\"\r\n                        itemScope\r\n                        itemType=\"https://schema.org/BreadcrumbList\"\r\n                        style={{ textAlign: \"left\" }}\r\n                    >\r\n                        <span\r\n                            itemProp=\"itemListElement\"\r\n                            itemScope\r\n                            itemType=\"http://schema.org/ListItem\"\r\n                        >\r\n                            <Link\r\n                                to=\"/\"\r\n                                itemProp=\"item\"\r\n                                style={{\r\n                                    marginRight: \"5px\",\r\n                                    marginLeft: \"5px\",\r\n                                }}\r\n                            >\r\n                                <span itemProp=\"name\">{\"Home\"}</span>\r\n                            </Link>\r\n                            <meta itemProp=\"position\" content=\"1\" />\r\n                        </span>\r\n                        {\" > \"}\r\n                        <span\r\n                            itemProp=\"itemListElement\"\r\n                            itemScope\r\n                            itemType=\"http://schema.org/ListItem\"\r\n                        >\r\n                            <Link\r\n                                to=\"/kanji-quiz\"\r\n                                itemProp=\"item\"\r\n                                style={{\r\n                                    marginRight: \"5px\",\r\n                                    marginLeft: \"5px\",\r\n                                }}\r\n                            >\r\n                                <span itemProp=\"name\">{\"Kanji Quiz\"}</span>\r\n                                <meta itemProp=\"position\" content=\"2\" />\r\n                            </Link>\r\n                        </span>\r\n                        {\" > \"}\r\n                        <span\r\n                            itemProp=\"itemListElement\"\r\n                            itemScope\r\n                            itemType=\"http://schema.org/ListItem\"\r\n                        >\r\n                            <span\r\n                                itemProp=\"name\"\r\n                                style={{\r\n                                    marginRight: \"5px\",\r\n                                    marginLeft: \"5px\",\r\n                                }}\r\n                            >\r\n                                {titleToShowUpper}\r\n                            </span>\r\n                            <meta itemProp=\"position\" content=\"3\" />\r\n                        </span>\r\n                    </div>\r\n                    <h1\r\n                        id=\"h1title\"\r\n                        style={{\r\n                            margin: \"25px\",\r\n                            lineHeight: screenWidth > 500 ? \"45px\" : \"40px\",\r\n                        }}\r\n                        className=\"whiteShadow\"\r\n                    >\r\n                        <b>{\"Japanese Kanji Quiz - \" + titleToShowUpper}</b>\r\n                    </h1>\r\n                    <br />\r\n                    {vocabList && vocabList.length > 0 ? (\r\n                        pageData\r\n                    ) : (\r\n                        <ShurikenProgress key=\"circle\" size=\"20%\" />\r\n                    )}\r\n                    <hr />\r\n                    <h2 style={{ fontWeight: \"bold\", margin: 20 }}>\r\n                        Other Kanji Genres\r\n                    </h2>\r\n                    <AllKanjiList\r\n                        allGenres={allGenres}\r\n                        excludeGenreId={vocabGenre && vocabGenre.genreId}\r\n                    />\r\n                    <hr />\r\n                    <AuthorArea\r\n                        title=\"Developer\"\r\n                        screenWidth={Math.min(screenWidth, 600)}\r\n                    />\r\n                    <hr />\r\n                    <h2 style={{ fontWeight: \"bold\", margin: 20 }}>\r\n                        Vocabulary Quiz\r\n                    </h2>\r\n                    <AllVocabList allGenres={allGenres} />\r\n                    <br />\r\n                    <CharacterComment\r\n                        screenWidth={screenWidth}\r\n                        imgNumber={imgNumber}\r\n                        comment=\"Try to get a perfect score on all the quizzes!\"\r\n                    />\r\n                    <hr />\r\n                    <Link to=\"/vocabulary-list\">\r\n                        <button className=\"btn btn-primary btn-lg btn-block\">\r\n                            {\"Check All Vocabulary Lists\"}\r\n                        </button>\r\n                    </Link>\r\n                    <hr />\r\n                    <FolktaleMenu screenWidth={screenWidth} />\r\n                    <br />\r\n                    <FB />\r\n                    <SeasonAnimation\r\n                        frequencySec={2}\r\n                        screenWidth={screenWidth}\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst tableHeadStyle: React.CSSProperties = {\r\n    fontSize: \"medium\",\r\n    fontWeight: \"bold\",\r\n};\r\nconst tableElementStyle: React.CSSProperties = {\r\n    fontSize: \"medium\",\r\n};\r\n\r\ntype TPage1Props = {\r\n    vocabList: vocab[];\r\n    screenWidth: number;\r\n    imgNumber: number;\r\n    changePage: (nextPage: vocabStore.TPageNumber) => void;\r\n    vocabSounds: sound[];\r\n    criteriaRef: React.RefObject<HTMLHeadingElement>;\r\n};\r\nfunction Page1({\r\n    vocabList,\r\n    screenWidth,\r\n    imgNumber,\r\n    changePage,\r\n    vocabSounds,\r\n    criteriaRef,\r\n}: TPage1Props) {\r\n    const { genreId } = vocabList[0];\r\n\r\n    const { incorrectIds, percentage } = useMemo(() => {\r\n        const savedItem = localStorage.getItem(\r\n            `kanji-quiz-incorrectIds-${vocabList[0].genreId}`\r\n        );\r\n        const incorrectIds: number[] =\r\n            (savedItem && JSON.parse(savedItem)) || [];\r\n\r\n        const percentage = Number(\r\n            localStorage.getItem(`kanji-quiz-percentage-${genreId}`)\r\n        );\r\n        return { incorrectIds, percentage };\r\n    }, [genreId]);\r\n\r\n    return (\r\n        <>\r\n            <CharacterComment\r\n                screenWidth={screenWidth}\r\n                imgNumber={imgNumber}\r\n                comment=\"Before starting the Kanji quiz, please remember the Kanji list below!\"\r\n                commentStyle={{ textAlign: \"left\", padding: \"15px 20px\" }}\r\n            />\r\n\r\n            <div\r\n                style={{\r\n                    fontSize: \"xx-large\",\r\n                    margin: screenWidth > 600 ? \"20px 0 35px\" : \"30px 0 20px\",\r\n                }}\r\n            >\r\n                {\"Your score:\"}\r\n                <wbr />\r\n                <span\r\n                    style={{\r\n                        fontWeight: \"bold\",\r\n                        paddingLeft: 7,\r\n                        color: percentage === 100 ? \"green\" : undefined,\r\n                    }}\r\n                >\r\n                    {percentage}%\r\n                </span>\r\n            </div>\r\n\r\n            <div\r\n                style={{\r\n                    textAlign: \"right\",\r\n                }}\r\n            >\r\n                <button\r\n                    onClick={() => {\r\n                        changePage(2);\r\n                        setTimeout(() => {\r\n                            sendClientOpeLog(\"start quiz\");\r\n                        }, 1000);\r\n                    }}\r\n                    className=\"btn btn-primary\"\r\n                    style={{ marginBottom: 25, marginTop: 20 }}\r\n                >\r\n                    {\"Start the Kanji quiz anyway >>\"}\r\n                </button>\r\n            </div>\r\n            <TableContainer component={Paper} ref={criteriaRef}>\r\n                <Table aria-label=\"simple table\">\r\n                    <TableHead>\r\n                        <TableRow style={{ backgroundColor: \"papayawhip\" }}>\r\n                            <TableCell style={tableHeadStyle} align=\"center\">\r\n                                Kanji\r\n                            </TableCell>\r\n                            <TableCell style={tableHeadStyle} align=\"center\">\r\n                                Hiragana\r\n                            </TableCell>\r\n                            <TableCell style={tableHeadStyle} align=\"center\">\r\n                                Meaning\r\n                            </TableCell>\r\n                            <TableCell style={tableHeadStyle} align=\"center\">\r\n                                Sound\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {vocabList.map((v: vocab) => (\r\n                            <TableRow key={v.vocabId}>\r\n                                <TableCell\r\n                                    style={\r\n                                        incorrectIds.includes(v.vocabId)\r\n                                            ? {\r\n                                                  ...tableElementStyle,\r\n                                                  color: \"red\",\r\n                                                  fontWeight: \"bold\",\r\n                                              }\r\n                                            : tableElementStyle\r\n                                    }\r\n                                    align=\"center\"\r\n                                >\r\n                                    {v.kanji}\r\n                                </TableCell>\r\n                                <TableCell\r\n                                    style={\r\n                                        incorrectIds.includes(v.vocabId)\r\n                                            ? {\r\n                                                  ...tableElementStyle,\r\n                                                  color: \"red\",\r\n                                                  fontWeight: \"bold\",\r\n                                              }\r\n                                            : tableElementStyle\r\n                                    }\r\n                                    align=\"center\"\r\n                                >\r\n                                    {v.hiragana}\r\n                                </TableCell>\r\n                                <TableCell\r\n                                    style={\r\n                                        incorrectIds.includes(v.vocabId)\r\n                                            ? {\r\n                                                  ...tableElementStyle,\r\n                                                  color: \"red\",\r\n                                                  fontWeight: \"bold\",\r\n                                              }\r\n                                            : tableElementStyle\r\n                                    }\r\n                                    align=\"center\"\r\n                                >\r\n                                    {v.english}\r\n                                </TableCell>\r\n                                <TableCell\r\n                                    style={tableElementStyle}\r\n                                    align=\"center\"\r\n                                >\r\n                                    <Speaker\r\n                                        vocabSound={vocabSounds[v.vocabId]}\r\n                                        vocabId={v.vocabId}\r\n                                    />\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n            <br />\r\n            <button\r\n                onClick={() => {\r\n                    changePage(2);\r\n                    setTimeout(() => {\r\n                        sendClientOpeLog(\"start quiz\");\r\n                    }, 1000);\r\n                }}\r\n                className=\"btn btn-primary btn-lg btn-block\"\r\n            >\r\n                Start the Kanji Quiz\r\n            </button>\r\n            <br />\r\n            <CharacterComment\r\n                screenWidth={screenWidth}\r\n                imgNumber={imgNumber - 1 || 3}\r\n                comment={imgNumber === 1 ? \"Try your best!\" : \"Good luck!\"}\r\n            />\r\n        </>\r\n    );\r\n}\r\n\r\ninterface SpeakerProps {\r\n    vocabSound: sound;\r\n    vocabId: number;\r\n}\r\nclass Speaker extends React.Component<\r\n    SpeakerProps,\r\n    {\r\n        showImg: boolean;\r\n    }\r\n> {\r\n    didUnmount: boolean;\r\n\r\n    constructor(props: SpeakerProps) {\r\n        super(props);\r\n        this.state = {\r\n            showImg: props.vocabSound.playable,\r\n        };\r\n        this.didUnmount = false;\r\n    }\r\n\r\n    componentDidMount() {\r\n        setTimeout(this.loadSound);\r\n    }\r\n\r\n    componentDidUpdate(previous: SpeakerProps) {\r\n        if (previous.vocabSound.audio !== this.props.vocabSound.audio) {\r\n            this.setState({ showImg: false });\r\n            setTimeout(this.loadSound);\r\n        }\r\n    }\r\n\r\n    loadSound = () => {\r\n        const { vocabSound } = this.props;\r\n        vocabSound.audio.oncanplaythrough = () => {\r\n            if (!this.didUnmount) this.setState({ showImg: true });\r\n            vocabSound.playable = true;\r\n        };\r\n        vocabSound.audio.load();\r\n    };\r\n\r\n    componentWillUnmount() {\r\n        this.didUnmount = true;\r\n    }\r\n\r\n    render() {\r\n        const { showImg } = this.state;\r\n        const { vocabSound } = this.props;\r\n        return showImg ? (\r\n            <img\r\n                alt=\"kanji speaker\"\r\n                src={consts.BLOB_URL + \"/vocabulary-quiz/img/speaker.png\"}\r\n                style={{ width: \"60%\", maxWidth: 30, cursor: \"pointer\" }}\r\n                onClick={() => {\r\n                    void vocabSound?.audio?.play();\r\n                }}\r\n            />\r\n        ) : (\r\n            <ShurikenProgress\r\n                key=\"circle\"\r\n                size=\"100%\"\r\n                style={{ width: \"60%\", maxWidth: 30 }}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\ninterface Page2Props {\r\n    vocabList: vocab[];\r\n    changePage: (nextPage: vocabStore.TPageNumber) => void;\r\n    screenWidth: number;\r\n    imgNumber: number;\r\n    correctSounds: HTMLAudioElement[];\r\n    vocabSounds: HTMLAudioElement[];\r\n}\r\nclass Page2 extends React.Component<\r\n    Page2Props,\r\n    {\r\n        correctIds: number[];\r\n        incorrectIds: number[];\r\n        vocabToShow?: vocab;\r\n        mode: number;\r\n        buttons: JSX.Element[];\r\n        vocabToBeAsked: vocab;\r\n    }\r\n> {\r\n    constructor(props: Page2Props) {\r\n        super(props);\r\n\r\n        const { vocabList } = props;\r\n        const firstButtonsAndVocabs = this.makeButtons([], [], vocabList);\r\n\r\n        this.state = {\r\n            correctIds: [],\r\n            incorrectIds: [],\r\n            vocabToShow: undefined,\r\n            mode: 0, //0:quiz, 1:correct/2:incorrect\r\n            buttons: firstButtonsAndVocabs.resultButtons,\r\n            vocabToBeAsked: firstButtonsAndVocabs.resultVocabToBeAsked,\r\n        };\r\n    }\r\n\r\n    makeButtons = (\r\n        correctIds: number[],\r\n        incorrectIds: number[],\r\n        vocabsForQuiz: vocab[]\r\n    ) => {\r\n        const { vocabList, correctSounds, vocabSounds } = this.props;\r\n\r\n        const getRandItem = (vs: vocab[]) =>\r\n            vs[Math.floor(Math.random() * vs.length)];\r\n        const resultVocabToBeAsked = getRandItem(vocabsForQuiz);\r\n        let survivedVocabs = vocabList.filter(\r\n            v => v && v.vocabId !== resultVocabToBeAsked.vocabId\r\n        );\r\n\r\n        const vocabsOfChoice: vocab[] = [];\r\n        const resultButtons = [\r\n            <button\r\n                key={3}\r\n                onClick={() => {\r\n                    try {\r\n                        const sound = correctSounds[0];\r\n                        sound.onended = e => {\r\n                            vocabSounds[resultVocabToBeAsked.vocabId] &&\r\n                                vocabSounds[\r\n                                    resultVocabToBeAsked.vocabId\r\n                                ].play();\r\n                            sound.onended = null;\r\n                        };\r\n                        sound.play();\r\n\r\n                        this.setState({\r\n                            vocabToShow: resultVocabToBeAsked,\r\n                            correctIds: [\r\n                                ...correctIds,\r\n                                resultVocabToBeAsked.vocabId,\r\n                            ],\r\n                            mode: 1,\r\n                        });\r\n                        if (vocabSounds[resultVocabToBeAsked.vocabId]) {\r\n                            vocabSounds[resultVocabToBeAsked.vocabId].pause();\r\n                            vocabSounds[\r\n                                resultVocabToBeAsked.vocabId\r\n                            ].currentTime = 0;\r\n                        }\r\n                    } catch (e) {\r\n                        //\r\n                    }\r\n                }}\r\n                className=\"btn btn-primary btn-lg btn-block\"\r\n                style={{ maxWidth: 300 }}\r\n            >\r\n                {resultVocabToBeAsked.hiragana}\r\n            </button>,\r\n        ];\r\n\r\n        for (let i = 0; i < 3; i = (i + 1) | 0) {\r\n            const vocabToPush = getRandItem(survivedVocabs);\r\n            vocabsOfChoice.push(vocabToPush);\r\n\r\n            resultButtons.push(\r\n                <button\r\n                    key={i}\r\n                    onClick={() => {\r\n                        try {\r\n                            const sound = correctSounds[1];\r\n                            sound.onended = e => {\r\n                                vocabSounds[resultVocabToBeAsked.vocabId] &&\r\n                                    vocabSounds[\r\n                                        resultVocabToBeAsked.vocabId\r\n                                    ].play();\r\n                                sound.onended = null;\r\n                            };\r\n                            sound.play();\r\n\r\n                            this.setState({\r\n                                vocabToShow: resultVocabToBeAsked,\r\n                                incorrectIds: [\r\n                                    ...incorrectIds,\r\n                                    resultVocabToBeAsked.vocabId,\r\n                                ],\r\n                                mode: 2,\r\n                            });\r\n                            if (vocabSounds[resultVocabToBeAsked.vocabId]) {\r\n                                vocabSounds[\r\n                                    resultVocabToBeAsked.vocabId\r\n                                ].pause();\r\n                                vocabSounds[\r\n                                    resultVocabToBeAsked.vocabId\r\n                                ].currentTime = 0;\r\n                            }\r\n                        } catch (e) {\r\n                            //\r\n                        }\r\n                    }}\r\n                    className=\"btn btn-primary btn-lg btn-block\"\r\n                    style={{ maxWidth: 300 }}\r\n                >\r\n                    {vocabToPush.hiragana}\r\n                </button>\r\n            );\r\n\r\n            survivedVocabs = survivedVocabs.filter(\r\n                v => !vocabsOfChoice.includes(v)\r\n            );\r\n        }\r\n        return { resultButtons: shuffle(resultButtons), resultVocabToBeAsked };\r\n    };\r\n\r\n    render() {\r\n        setTimeout(() => {\r\n            try {\r\n                (document.activeElement as HTMLElement).blur();\r\n            } catch (e) {}\r\n        }, 300);\r\n\r\n        const {\r\n            vocabList,\r\n            screenWidth,\r\n            imgNumber,\r\n            vocabSounds,\r\n            changePage,\r\n            correctSounds,\r\n        } = this.props;\r\n        const {\r\n            correctIds,\r\n            incorrectIds,\r\n            vocabToShow,\r\n            mode,\r\n            buttons,\r\n            vocabToBeAsked,\r\n        } = this.state;\r\n\r\n        const tableHeadStyle: React.CSSProperties = {\r\n            fontSize: \"medium\",\r\n            fontWeight: \"bold\",\r\n        };\r\n        const tableElementStyle: React.CSSProperties = {\r\n            fontSize: \"medium\",\r\n        };\r\n\r\n        let content: JSX.Element;\r\n        if (mode === 0) {\r\n            //Quiz\r\n            content = (\r\n                <div>\r\n                    <CharacterComment\r\n                        screenWidth={screenWidth}\r\n                        imgNumber={((imgNumber - 1 || 3) - 1) | 3}\r\n                        comment=\"Choose the Hiragana for the Kanji!\"\r\n                    />\r\n                    <p style={{ fontSize: \"xx-large\", fontWeight: \"bold\" }}>\r\n                        {vocabToBeAsked.kanji}\r\n                    </p>\r\n                    {buttons}\r\n                    <br />\r\n                    <p\r\n                        style={{ color: \"#007bff\", cursor: \"pointer\" }}\r\n                        onClick={() => {\r\n                            const sure = window.confirm(\r\n                                \"Your progress will not be saved.\\nAre you sure you want to return?\"\r\n                            );\r\n                            if (sure) {\r\n                                changePage(1);\r\n                            }\r\n                        }}\r\n                    >\r\n                        {\"Return to Kanji List >>\"}\r\n                    </p>\r\n                    <br />\r\n                </div>\r\n            );\r\n        } else {\r\n            //Correct,Incorrect\r\n            const rand = Math.floor(Math.random() * 3);\r\n            content = (\r\n                <div>\r\n                    <CharacterComment\r\n                        screenWidth={screenWidth}\r\n                        imgNumber={((imgNumber - 1 || 3) - 1) | 3}\r\n                        comment={\r\n                            mode === 1\r\n                                ? [\"Good!\", \"Nice!\", \"Excellent!\"][rand]\r\n                                : \"Oops!\"\r\n                        }\r\n                    />\r\n                    {mode === 1 ? (\r\n                        <p\r\n                            style={{\r\n                                fontSize: \"xx-large\",\r\n                                fontWeight: \"bold\",\r\n                                color: \"green\",\r\n                            }}\r\n                        >\r\n                            {\"Correct!\"}\r\n                        </p>\r\n                    ) : (\r\n                        <p\r\n                            style={{\r\n                                fontSize: \"xx-large\",\r\n                                fontWeight: \"bold\",\r\n                                color: \"red\",\r\n                            }}\r\n                        >\r\n                            {\"Incorrect!\"}\r\n                        </p>\r\n                    )}\r\n                    <TableContainer component={Paper}>\r\n                        <Table aria-label=\"simple table\">\r\n                            <TableHead>\r\n                                <TableRow\r\n                                    style={{ backgroundColor: \"papayawhip\" }}\r\n                                >\r\n                                    <TableCell\r\n                                        style={tableHeadStyle}\r\n                                        align=\"center\"\r\n                                    >\r\n                                        Kanji\r\n                                    </TableCell>\r\n                                    <TableCell\r\n                                        style={tableHeadStyle}\r\n                                        align=\"center\"\r\n                                    >\r\n                                        Hiragana\r\n                                    </TableCell>\r\n                                    <TableCell\r\n                                        style={tableHeadStyle}\r\n                                        align=\"center\"\r\n                                    >\r\n                                        Meaning\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                <TableRow>\r\n                                    <TableCell\r\n                                        style={tableElementStyle}\r\n                                        align=\"center\"\r\n                                    >\r\n                                        {vocabToShow?.kanji}\r\n                                    </TableCell>\r\n                                    <TableCell\r\n                                        style={tableElementStyle}\r\n                                        align=\"center\"\r\n                                    >\r\n                                        {vocabToShow?.hiragana}\r\n                                    </TableCell>\r\n                                    <TableCell\r\n                                        style={tableElementStyle}\r\n                                        align=\"center\"\r\n                                    >\r\n                                        {vocabToShow?.english}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                    <br />\r\n                    <button\r\n                        onClick={() => {\r\n                            const finishedIds: number[] = [\r\n                                ...correctIds,\r\n                                ...incorrectIds,\r\n                            ];\r\n                            const vocabsForQuiz = vocabList.filter(\r\n                                v =>\r\n                                    !(\r\n                                        finishedIds &&\r\n                                        finishedIds.includes(v.vocabId)\r\n                                    )\r\n                            );\r\n\r\n                            correctSounds.forEach(s => {\r\n                                s.pause();\r\n                                s.currentTime = 0;\r\n                            });\r\n                            const stopSound = (v?: vocab) => {\r\n                                if (v && vocabSounds[v.vocabId]) {\r\n                                    vocabSounds[v.vocabId].pause();\r\n                                    vocabSounds[v.vocabId].currentTime = 0;\r\n                                }\r\n                            };\r\n\r\n                            if (vocabsForQuiz.length <= 0) {\r\n                                const cr = correctIds.length;\r\n                                const inc = incorrectIds.length;\r\n                                const percentage = Math.floor(\r\n                                    (100 * cr) / (cr + inc)\r\n                                );\r\n                                localStorage.setItem(\r\n                                    `kanji-quiz-percentage-${vocabList[0].genreId}`,\r\n                                    JSON.stringify(percentage)\r\n                                );\r\n                                localStorage.setItem(\r\n                                    `kanji-quiz-incorrectIds-${vocabList[0].genreId}`,\r\n                                    JSON.stringify(incorrectIds)\r\n                                );\r\n\r\n                                stopSound(vocabToBeAsked);\r\n                                changePage(3);\r\n                                return;\r\n                            }\r\n\r\n                            stopSound(vocabToShow);\r\n\r\n                            const { resultButtons, resultVocabToBeAsked } =\r\n                                this.makeButtons(\r\n                                    correctIds,\r\n                                    incorrectIds,\r\n                                    vocabsForQuiz\r\n                                );\r\n\r\n                            this.setState({\r\n                                mode: 0,\r\n                                buttons: resultButtons,\r\n                                vocabToBeAsked: resultVocabToBeAsked,\r\n                            });\r\n                        }}\r\n                        className=\"btn btn-dark btn-lg btn-block\"\r\n                    >\r\n                        {\"Next\"}\r\n                    </button>\r\n                    <br />\r\n                </div>\r\n            );\r\n        }\r\n        return content;\r\n    }\r\n}\r\n\r\ntype TPage3Props = {\r\n    vocabList: vocab[];\r\n    changePage: (nextPage: vocabStore.TPageNumber) => void;\r\n    screenWidth: number;\r\n    imgNumber: number;\r\n    vocabSounds: HTMLAudioElement[];\r\n    vocabGenre: vocabGenre;\r\n    titleToShowUpper: string;\r\n};\r\nfunction Page3(props: TPage3Props) {\r\n    const {\r\n        vocabList,\r\n        screenWidth,\r\n        imgNumber,\r\n        vocabSounds,\r\n        changePage,\r\n        vocabGenre,\r\n        titleToShowUpper,\r\n    } = props;\r\n    const percentage = Number(\r\n        localStorage.getItem(`kanji-quiz-percentage-${vocabGenre.genreId}`)\r\n    );\r\n    const savedItem = localStorage.getItem(\r\n        `kanji-quiz-incorrectIds-${vocabGenre.genreId}`\r\n    );\r\n    const incorrectIds = savedItem && JSON.parse(savedItem);\r\n\r\n    const [didSendOpeLog, setDidSendOpeLog] = useState(false);\r\n    setTimeout(() => {\r\n        if (!window.location.href.includes(vocabGenre.genreName)) return;\r\n        didSendOpeLog ||\r\n            sendClientOpeLog(\"finish kanji quiz\", `percentage: ${percentage}%`);\r\n        setDidSendOpeLog(true);\r\n    }, 1000);\r\n\r\n    let comment: string;\r\n    if (percentage === 100) {\r\n        comment = \"Perfect!\";\r\n    } else if (percentage > 80) {\r\n        comment = \"Very good!\";\r\n    } else if (percentage > 60) {\r\n        comment = \"Good!\";\r\n    } else if (percentage > 30) {\r\n        comment = \"Nice try!\";\r\n    } else {\r\n        comment = \"I'm sorry!\";\r\n    }\r\n\r\n    const tableHeadStyle: React.CSSProperties = {\r\n        fontSize: \"medium\",\r\n        fontWeight: \"bold\",\r\n    };\r\n    const tableElementStyle: React.CSSProperties = {\r\n        fontSize: \"medium\",\r\n    };\r\n    const shareButtonStyle: React.CSSProperties = {\r\n        width: \"200px\",\r\n        margin: \"5px\",\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <p style={{ fontSize: \"x-large\", fontWeight: \"bold\" }}>\r\n                Your score is:\r\n            </p>\r\n            <p style={{ fontSize: \"xx-large\", fontWeight: \"bold\" }}>\r\n                {percentage} %\r\n            </p>\r\n            <FBShareBtn\r\n                urlToShare={`${consts.Z_APPS_TOP_URL}/kanji-quiz/${vocabGenre.genreName}`}\r\n                style={shareButtonStyle}\r\n            />\r\n            <br />\r\n            <TwitterShareBtn\r\n                urlToShare={`${consts.Z_APPS_TOP_URL}/kanji-quiz/${vocabGenre.genreName}`}\r\n                textToShare={`I got ${percentage}％ on the Japanese Kanji Quiz for ${titleToShowUpper}!`}\r\n                style={shareButtonStyle}\r\n            />\r\n            <br />\r\n            <br />\r\n            {incorrectIds && incorrectIds.length > 0 && (\r\n                <>\r\n                    <CharacterComment\r\n                        screenWidth={screenWidth}\r\n                        imgNumber={imgNumber - 1 || 3}\r\n                        comment={\r\n                            <p>\r\n                                {comment}\r\n                                <br />\r\n                                You should remember the{\" \"}\r\n                                <span\r\n                                    style={{ fontWeight: \"bold\", color: \"red\" }}\r\n                                >\r\n                                    red Kanji\r\n                                </span>{\" \"}\r\n                                below!\r\n                            </p>\r\n                        }\r\n                    />\r\n                    <br />\r\n                    <button\r\n                        onClick={() => {\r\n                            changePage(2);\r\n                        }}\r\n                        className=\"btn btn-primary btn-block\"\r\n                    >\r\n                        {\"Retry\"}\r\n                    </button>\r\n                    <br />\r\n                    <TableContainer component={Paper}>\r\n                        <Table aria-label=\"simple table\">\r\n                            <TableHead>\r\n                                <TableRow\r\n                                    style={{ backgroundColor: \"papayawhip\" }}\r\n                                >\r\n                                    <TableCell\r\n                                        style={tableHeadStyle}\r\n                                        align=\"center\"\r\n                                    >\r\n                                        Kanji\r\n                                    </TableCell>\r\n                                    <TableCell\r\n                                        style={tableHeadStyle}\r\n                                        align=\"center\"\r\n                                    >\r\n                                        Hiragana\r\n                                    </TableCell>\r\n                                    <TableCell\r\n                                        style={tableHeadStyle}\r\n                                        align=\"center\"\r\n                                    >\r\n                                        Meaning\r\n                                    </TableCell>\r\n                                    <TableCell\r\n                                        style={tableHeadStyle}\r\n                                        align=\"center\"\r\n                                    >\r\n                                        Sound\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {vocabList\r\n                                    .sort((v1, v2) =>\r\n                                        incorrectIds.includes(v1.vocabId) ===\r\n                                        incorrectIds.includes(v2.vocabId)\r\n                                            ? 0\r\n                                            : incorrectIds.includes(v1.vocabId)\r\n                                            ? -1\r\n                                            : 1\r\n                                    )\r\n                                    .map((v: vocab) => (\r\n                                        <TableRow key={v.vocabId}>\r\n                                            <TableCell\r\n                                                style={\r\n                                                    incorrectIds.includes(\r\n                                                        v.vocabId\r\n                                                    )\r\n                                                        ? {\r\n                                                              ...tableElementStyle,\r\n                                                              color: \"red\",\r\n                                                              fontWeight:\r\n                                                                  \"bold\",\r\n                                                          }\r\n                                                        : tableElementStyle\r\n                                                }\r\n                                                align=\"center\"\r\n                                            >\r\n                                                {v.kanji}\r\n                                            </TableCell>\r\n                                            <TableCell\r\n                                                style={\r\n                                                    incorrectIds.includes(\r\n                                                        v.vocabId\r\n                                                    )\r\n                                                        ? {\r\n                                                              ...tableElementStyle,\r\n                                                              color: \"red\",\r\n                                                              fontWeight:\r\n                                                                  \"bold\",\r\n                                                          }\r\n                                                        : tableElementStyle\r\n                                                }\r\n                                                align=\"center\"\r\n                                            >\r\n                                                {v.hiragana}\r\n                                            </TableCell>\r\n                                            <TableCell\r\n                                                style={\r\n                                                    incorrectIds.includes(\r\n                                                        v.vocabId\r\n                                                    )\r\n                                                        ? {\r\n                                                              ...tableElementStyle,\r\n                                                              color: \"red\",\r\n                                                              fontWeight:\r\n                                                                  \"bold\",\r\n                                                          }\r\n                                                        : tableElementStyle\r\n                                                }\r\n                                                align=\"center\"\r\n                                            >\r\n                                                {v.english}\r\n                                            </TableCell>\r\n                                            <TableCell\r\n                                                style={tableElementStyle}\r\n                                                align=\"center\"\r\n                                            >\r\n                                                <img\r\n                                                    alt=\"kanji speaker\"\r\n                                                    src={\r\n                                                        consts.BLOB_URL +\r\n                                                        \"/vocabulary-quiz/img/speaker.png\"\r\n                                                    }\r\n                                                    style={{\r\n                                                        width: \"60%\",\r\n                                                        maxWidth: 30,\r\n                                                        cursor: \"pointer\",\r\n                                                    }}\r\n                                                    onClick={() => {\r\n                                                        vocabSounds[\r\n                                                            v.vocabId\r\n                                                        ] &&\r\n                                                            vocabSounds[\r\n                                                                v.vocabId\r\n                                                            ].play();\r\n                                                    }}\r\n                                                />\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n                                    ))}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                </>\r\n            )}\r\n            <br />\r\n            <button\r\n                onClick={() => {\r\n                    changePage(2);\r\n                }}\r\n                className=\"btn btn-primary btn-lg btn-block\"\r\n            >\r\n                {\"Retry\"}\r\n            </button>\r\n            <hr />\r\n            <Link to={`/vocabulary-quiz/${vocabGenre.genreName}`}>\r\n                <Card\r\n                    body\r\n                    style={{\r\n                        backgroundColor: \"#333\",\r\n                        borderColor: \"#333\",\r\n                        color: \"white\",\r\n                    }}\r\n                >\r\n                    <CardTitle>\r\n                        Learn the meaning of the vocabulary for{\" \"}\r\n                        {titleToShowUpper}\r\n                    </CardTitle>\r\n                    <Button color=\"secondary\">Try Vocab Quiz</Button>\r\n                </Card>\r\n            </Link>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default connect(\r\n    (state: ApplicationState) => state.vocabQuiz,\r\n    dispatch => bindActionCreators(vocabStore.actionCreators, dispatch)\r\n)(VocabQuiz);\r\n","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\Vocab\\Merge\\Top.tsx",["921"],"import React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { StopAnimation } from \"../../../../../common/animation\";\r\nimport { sendPost } from \"../../../../../common/functions\";\r\nimport { areSameObjects } from \"../../../../../common/util/compareObjects\";\r\nimport {\r\n    vocabMergedGenre,\r\n    VocabMergedGenreId,\r\n} from \"../../../../../types/vocab\";\r\nimport Head from \"../../../../shared/Helmet\";\r\nimport { HideFooter } from \"../../../../shared/HideHeaderAndFooter/HideFooter\";\r\nimport {\r\n    getCurrentToken,\r\n    InputRegisterToken,\r\n} from \"../../../../shared/InputRegisterToken\";\r\n\r\nasync function fetchAllGenres(\r\n    setAllGenres: (genres: vocabMergedGenre[]) => void\r\n) {\r\n    const res = await fetch(\"api/VocabQuiz/GetAllMergedGenres\");\r\n    setAllGenres(await res.json());\r\n}\r\n\r\nfunction VocabMergeTop() {\r\n    const [initGenres, setInitGenres] = useState<vocabMergedGenre[]>([]);\r\n    const [allGenres, setAllGenres] = useState<vocabMergedGenre[]>([]);\r\n    const [newGenreName, setNewGenreName] = useState(\"\");\r\n\r\n    const loadAllGenres = () => {\r\n        fetchAllGenres(genres => {\r\n            const g = genres.map(g => {\r\n                g.order *= 10;\r\n                return g;\r\n            });\r\n            setAllGenres(g);\r\n            setInitGenres(g);\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        loadAllGenres();\r\n    }, []);\r\n\r\n    const changeGenre = (\r\n        originalGenre: vocabMergedGenre,\r\n        targetKey: keyof vocabMergedGenre,\r\n        newValue: vocabMergedGenre[keyof vocabMergedGenre]\r\n    ) => {\r\n        const newGenre = { ...originalGenre, [targetKey]: newValue };\r\n        setAllGenres([\r\n            ...allGenres.filter(g => g.genreId !== newGenre.genreId),\r\n            newGenre,\r\n        ]);\r\n    };\r\n\r\n    const checkGenreChanged = (g: vocabMergedGenre) =>\r\n        !areSameObjects(\r\n            g,\r\n            initGenres.find(pg => pg.genreId === g.genreId)\r\n        );\r\n\r\n    return (\r\n        <>\r\n            <Head noindex />\r\n            <HideFooter />\r\n            <StopAnimation />\r\n            <h1 style={{ marginBottom: 30 }}>{\"Vocabulary Merge\"}</h1>\r\n\r\n            <div style={{ marginBottom: 30, backgroundColor: \"lightyellow\" }}>\r\n                <p style={{ fontWeight: \"bold\", marginBottom: 0 }}>\r\n                    New Merged Genre Name:\r\n                </p>\r\n                <input\r\n                    value={newGenreName}\r\n                    onChange={ev => {\r\n                        setNewGenreName(ev.target.value.split(\" \").join(\"_\"));\r\n                    }}\r\n                />\r\n                <button\r\n                    onClick={() => {\r\n                        if (!newGenreName) {\r\n                            return;\r\n                        }\r\n                        setAllGenres([\r\n                            ...allGenres,\r\n                            getNewGenre(newGenreName, allGenres),\r\n                        ]);\r\n                        setNewGenreName(\"\");\r\n                    }}\r\n                >\r\n                    Add new genre\r\n                </button>\r\n            </div>\r\n\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Order</th>\r\n                        <th>Genre Name</th>\r\n                        <th>YouTube</th>\r\n                        <th></th>\r\n                        <th></th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {[...allGenres]\r\n                        .sort((a, b) => a.order - b.order)\r\n                        .map(g => {\r\n                            return (\r\n                                <tr\r\n                                    key={g.genreId}\r\n                                    style={{\r\n                                        backgroundColor: checkGenreChanged(g)\r\n                                            ? \"red\"\r\n                                            : undefined,\r\n                                    }}\r\n                                >\r\n                                    <td>\r\n                                        <input\r\n                                            type=\"number\"\r\n                                            value={g.order\r\n                                                .toString()\r\n                                                .replace(/^0+/, \"\")}\r\n                                            style={{ width: 70 }}\r\n                                            onChange={ev => {\r\n                                                changeGenre(\r\n                                                    g,\r\n                                                    \"order\",\r\n                                                    Number(ev.target.value)\r\n                                                );\r\n                                            }}\r\n                                        />\r\n                                    </td>\r\n                                    <td>\r\n                                        <input\r\n                                            type=\"text\"\r\n                                            value={g.genreName}\r\n                                            onChange={ev => {\r\n                                                changeGenre(\r\n                                                    g,\r\n                                                    \"genreName\",\r\n                                                    ev.target.value\r\n                                                        .split(\" \")\r\n                                                        .join(\"_\")\r\n                                                );\r\n                                            }}\r\n                                        />\r\n                                    </td>\r\n                                    <td>\r\n                                        <input\r\n                                            type=\"text\"\r\n                                            value={g.youtube}\r\n                                            onChange={ev => {\r\n                                                changeGenre(\r\n                                                    g,\r\n                                                    \"youtube\",\r\n                                                    ev.target.value\r\n                                                );\r\n                                            }}\r\n                                        />\r\n                                    </td>\r\n                                    <td style={{ backgroundColor: \"white\" }}>\r\n                                        {\"Release:\"}\r\n                                        <input\r\n                                            type=\"checkbox\"\r\n                                            checked={g.released}\r\n                                            onChange={() => {\r\n                                                changeGenre(\r\n                                                    g,\r\n                                                    \"released\",\r\n                                                    !g.released\r\n                                                );\r\n                                            }}\r\n                                        />\r\n                                    </td>\r\n                                    <td\r\n                                        style={{\r\n                                            paddingLeft: 20,\r\n                                            backgroundColor: \"white\",\r\n                                        }}\r\n                                    >\r\n                                        {initGenres.some(\r\n                                            pg => pg.genreId === g.genreId\r\n                                        ) && (\r\n                                            <span style={{ margin: \"0 10px\" }}>\r\n                                                <Link\r\n                                                    to={`/vocabularyMerge/${g.genreName}`}\r\n                                                >\r\n                                                    Edit\r\n                                                </Link>\r\n                                            </span>\r\n                                        )}\r\n                                    </td>\r\n                                </tr>\r\n                            );\r\n                        })}\r\n                </tbody>\r\n            </table>\r\n            <div style={{ height: 50 }} />\r\n            <div\r\n                style={{\r\n                    position: \"fixed\",\r\n                    bottom: 0,\r\n                    left: 0,\r\n                    width: \"100%\",\r\n                    backgroundColor: \"lightyellow\",\r\n                    padding: 5,\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                }}\r\n            >\r\n                <div\r\n                    style={{\r\n                        display: \"flex\",\r\n                        flexDirection: \"column\",\r\n                        width: \"50%\",\r\n                        alignItems: \"center\",\r\n                    }}\r\n                >\r\n                    <InputRegisterToken\r\n                        style={{ marginBottom: 5, width: \"25%\" }}\r\n                    />\r\n                    <button\r\n                        onClick={() => {\r\n                            save(allGenres, () => {\r\n                                loadAllGenres();\r\n                            });\r\n                        }}\r\n                        style={{ width: \"100%\" }}\r\n                    >\r\n                        Save\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nasync function save(allGenres: vocabMergedGenre[], fncAfterSaving: () => void) {\r\n    if (!allGenres.every(g => g.order && g.genreName)) {\r\n        alert(\"「order」か「genreName」が、空白もしくはゼロの行があります。\");\r\n        return;\r\n    }\r\n\r\n    const duplicatedGenre = allGenres.find(\r\n        g =>\r\n            allGenres.filter(\r\n                ge =>\r\n                    g.genreName === ge.genreName ||\r\n                    (g.youtube &&\r\n                        g.youtube !== \"storage\" &&\r\n                        g.youtube === ge.youtube)\r\n            ).length > 1\r\n    );\r\n    if (duplicatedGenre) {\r\n        alert(\r\n            `重複エラー：「${duplicatedGenre.genreName}」のgenreNameもしくはyoutubeIdが重複しています。`\r\n        );\r\n        return;\r\n    }\r\n\r\n    if (!window.confirm(\"Do you really want to save?\")) {\r\n        return;\r\n    }\r\n\r\n    try {\r\n        const result = await sendPost(\r\n            {\r\n                genres: allGenres,\r\n                token: getCurrentToken(),\r\n            },\r\n            \"/api/VocabQuiz/SaveVocabMergedGenres\"\r\n        );\r\n\r\n        if (result === true) {\r\n            if (typeof fncAfterSaving === \"function\") {\r\n                fncAfterSaving();\r\n            }\r\n            alert(\"success!\");\r\n            return;\r\n        }\r\n    } catch (ex) {}\r\n\r\n    alert(\"failed...\");\r\n}\r\n\r\nfunction getNewGenre(\r\n    genreName: string,\r\n    allGenres: vocabMergedGenre[]\r\n): vocabMergedGenre {\r\n    const maxGenreId = allGenres.reduce(\r\n        (acc, val) => (acc > val.genreId ? acc : val.genreId),\r\n        0\r\n    );\r\n    return {\r\n        genreName,\r\n        genreId: VocabMergedGenreId(maxGenreId + 1),\r\n        youtube: \"\",\r\n        order: 1,\r\n        released: false,\r\n    };\r\n}\r\n\r\nexport default VocabMergeTop;\r\n","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\Vocab\\Edit\\Top.tsx",["922"],"import React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { StopAnimation } from \"../../../../../common/animation\";\r\nimport { sendPost } from \"../../../../../common/functions\";\r\nimport { areSameObjects } from \"../../../../../common/util/compareObjects\";\r\nimport { vocabGenre, VocabGenreId } from \"../../../../../types/vocab\";\r\nimport Head from \"../../../../shared/Helmet\";\r\nimport { HideFooter } from \"../../../../shared/HideHeaderAndFooter/HideFooter\";\r\nimport {\r\n    getCurrentToken,\r\n    InputRegisterToken,\r\n} from \"../../../../shared/InputRegisterToken\";\r\n\r\nasync function fetchAllGenres(setAllGenres: (genres: vocabGenre[]) => void) {\r\n    const res = await fetch(\"api/VocabQuiz/GetAllGenresForEdit\");\r\n    setAllGenres(await res.json());\r\n}\r\n\r\nfunction VocabEditTop() {\r\n    const [initGenres, setInitGenres] = useState<vocabGenre[]>([]);\r\n    const [allGenres, setAllGenres] = useState<vocabGenre[]>([]);\r\n    const [newGenreName, setNewGenreName] = useState(\"\");\r\n\r\n    const loadAllGenres = () => {\r\n        fetchAllGenres(genres => {\r\n            const g = genres.map(g => {\r\n                g.order *= 10;\r\n                return g;\r\n            });\r\n            setAllGenres(g);\r\n            setInitGenres(g);\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        loadAllGenres();\r\n    }, []);\r\n\r\n    const changeGenre = (\r\n        originalGenre: vocabGenre,\r\n        targetKey: keyof vocabGenre,\r\n        newValue: vocabGenre[keyof vocabGenre]\r\n    ) => {\r\n        const newGenre = { ...originalGenre, [targetKey]: newValue };\r\n        setAllGenres([\r\n            ...allGenres.filter(g => g.genreId !== newGenre.genreId),\r\n            newGenre,\r\n        ]);\r\n    };\r\n\r\n    const checkGenreChanged = (g: vocabGenre) =>\r\n        !areSameObjects(\r\n            g,\r\n            initGenres.find(pg => pg.genreId === g.genreId)\r\n        );\r\n\r\n    return (\r\n        <>\r\n            <Head noindex />\r\n            <HideFooter />\r\n            <StopAnimation />\r\n            <h1 style={{ marginBottom: 30 }}>{\"Vocabulary Edit\"}</h1>\r\n\r\n            <div style={{ marginBottom: 30, backgroundColor: \"lightyellow\" }}>\r\n                <p style={{ fontWeight: \"bold\", marginBottom: 0 }}>\r\n                    New Genre Name:\r\n                </p>\r\n                <input\r\n                    value={newGenreName}\r\n                    onChange={ev => {\r\n                        setNewGenreName(ev.target.value.split(\" \").join(\"_\"));\r\n                    }}\r\n                />\r\n                <button\r\n                    onClick={() => {\r\n                        if (!newGenreName) {\r\n                            return;\r\n                        }\r\n                        setAllGenres([\r\n                            ...allGenres,\r\n                            getNewGenre(newGenreName, allGenres),\r\n                        ]);\r\n                        setNewGenreName(\"\");\r\n                    }}\r\n                >\r\n                    Add new genre\r\n                </button>\r\n                <Link to=\"/vocabularyMerge\">\r\n                    <button style={{ marginLeft: 100 }}>Merge</button>\r\n                </Link>\r\n            </div>\r\n\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Order</th>\r\n                        <th>Genre Name</th>\r\n                        <th>YouTube</th>\r\n                        <th></th>\r\n                        <th></th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {[...allGenres]\r\n                        .sort((a, b) => a.order - b.order)\r\n                        .map(g => {\r\n                            return (\r\n                                <tr\r\n                                    key={g.genreId}\r\n                                    style={{\r\n                                        backgroundColor: checkGenreChanged(g)\r\n                                            ? \"red\"\r\n                                            : undefined,\r\n                                    }}\r\n                                >\r\n                                    <td>\r\n                                        <input\r\n                                            type=\"number\"\r\n                                            value={g.order\r\n                                                .toString()\r\n                                                .replace(/^0+/, \"\")}\r\n                                            style={{ width: 70 }}\r\n                                            onChange={ev => {\r\n                                                changeGenre(\r\n                                                    g,\r\n                                                    \"order\",\r\n                                                    Number(ev.target.value)\r\n                                                );\r\n                                            }}\r\n                                        />\r\n                                    </td>\r\n                                    <td>\r\n                                        <input\r\n                                            type=\"text\"\r\n                                            value={g.genreName}\r\n                                            onChange={ev => {\r\n                                                changeGenre(\r\n                                                    g,\r\n                                                    \"genreName\",\r\n                                                    ev.target.value\r\n                                                        .split(\" \")\r\n                                                        .join(\"_\")\r\n                                                );\r\n                                            }}\r\n                                        />\r\n                                    </td>\r\n                                    <td>\r\n                                        <input\r\n                                            type=\"text\"\r\n                                            value={g.youtube}\r\n                                            onChange={ev => {\r\n                                                changeGenre(\r\n                                                    g,\r\n                                                    \"youtube\",\r\n                                                    ev.target.value\r\n                                                );\r\n                                            }}\r\n                                        />\r\n                                    </td>\r\n                                    <td style={{ backgroundColor: \"white\" }}>\r\n                                        Release:\r\n                                        <input\r\n                                            type=\"checkbox\"\r\n                                            checked={g.released}\r\n                                            onChange={() => {\r\n                                                changeGenre(\r\n                                                    g,\r\n                                                    \"released\",\r\n                                                    !g.released\r\n                                                );\r\n                                            }}\r\n                                        />\r\n                                    </td>\r\n                                    <td\r\n                                        style={{\r\n                                            paddingLeft: 20,\r\n                                            backgroundColor: \"white\",\r\n                                        }}\r\n                                    >\r\n                                        {initGenres.some(\r\n                                            pg => pg.genreId === g.genreId\r\n                                        ) && (\r\n                                            <span style={{ margin: \"0 10px\" }}>\r\n                                                <Link\r\n                                                    to={`/vocabularyEdit/${g.genreName}`}\r\n                                                >\r\n                                                    Edit\r\n                                                </Link>\r\n                                            </span>\r\n                                        )}\r\n                                    </td>\r\n                                    <td\r\n                                        style={{\r\n                                            paddingLeft: 20,\r\n                                            backgroundColor: \"white\",\r\n                                        }}\r\n                                    >\r\n                                        <button\r\n                                            style={{ margin: \"0 10px\" }}\r\n                                            onClick={() => {\r\n                                                changeGenre(\r\n                                                    g,\r\n                                                    \"youtube\",\r\n                                                    \"storage\"\r\n                                                );\r\n                                            }}\r\n                                        >\r\n                                            Storage\r\n                                        </button>\r\n                                    </td>\r\n                                </tr>\r\n                            );\r\n                        })}\r\n                </tbody>\r\n            </table>\r\n            <div style={{ height: 50 }} />\r\n            <div\r\n                style={{\r\n                    position: \"fixed\",\r\n                    bottom: 0,\r\n                    left: 0,\r\n                    width: \"100%\",\r\n                    backgroundColor: \"lightyellow\",\r\n                    padding: 5,\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                }}\r\n            >\r\n                <div\r\n                    style={{\r\n                        display: \"flex\",\r\n                        flexDirection: \"column\",\r\n                        width: \"50%\",\r\n                        alignItems: \"center\",\r\n                    }}\r\n                >\r\n                    <InputRegisterToken\r\n                        style={{ marginBottom: 5, width: \"25%\" }}\r\n                    />\r\n                    <button\r\n                        onClick={() => {\r\n                            save(allGenres, () => {\r\n                                loadAllGenres();\r\n                            });\r\n                        }}\r\n                        style={{ width: \"100%\" }}\r\n                    >\r\n                        Save\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nasync function save(allGenres: vocabGenre[], fncAfterSaving: () => void) {\r\n    if (!allGenres.every(g => g.order && g.genreName)) {\r\n        alert(\"「order」か「genreName」が、空白もしくはゼロの行があります。\");\r\n        return;\r\n    }\r\n\r\n    const duplicatedGenre = allGenres.find(\r\n        g =>\r\n            allGenres.filter(\r\n                ge =>\r\n                    g.genreName === ge.genreName ||\r\n                    (g.youtube &&\r\n                        g.youtube !== \"storage\" &&\r\n                        g.youtube === ge.youtube)\r\n            ).length > 1\r\n    );\r\n    if (duplicatedGenre) {\r\n        alert(\r\n            `重複エラー：「${duplicatedGenre.genreName}」のgenreNameもしくはyoutubeIdが重複しています。`\r\n        );\r\n        return;\r\n    }\r\n\r\n    if (!window.confirm(\"Do you really want to save?\")) {\r\n        return;\r\n    }\r\n\r\n    try {\r\n        const result = await sendPost(\r\n            {\r\n                genres: allGenres,\r\n                token: getCurrentToken(),\r\n            },\r\n            \"/api/VocabQuiz/SaveVocabGenres\"\r\n        );\r\n\r\n        if (result === true) {\r\n            if (typeof fncAfterSaving === \"function\") {\r\n                fncAfterSaving();\r\n            }\r\n            alert(\"success!\");\r\n            return;\r\n        }\r\n    } catch (ex) {}\r\n\r\n    alert(\"failed...\");\r\n}\r\n\r\nfunction getNewGenre(genreName: string, allGenres: vocabGenre[]): vocabGenre {\r\n    const maxGenreId = allGenres.reduce(\r\n        (acc, val) => (acc > val.genreId ? acc : val.genreId),\r\n        0\r\n    );\r\n    return {\r\n        genreName,\r\n        genreId: VocabGenreId(maxGenreId + 1),\r\n        order: 1,\r\n        youtube: \"\",\r\n        released: false,\r\n    };\r\n}\r\n\r\nexport default VocabEditTop;\r\n","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\Games\\NinjaGameTop.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\Games\\NinjaGame.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\Admin\\ApiCache.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\Admin\\OpeLogTable.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\Games\\NinjaGame3.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\Games\\GameOver.tsx",["923"],"import * as React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { getParams } from \"../../../../common/functions\";\r\nimport Head from \"../../../shared/Helmet\";\r\nimport { HideFooter } from \"../../../shared/HideHeaderAndFooter/HideFooter\";\r\n\r\nclass GameOver extends React.Component {\r\n    consts?: {\r\n        BTN_START_CLASS: \"btn btn-primary btn-lg btn-block\";\r\n    };\r\n\r\n    render() {\r\n        this.consts = {\r\n            BTN_START_CLASS: \"btn btn-primary btn-lg btn-block\",\r\n        };\r\n        const bottomMargin = {\r\n            marginBottom: 20,\r\n        };\r\n\r\n        //urlパラメータ取得\r\n        const params = getParams();\r\n\r\n        const game = params[\"g\"] || \"\";\r\n        const lang = params[\"l\"] || \"\";\r\n\r\n        const gameUrl = \"/\" + game + \"?l=\" + lang;\r\n\r\n        let title;\r\n        let msgButton;\r\n        if (lang === \"Japanese\") {\r\n            title = \"Oops!　ゲームオーバー!\";\r\n            msgButton = \"続きから再開\";\r\n        } else {\r\n            title = \"Oops! Game over!\";\r\n            msgButton = \"Continue the game\";\r\n        }\r\n\r\n        return (\r\n            <div className=\"center\">\r\n                <Head title=\"Game Over\" noindex={true} />\r\n                <HideFooter />\r\n                <h2 style={bottomMargin}>{title}</h2>\r\n                <Link to={gameUrl}>\r\n                    <button className={this.consts.BTN_START_CLASS}>\r\n                        {msgButton}\r\n                    </button>\r\n                </Link>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default GameOver;\r\n","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\SiteMapEdit.tsx",["924"],"import * as React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Z_APPS_TOP_URL } from \"../../../common/consts\";\r\nimport * as commonFnc from \"../../../common/functions\";\r\nimport ShurikenProgress from \"../../shared/Animations/ShurikenProgress\";\r\nimport Helmet from \"../../shared/Helmet\";\r\n\r\nexport default class SiteMapEdit extends React.Component<\r\n    {},\r\n    {\r\n        sitemap: { loc: string; lastmod: string }[];\r\n        token: string;\r\n    }\r\n> {\r\n    screenHeight: number;\r\n\r\n    constructor(props: {}) {\r\n        super(props);\r\n\r\n        //セーブデータがあればそれを設定\r\n        const saveData = localStorage.getItem(\"folktales-register-token\");\r\n        const objSaveData = saveData && JSON.parse(saveData);\r\n\r\n        let token;\r\n        if (objSaveData) {\r\n            token = objSaveData.token || \"\";\r\n        } else {\r\n            token = \"\";\r\n        }\r\n\r\n        this.state = {\r\n            sitemap: [],\r\n            token: token,\r\n        };\r\n\r\n        this.screenHeight = window.innerHeight;\r\n\r\n        this.loadSitemap();\r\n    }\r\n\r\n    loadSitemap = async () => {\r\n        try {\r\n            const url = `api/SiteMapEdit/GetSiteMap`;\r\n            const response = await fetch(url);\r\n\r\n            const sitemap = await response.json();\r\n\r\n            this.setState({ sitemap: sitemap });\r\n        } catch (e) {\r\n            //window.location.href = `/not-found?p=${window.location.pathname}`;\r\n            return;\r\n        }\r\n    };\r\n\r\n    handleChangeSitemap = (event: any, i: number, item: any) => {\r\n        const s: any = this.state.sitemap.concat();\r\n        s[i][item] = event.target.value.split(\" \").join(\"\");\r\n\r\n        this.setState({ sitemap: s });\r\n    };\r\n\r\n    addLine = (i: number) => {\r\n        const s = this.state.sitemap.concat();\r\n        s.splice(i + 1, 0, { loc: \"\", lastmod: \"\" });\r\n\r\n        this.setState({ sitemap: s });\r\n    };\r\n\r\n    removeLine = (i: number) => {\r\n        const s = this.state.sitemap.filter((l, m) => m !== i);\r\n        this.setState({ sitemap: s });\r\n    };\r\n\r\n    register = async () => {\r\n        try {\r\n            if (window.confirm(\"Are you sure that you want to register?\")) {\r\n                const { sitemap, token } = this.state;\r\n\r\n                const result = await commonFnc.sendPost(\r\n                    { sitemap, token },\r\n                    \"api/SiteMapEdit/RegisterSiteMap\"\r\n                );\r\n\r\n                if (result) {\r\n                    alert(\"Success to save!\");\r\n                } else {\r\n                    alert(\"Failed to save...\");\r\n                }\r\n            }\r\n        } catch (ex) {\r\n            alert(\"Error!\");\r\n            alert(\"Error!\");\r\n        }\r\n    };\r\n\r\n    changeToken = (event: any) => {\r\n        const token = event.target.value;\r\n        this.setState({ token: token });\r\n        localStorage.setItem(\r\n            \"folktales-register-token\",\r\n            JSON.stringify({ token })\r\n        );\r\n    };\r\n\r\n    checkInput = (s: any) => {\r\n        try {\r\n            if (s.loc.indexOf(Z_APPS_TOP_URL) < 0) return \"The URL is strange.\";\r\n\r\n            if (s.lastmod.length !== 25)\r\n                return \"Length of lastmod need to be 25.\";\r\n\r\n            const dateAndTime = s.lastmod.split(\"T\");\r\n\r\n            if (dateAndTime.length !== 2) return \"lastmod needs T\";\r\n\r\n            const date = dateAndTime[0];\r\n            const time = dateAndTime[1];\r\n\r\n            if (date.length !== 10)\r\n                return \"The length of the date part needs to be 10.\";\r\n\r\n            const arrDate = date.split(\"-\");\r\n\r\n            if (!(Number(arrDate[0]) >= 2019 && Number(arrDate[0]) < 2030))\r\n                return \"Year is strange.\";\r\n            if (!(Number(arrDate[1]) >= 1 && Number(arrDate[1]) <= 12))\r\n                return \"Month is strange.\";\r\n            if (!(Number(arrDate[2]) >= 1 && Number(arrDate[2]) <= 31))\r\n                return \"Date is strange.\";\r\n\r\n            const arrTime = time.split(\"+\");\r\n\r\n            if (arrTime[1] !== \"09:00\") return \"lastmod needs +09:00\";\r\n\r\n            const arrTime2 = arrTime[0].split(\":\");\r\n\r\n            if (!(Number(arrTime2[0]) >= 0 && Number(arrTime2[0]) <= 24))\r\n                return \"Hour needs to be 0 to 24.\";\r\n            if (!(Number(arrTime2[1]) >= 0 && Number(arrTime2[1]) <= 59))\r\n                return \"Minute needs to be 0 to 59.\";\r\n            if (!(Number(arrTime2[2]) >= 0 && Number(arrTime2[2]) <= 99))\r\n                return \"Second needs to be 0 to 99.\";\r\n        } catch (ex) {\r\n            return (ex as Error).message;\r\n        }\r\n\r\n        return \"\";\r\n    };\r\n\r\n    render() {\r\n        const { sitemap } = this.state;\r\n        const resultOfCheck =\r\n            sitemap.filter(s => this.checkInput(s) !== \"\").length === 0;\r\n        return (\r\n            <div className=\"center\">\r\n                <Helmet title={\"Edit Sitemap\"} noindex={true} />\r\n                <div\r\n                    style={{\r\n                        width: \"100%\",\r\n                        height: \"100%\",\r\n                        backgroundColor: \"#1b181b\",\r\n                        position: \"fixed\",\r\n                        top: 0,\r\n                        right: 0,\r\n                        zIndex: -1,\r\n                    }}\r\n                ></div>\r\n                <div style={{ maxWidth: 1000 }}>\r\n                    <div\r\n                        className=\"breadcrumbs\"\r\n                        style={{ textAlign: \"left\", color: \"white\" }}\r\n                    >\r\n                        <Link\r\n                            to=\"/\"\r\n                            style={{ marginRight: \"5px\", marginLeft: \"5px\" }}\r\n                        >\r\n                            <span>Home</span>\r\n                        </Link>\r\n                        ＞\r\n                        <Link\r\n                            to=\"/folktalesEdit\"\r\n                            style={{ marginRight: \"5px\", marginLeft: \"5px\" }}\r\n                        >\r\n                            <span>Japanese Folktales</span>\r\n                        </Link>\r\n                        ＞\r\n                        <span style={{ marginRight: \"5px\", marginLeft: \"5px\" }}>\r\n                            edit sitemap\r\n                        </span>\r\n                    </div>\r\n                    <h1\r\n                        style={{\r\n                            margin: \"30px\",\r\n                            lineHeight: \"30px\",\r\n                            color: \"#eb6905\",\r\n                        }}\r\n                    >\r\n                        <b>Edit Sitemap</b>\r\n                    </h1>\r\n                    <br />\r\n                    {this.state.sitemap.length > 0 ? (\r\n                        <div style={{ textAlign: \"left\" }}>\r\n                            {sitemap &&\r\n                                sitemap.map((s, i) => (\r\n                                    <SitemapInfo\r\n                                        s={s}\r\n                                        i={i}\r\n                                        key={i}\r\n                                        handleChangeSitemap={\r\n                                            this.handleChangeSitemap\r\n                                        }\r\n                                        addLine={this.addLine}\r\n                                        removeLine={this.removeLine}\r\n                                        checkInput={this.checkInput}\r\n                                    />\r\n                                ))}\r\n                        </div>\r\n                    ) : (\r\n                        <div className=\"center\">\r\n                            <ShurikenProgress key=\"circle\" size=\"20%\" />\r\n                        </div>\r\n                    )}\r\n                    <input\r\n                        type=\"text\"\r\n                        value={this.state.token}\r\n                        onChange={this.changeToken}\r\n                    />\r\n                    <br />\r\n                    <div\r\n                        style={{\r\n                            position: \"fixed\",\r\n                            bottom: 0,\r\n                            left: 0,\r\n                            zIndex: 99999999,\r\n                            backgroundColor: \"black\",\r\n                            width: \"100%\",\r\n                        }}\r\n                    >\r\n                        <span style={{ color: \"white\" }}>\r\n                            Count: {sitemap.length}\r\n                        </span>\r\n                        \"　\"\r\n                        <button\r\n                            style={{\r\n                                marginTop: 10,\r\n                                marginBottom: 10,\r\n                                height: 28,\r\n                                paddingTop: 0,\r\n                                color: resultOfCheck ? \"black\" : \"red\",\r\n                            }}\r\n                            className=\"btn btn-dark btn-xs\"\r\n                            disabled={!resultOfCheck}\r\n                            onClick={this.register}\r\n                        >\r\n                            <b>Register</b>\r\n                        </button>\r\n                        <span style={{ color: \"red\" }}>\r\n                            {resultOfCheck || \"　error is occuring\"}\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\ninterface InfoProps {\r\n    s: { loc: string; lastmod: string };\r\n    i: number;\r\n    key: number;\r\n    handleChangeSitemap: (event: any, i: any, item: any) => void;\r\n    addLine: (i: any) => void;\r\n    removeLine: (i: any) => void;\r\n    checkInput: (s: any) => any;\r\n}\r\nclass SitemapInfo extends React.Component<InfoProps> {\r\n    constructor(props: InfoProps) {\r\n        super(props);\r\n\r\n        this.state = {};\r\n    }\r\n\r\n    render() {\r\n        const { s, i, handleChangeSitemap, addLine, removeLine, checkInput } =\r\n            this.props;\r\n        return (\r\n            <span>\r\n                <span style={{ color: \"red\" }}>{checkInput(s)}</span>\r\n                <table style={{ width: \"100%\" }}>\r\n                    <tbody>\r\n                        <tr\r\n                            style={{\r\n                                backgroundColor: \"black\",\r\n                                color: \"#757575\",\r\n                            }}\r\n                        >\r\n                            <td style={{ width: \"20px\" }}>\r\n                                <b>loc:　</b>\r\n                            </td>\r\n                            <td>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    value={s.loc}\r\n                                    onChange={e =>\r\n                                        handleChangeSitemap(e, i, \"loc\")\r\n                                    }\r\n                                    style={{\r\n                                        width: \"100%\",\r\n                                        backgroundColor: \"#1b181b\",\r\n                                        color: \"#eb6905\",\r\n                                        border: \"thin solid #594e46\",\r\n                                    }}\r\n                                />\r\n                            </td>\r\n                        </tr>\r\n                        <tr\r\n                            style={{\r\n                                backgroundColor: \"black\",\r\n                                color: \"#757575\",\r\n                            }}\r\n                        >\r\n                            <td style={{ width: \"20px\" }}>\r\n                                <b>lastmod:　</b>\r\n                            </td>\r\n                            <td>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    value={s.lastmod}\r\n                                    onChange={e =>\r\n                                        handleChangeSitemap(e, i, \"lastmod\")\r\n                                    }\r\n                                    style={{\r\n                                        width: \"100%\",\r\n                                        backgroundColor: \"#1b181b\",\r\n                                        color: \"#eb6905\",\r\n                                        border: \"thin solid #594e46\",\r\n                                    }}\r\n                                />\r\n                            </td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n                <button\r\n                    style={{\r\n                        marginTop: 10,\r\n                        marginBottom: 2,\r\n                        height: 28,\r\n                        paddingTop: 0,\r\n                        color: \"black\",\r\n                    }}\r\n                    className=\"btn btn-dark btn-xs\"\r\n                    onClick={() => addLine(i)}\r\n                >\r\n                    <b>Add Line</b>\r\n                </button>\r\n\r\n                <div style={{ textAlign: \"right\", float: \"right\" }}>\r\n                    <button\r\n                        style={{\r\n                            marginTop: 10,\r\n                            marginBottom: 10,\r\n                            height: 28,\r\n                            paddingTop: 0,\r\n                            color: \"black\",\r\n                        }}\r\n                        className=\"btn btn-dark btn-xs\"\r\n                        onClick={() => removeLine(i)}\r\n                    >\r\n                        <b>Remove Line</b>\r\n                    </button>\r\n                </div>\r\n\r\n                <br />\r\n                <br />\r\n                <hr />\r\n            </span>\r\n        );\r\n    }\r\n}\r\n","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\Games\\NinjaGame2.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\common\\util\\romajiConvert.ts",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\hooks\\useScreenSize.ts",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\shared\\Animations\\ShurikenProgress\\index.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\Articles\\Layout\\index.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\Layout\\index.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\types\\vocab.ts",["925"],"export type vocab = {\r\n    genreId: number;\r\n    vocabId: number;\r\n    hiragana: string;\r\n    kanji: string;\r\n    english: string;\r\n    order: number;\r\n};\r\nexport type vocabGenre = {\r\n    genreId: number & { _vocabGenreId: never };\r\n    genreName: string;\r\n    order: number;\r\n    youtube: string;\r\n    released: boolean;\r\n};\r\nexport function VocabGenreId(id: number) {\r\n    return id as vocabGenre[\"genreId\"];\r\n}\r\nexport type vocabMergedGenre = {\r\n    genreId: number & { _mergedVocabGenreId: never };\r\n    genreName: string;\r\n    order: number;\r\n    youtube: string;\r\n    released: boolean;\r\n};\r\nexport function VocabMergedGenreId(id: number) {\r\n    return id as vocabMergedGenre[\"genreId\"];\r\n}\r\nexport type sound = {\r\n    audio: HTMLAudioElement;\r\n    playable: boolean;\r\n};\r\n","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\Game\\NinjaAdventure\\index.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\common\\util\\compareObjects.ts",["926"],"// ２つのオブジェクトの内容が同一であることを確認\r\nexport function areSameObjects<T>(a?: T, b?: T) {\r\n    if (!a || !b) {\r\n        return false;\r\n    }\r\n\r\n    // ２つのオブジェクトのキーをマージ\r\n    const keys1 = Object.keys(a) as (keyof T)[];\r\n    const keys2 = Object.keys(b) as (keyof T)[];\r\n    const allKeys = [...keys1, ...keys2];\r\n    // 重複除去\r\n    allKeys.filter((k, i) => allKeys.indexOf(k) === i);\r\n\r\n    // 全てのキーに対して同じ値が入っていることを確認\r\n    return keys1.every(key => a[key] === b[key]);\r\n}\r\n","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\Vocab\\Vocab\\index.tsx",["927"],"import { Card } from \"@material-ui/core\";\r\nimport React, { ReactNode, useEffect, useMemo, useState } from \"react\";\r\nimport { Link, RouteComponentProps } from \"react-router-dom\";\r\nimport { BLOB_URL } from \"../../../common/consts\";\r\nimport { reloadAndRedirect_OneTimeReload } from \"../../../common/functions\";\r\nimport { cFetch } from \"../../../common/util/cFetch\";\r\nimport { getRomaji } from \"../../../common/util/romajiConvert\";\r\nimport { vocab, vocabGenre, vocabMergedGenre } from \"../../../types/vocab\";\r\nimport { SeasonAnimation } from \"../../shared/Animations/SeasonAnimation\";\r\nimport ShurikenProgress from \"../../shared/Animations/ShurikenProgress\";\r\nimport CharacterComment from \"../../shared/CharacterComment\";\r\nimport FB from \"../../shared/FaceBook\";\r\nimport { Helmet } from \"../../shared/Helmet\";\r\nimport { VocabVideo } from \"../../shared/YouTubeVideo/VocabVideo\";\r\nimport { useScreenSize } from \"../../zApps/zApps/hooks/useScreenSize\";\r\nimport { VocabWithRomaji } from \"./Top\";\r\n\r\ninterface VocabWithMergedGenre extends VocabWithRomaji {\r\n    mergedGenreName: string;\r\n    youtube: string;\r\n}\r\n\r\nconst imgNumber = Math.random() > 0.1 ? 1 : 2;\r\n\r\nexport default function Vocab({\r\n    match: {\r\n        params: { hiragana },\r\n    },\r\n}: RouteComponentProps<{ hiragana: string }>) {\r\n    const {\r\n        targetVocabList,\r\n        genres,\r\n        vocabWithMergedGenre,\r\n        strTitle,\r\n        description,\r\n        nodeTitle,\r\n        capitalRomaji,\r\n    } = useVocabData(hiragana);\r\n\r\n    const { screenWidth } = useScreenSize();\r\n    const flexDirection = screenWidth > 760 ? \"row\" : \"column\";\r\n\r\n    return (\r\n        <>\r\n            <Helmet\r\n                title={strTitle + \" | Learn Japanese Vocab from Videos\"}\r\n                desc={description.join(\" \")}\r\n            />\r\n\r\n            <BreadCrumbs title={strTitle} />\r\n\r\n            <h1\r\n                style={{ width: \"100%\", textAlign: \"center\", margin: \"30px 0\" }}\r\n            >\r\n                {nodeTitle}\r\n            </h1>\r\n\r\n            <CharacterComment\r\n                comment={\r\n                    <div\r\n                        style={{\r\n                            marginLeft: 10,\r\n                            marginRight: 10,\r\n                            fontSize: \"large\",\r\n                        }}\r\n                    >\r\n                        {description.map((d, i) => (\r\n                            <p key={i}>{d}</p>\r\n                        ))}\r\n                    </div>\r\n                }\r\n                screenWidth={screenWidth}\r\n                imgNumber={imgNumber}\r\n            />\r\n\r\n            <div style={{ fontSize: \"large\", textAlign: \"center\" }}>\r\n                {targetVocabList.length ? (\r\n                    targetVocabList.map(v => {\r\n                        const g = genres.find(g => g.genreId === v.genreId);\r\n                        const genreNamesToShow = g\r\n                            ? g.genreName\r\n                                  .split(\"_\")\r\n                                  .map(\r\n                                      t => t && t[0].toUpperCase() + t.substr(1)\r\n                                  )\r\n                                  .join(\" \")\r\n                            : \"\";\r\n                        const key = `${v.genreId}-${v.vocabId}`;\r\n                        const youtube = g?.youtube;\r\n\r\n                        return (\r\n                            <VideoCard\r\n                                key={key}\r\n                                flexDirection={flexDirection}\r\n                                genreNamesToShow={genreNamesToShow}\r\n                                capitalRomaji={capitalRomaji}\r\n                                g={g}\r\n                                v={v}\r\n                                youtube={youtube}\r\n                                screenWidth={screenWidth}\r\n                                genreName={g?.genreName || \"\"}\r\n                            />\r\n                        );\r\n                    })\r\n                ) : (\r\n                    <ShurikenProgress size=\"20%\" />\r\n                )}\r\n\r\n                {vocabWithMergedGenre.map(v => {\r\n                    const g = genres.find(g => g.genreId === v.genreId);\r\n                    const genreNamesToShow = v.mergedGenreName\r\n                        .split(\"_\")\r\n                        .map(t => t && t[0].toUpperCase() + t.substr(1))\r\n                        .join(\" \");\r\n                    const key = `${v.mergedGenreName}-${v.genreId}-${v.vocabId}`;\r\n                    const youtube = v.youtube;\r\n\r\n                    return (\r\n                        <VideoCard\r\n                            key={key}\r\n                            flexDirection={flexDirection}\r\n                            genreNamesToShow={genreNamesToShow}\r\n                            capitalRomaji={capitalRomaji}\r\n                            g={g}\r\n                            v={v}\r\n                            youtube={youtube}\r\n                            screenWidth={screenWidth}\r\n                            genreName={v.mergedGenreName}\r\n                        />\r\n                    );\r\n                })}\r\n            </div>\r\n            <FB />\r\n            <SeasonAnimation frequencySec={2} screenWidth={screenWidth} />\r\n        </>\r\n    );\r\n}\r\n\r\nfunction VideoCard({\r\n    flexDirection,\r\n    genreNamesToShow,\r\n    capitalRomaji,\r\n    g,\r\n    v,\r\n    youtube,\r\n    screenWidth,\r\n    genreName,\r\n}: {\r\n    flexDirection: \"column\" | \"row\";\r\n    genreNamesToShow: string;\r\n    capitalRomaji: string;\r\n    g: vocabGenre | undefined;\r\n    v: VocabWithRomaji;\r\n    youtube: string | undefined;\r\n    screenWidth: number;\r\n    genreName: string;\r\n}) {\r\n    return (\r\n        <Card\r\n            style={{\r\n                display: \"flex\",\r\n                flexDirection,\r\n                alignItems: \"center\",\r\n                margin: \"30px 0\",\r\n            }}\r\n        >\r\n            <div\r\n                style={{\r\n                    flex: 1,\r\n                    width: \"100%\",\r\n                    height: \"100%\",\r\n                    margin: 10,\r\n                    padding: \"10px 0\",\r\n                    display: \"inline-flex\",\r\n                    flexDirection: \"column\",\r\n                    textAlign: \"left\",\r\n                }}\r\n            >\r\n                <h2\r\n                    style={{\r\n                        textAlign: \"center\",\r\n                        marginBottom: 25,\r\n                    }}\r\n                >\r\n                    {genreNamesToShow}\r\n                </h2>\r\n                <FlexDiv title={\"Romaji: \"} value={capitalRomaji} />\r\n                <FlexDiv title={\"Hiragana: \"} value={v.hiragana} />\r\n                <FlexDiv title={\"Kanji: \"} value={v.kanji} />\r\n                <FlexDiv title={\"English: \"} value={v.english} />\r\n                <FlexDiv\r\n                    title={\"Sound: \"}\r\n                    value={g && <Speaker v={v} g={g} />}\r\n                />\r\n            </div>\r\n            <div style={{ flex: 1, width: \"100%\" }}>\r\n                {youtube && (\r\n                    <VocabVideo\r\n                        youtube={youtube}\r\n                        genreName={genreName}\r\n                        screenWidth={\r\n                            flexDirection === \"row\"\r\n                                ? screenWidth / 2\r\n                                : screenWidth\r\n                        }\r\n                        pageNameForLog={\"LearnVocabFromVideo-\" + v.romaji}\r\n                    />\r\n                )}\r\n            </div>\r\n        </Card>\r\n    );\r\n}\r\n\r\nasync function fetchAllVocabList(): Promise<vocab[]> {\r\n    return await (await cFetch(\"api/VocabQuiz/GetAllVocabs\")).json();\r\n}\r\n\r\nasync function fetchAllGenres(): Promise<vocabGenre[]> {\r\n    return await (await cFetch(\"api/VocabQuiz/GetAllGenres\")).json();\r\n}\r\n\r\nasync function fetchAllMergedGenres(): Promise<\r\n    {\r\n        mergedVocabList: vocab[];\r\n        vocabMergedGenre: vocabMergedGenre;\r\n    }[]\r\n> {\r\n    return await (\r\n        await cFetch(\"api/VocabQuiz/GetAllMergedGenreAndVocab\")\r\n    ).json();\r\n}\r\n\r\ninterface SpeakerProps {\r\n    v: vocab;\r\n    g: vocabGenre;\r\n}\r\nclass Speaker extends React.Component<\r\n    SpeakerProps,\r\n    {\r\n        showImg: boolean;\r\n    }\r\n> {\r\n    vocabSound?: HTMLAudioElement;\r\n    didUnmount: boolean;\r\n\r\n    constructor(props: SpeakerProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            showImg: false,\r\n        };\r\n\r\n        this.didUnmount = false;\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.loadSound();\r\n    };\r\n\r\n    loadSound = () => {\r\n        const { v, g } = this.props;\r\n\r\n        this.vocabSound = new Audio();\r\n        this.vocabSound.preload = \"none\";\r\n        this.vocabSound.autoplay = false;\r\n        this.vocabSound.src = `${BLOB_URL}/vocabulary-quiz/audio/${g.genreName}/Japanese-vocabulary${v.vocabId}.m4a`;\r\n\r\n        this.vocabSound.oncanplaythrough = () => {\r\n            if (!this.didUnmount) this.setState({ showImg: true });\r\n        };\r\n        this.vocabSound.load();\r\n    };\r\n\r\n    componentWillUnmount() {\r\n        this.didUnmount = true;\r\n    }\r\n\r\n    render() {\r\n        const { showImg } = this.state;\r\n        const { vocabSound } = this;\r\n        return showImg ? (\r\n            <img\r\n                alt=\"vocab speaker\"\r\n                src={BLOB_URL + \"/vocabulary-quiz/img/speaker.png\"}\r\n                style={{ width: \"60%\", maxWidth: 30, cursor: \"pointer\" }}\r\n                onClick={() => {\r\n                    vocabSound && vocabSound.play();\r\n                }}\r\n            />\r\n        ) : (\r\n            <ShurikenProgress\r\n                key=\"circle\"\r\n                size=\"100%\"\r\n                style={{ width: \"60%\", maxWidth: 30 }}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nfunction FlexDiv({ title, value }: { title: ReactNode; value: ReactNode }) {\r\n    return (\r\n        <div style={{ display: \"flex\", margin: \"10px 20px 0\" }}>\r\n            <div\r\n                style={{\r\n                    flex: 1,\r\n                    fontWeight: \"bold\",\r\n                    textAlign: \"right\",\r\n                    marginRight: 10,\r\n                }}\r\n            >\r\n                {title}\r\n            </div>\r\n            <div style={{ flex: 1, marginLeft: 10 }}>{value}</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction getGenreOrder(v: vocab, genres: vocabGenre[]) {\r\n    return genres.find(g => g.genreId === v.genreId)?.order || 0;\r\n}\r\n\r\nfunction BreadCrumbs({ title }: { title: string }) {\r\n    return (\r\n        <div\r\n            className=\"breadcrumbs\"\r\n            itemScope\r\n            itemType=\"https://schema.org/BreadcrumbList\"\r\n            style={{ textAlign: \"center\", fontSize: \"large\" }}\r\n        >\r\n            <span\r\n                itemProp=\"itemListElement\"\r\n                itemScope\r\n                itemType=\"http://schema.org/ListItem\"\r\n            >\r\n                <Link\r\n                    to=\"/\"\r\n                    itemProp=\"item\"\r\n                    style={{\r\n                        marginRight: \"5px\",\r\n                        marginLeft: \"5px\",\r\n                    }}\r\n                >\r\n                    <span itemProp=\"name\">{\"Home\"}</span>\r\n                </Link>\r\n                <meta itemProp=\"position\" content=\"1\" />\r\n            </span>\r\n            {\" > \"}\r\n            <span\r\n                itemProp=\"itemListElement\"\r\n                itemScope\r\n                itemType=\"http://schema.org/ListItem\"\r\n            >\r\n                <span\r\n                    itemProp=\"name\"\r\n                    style={{\r\n                        marginRight: \"5px\",\r\n                        marginLeft: \"5px\",\r\n                    }}\r\n                >\r\n                    {title}\r\n                </span>\r\n                <meta itemProp=\"position\" content=\"2\" />\r\n            </span>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction useVocabData(hiragana: string) {\r\n    const [targetVocabList, setTargetVocabList] = useState<VocabWithRomaji[]>(\r\n        []\r\n    );\r\n    const [genres, setGenres] = useState<vocabGenre[]>([]);\r\n    const [vocabWithMergedGenre, setVocabWithMergedGenre] = useState<\r\n        VocabWithMergedGenre[]\r\n    >([]);\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            const pVl = fetchAllVocabList();\r\n            const pGenres = fetchAllGenres();\r\n\r\n            // vocab\r\n            const vl = await pVl;\r\n            const targetVl = vl\r\n                .filter(v => v.hiragana === hiragana)\r\n                .map(v => ({ ...v, romaji: getRomaji(v.hiragana) }));\r\n\r\n            //genre\r\n            const genres = await pGenres;\r\n\r\n            //merged vocab\r\n            const merged = await fetchAllMergedGenres();\r\n\r\n            const targetVlToSet = targetVl\r\n                .filter(v =>\r\n                    genres.some(g => g.genreId === v.genreId && g.youtube)\r\n                )\r\n                .sort(\r\n                    (a, b) =>\r\n                        getGenreOrder(a, genres) - getGenreOrder(b, genres)\r\n                );\r\n            const genresToSet = genres.filter(\r\n                g =>\r\n                    g.youtube &&\r\n                    targetVlToSet.some(v => v.genreId === g.genreId)\r\n            );\r\n            if (genresToSet.length <= 0) {\r\n                reloadAndRedirect_OneTimeReload(\"vocab-video-\" + hiragana);\r\n            }\r\n\r\n            setTargetVocabList(targetVlToSet);\r\n            setGenres(genresToSet);\r\n\r\n            const vmg = merged\r\n                .map(m => {\r\n                    if (!m.vocabMergedGenre.released) {\r\n                        return null;\r\n                    }\r\n\r\n                    const mergedVocab = m.mergedVocabList.find(mv =>\r\n                        targetVlToSet.some(\r\n                            v =>\r\n                                v.genreId === mv.genreId &&\r\n                                v.vocabId === mv.vocabId\r\n                        )\r\n                    );\r\n                    if (mergedVocab) {\r\n                        return {\r\n                            mergedGenreName: m.vocabMergedGenre.genreName,\r\n                            youtube: m.vocabMergedGenre.youtube,\r\n                            romaji: getRomaji(mergedVocab.hiragana),\r\n                            ...mergedVocab,\r\n                        };\r\n                    }\r\n                    return null;\r\n                })\r\n                .filter(m => m) as VocabWithMergedGenre[];\r\n            setVocabWithMergedGenre(vmg);\r\n        })();\r\n    }, [hiragana]);\r\n\r\n    const romaji = useMemo(() => getRomaji(hiragana), [hiragana]);\r\n\r\n    const capitalRomaji = romaji[0].toUpperCase() + romaji.substr(1);\r\n    const strTitle = targetVocabList.length\r\n        ? `${capitalRomaji} (${targetVocabList[0].hiragana})`\r\n        : capitalRomaji;\r\n    const nodeTitle = targetVocabList.length ? (\r\n        <>\r\n            {capitalRomaji}\r\n            <br />\r\n            {`(${targetVocabList[0].hiragana})`}\r\n        </>\r\n    ) : (\r\n        capitalRomaji\r\n    );\r\n\r\n    const isOneGenre =\r\n        targetVocabList.length + vocabWithMergedGenre.length === 1;\r\n\r\n    const englishWords = targetVocabList\r\n        .map(v => v.english)\r\n        .reduce<string[]>(\r\n            (acc, val) => [\r\n                ...acc,\r\n                ...val\r\n                    .split(\", \")\r\n                    .map(en => en.trim())\r\n                    .filter(en => !acc.includes(en)),\r\n            ],\r\n            []\r\n        )\r\n        .map(en => `\"${en}\"`);\r\n\r\n    const englishWordsWithComma =\r\n        englishWords.length === 2\r\n            ? englishWords.join(\" and \")\r\n            : englishWords.reduce<string>(\r\n                  (acc, val, i) =>\r\n                      !i\r\n                          ? val // first\r\n                          : i + 1 !== englishWords.length\r\n                          ? `${acc}, ${val}` // middle\r\n                          : `${acc}, and ${val}`, // last\r\n                  \"\"\r\n              );\r\n\r\n    const description = [\r\n        `${strTitle} means ${englishWordsWithComma}!`,\r\n        `Let's use the ${\r\n            isOneGenre ? \"video\" : \"videos\"\r\n        } to remember the Japanese word, ${strTitle}!`,\r\n        `Video Category: ${[\r\n            ...genres.map(g => g.genreName),\r\n            ...vocabWithMergedGenre.map(g => g.mergedGenreName),\r\n        ]\r\n            .map(genreName =>\r\n                genreName\r\n                    .split(\"_\")\r\n                    .map(t => t && t[0].toUpperCase() + t.substr(1))\r\n                    .join(\" \")\r\n            )\r\n            .join(\" / \")}`,\r\n    ].filter(d => d);\r\n\r\n    return {\r\n        targetVocabList,\r\n        genres,\r\n        vocabWithMergedGenre,\r\n        strTitle,\r\n        description,\r\n        nodeTitle,\r\n        capitalRomaji,\r\n    };\r\n}\r\n","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\Vocab\\Layout\\index.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\Game\\GameBase\\GameFrame\\index.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\EnCheck\\index.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\Stories\\StoriesTop\\index.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\VocabExplorer\\index.tsx",["928"],"import * as React from \"react\";\r\nimport { useEffect, useMemo } from \"react\";\r\nimport { StopAnimation } from \"../../../../common/animation\";\r\nimport { absoluteStyle } from \"../../../../common/util/Game/absoluteStyle\";\r\nimport {\r\n    GameState,\r\n    GameStateManager,\r\n    GetInitialStateType\r\n} from \"../../../../common/util/Game/GameStateManager\";\r\nimport { useGameState } from \"../../../../common/util/Game/useGameState\";\r\nimport Helmet from \"../../../shared/Helmet\";\r\nimport { HideHeaderAndFooter } from \"../../../shared/HideHeaderAndFooter\";\r\nimport { Floor } from \"./GameItems/Floor\";\r\nimport { Ninja } from \"./GameItems/Ninja\";\r\n\r\nexport interface VocabExplorerState extends GameState<VocabExplorerState> {\r\n    ninja: Ninja;\r\n    ninjaAction: \"none\" | \"left\" | \"right\" | \"jump\";\r\n}\r\n\r\nconst initialState: GetInitialStateType<VocabExplorerState> = {\r\n    ninja: new Ninja({ x: 0, y: 0, width: 20 }),\r\n    items: [new Floor({ id: \"floor1\", x: -20, y: 90, width: 200 })],\r\n    ninjaAction: \"none\",\r\n    timeStep: 100,\r\n};\r\n\r\nconst stateManager = new GameStateManager(initialState);\r\n\r\nfunction eachTimeProc(state: VocabExplorerState) {\r\n    state.ninja.eachTime(state);\r\n    state.items.forEach(item => item.eachTime(state));\r\n}\r\n\r\nconst allItems = {\r\n    Floor,\r\n    Ninja,\r\n};\r\n\r\ntype GameEvent =\r\n    | {\r\n          type: \"ItemsEnter\";\r\n          items: { name: string; props: { [key: string]: any } }[];\r\n      }\r\n    | {\r\n          type: \"ItemsRemove\";\r\n          itemIds: number[];\r\n      };\r\n\r\ntype TimeLine = {\r\n    milliSecond: number;\r\n    event: GameEvent;\r\n}[];\r\n\r\nconst timeLine: TimeLine = [\r\n    { milliSecond: 5000, event: { type: \"ItemsEnter\", items: [] } },\r\n    { milliSecond: 8000, event: { type: \"ItemsEnter\", items: [] } },\r\n    { milliSecond: 12000, event: { type: \"ItemsRemove\", itemIds: [] } },\r\n];\r\n\r\nfunction useEventExecuter<EventTypes>(\r\n    timeLine: {\r\n        milliSecond: number;\r\n        event: { type: EventTypes; [key: string]: any };\r\n    }[],\r\n    eventActions: { type: EventTypes; action: () => void }[]\r\n) {\r\n    useEffect(() => {\r\n        timeLine.forEach(t => {\r\n            setTimeout(() => {\r\n                const { type } = t.event;\r\n\r\n                eventActions.find(b => b.type === type)?.action?.();\r\n            }, t.milliSecond);\r\n        });\r\n    }, []);\r\n}\r\n\r\nconst eventActions: { type: GameEvent[\"type\"]; action: () => void }[] = [\r\n    {\r\n        type: \"ItemsEnter\",\r\n        action: () => {\r\n            alert(\"items enter!\");\r\n        },\r\n    },\r\n    {\r\n        type: \"ItemsRemove\",\r\n        action: () => {\r\n            alert(\"items remove!\");\r\n        },\r\n    },\r\n];\r\nexport default function VocabExplorer() {\r\n    const gameState = useGameState<VocabExplorerState>(\r\n        stateManager,\r\n        eachTimeProc\r\n    );\r\n\r\n    useEventExecuter(timeLine, eventActions);\r\n\r\n    return (\r\n        <>\r\n            <Helmet title=\"VocabExplorer\" desc=\"VocabExplorer\" noindex />\r\n            <HideHeaderAndFooter />\r\n            <StopAnimation />\r\n            <Game gameState={gameState} />\r\n        </>\r\n    );\r\n}\r\n\r\nfunction Game({ gameState }: { gameState: VocabExplorerState }) {\r\n    const { UL, ninja, items } = gameState;\r\n\r\n    const frameStyle = useMemo(\r\n        () =>\r\n            ({\r\n                ...absoluteStyle,\r\n                width: 160 * UL,\r\n                height: 90 * UL,\r\n                backgroundColor: \"ivory\",\r\n            } as const),\r\n        [UL]\r\n    );\r\n\r\n    return (\r\n        <div style={frameStyle}>\r\n            <ninja.renderItem gameState={gameState} />\r\n\r\n            {items.map(item => (\r\n                <item.renderItem key={item.id} gameState={gameState} />\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\Vocab\\VocabList\\index.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\Stories\\index.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\Vocab\\VocabVideo\\index.tsx",["929"],"import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { BLOB_URL } from \"../../../../../common/consts\";\r\nimport { VideoRecorder } from \"../../../../../common/util/VideoRecorder\";\r\nimport { ApplicationState } from \"../../../../../store/configureStore\";\r\nimport * as vocabStore from \"../../../../../store/VocabQuizStore\";\r\nimport { sound, vocab, vocabGenre } from \"../../../../../types/vocab\";\r\nimport { SeasonAnimation } from \"../../../../shared/Animations/SeasonAnimation\";\r\nimport Head from \"../../../../shared/Helmet\";\r\nimport { HideHeaderAndFooter } from \"../../../../shared/HideHeaderAndFooter\";\r\nimport { LastPage } from \"./LastPage\";\r\nimport { ListPage } from \"./ListPage\";\r\nimport { MenuPage } from \"./MenuPage\";\r\nimport { QuizPage } from \"./QuizPage\";\r\nimport { Thumbnail } from \"./Thumbnail\";\r\nimport { TitlePage } from \"./TitlePage\";\r\n\r\nexport const Page = {\r\n    menu: 0,\r\n    title: 1,\r\n    list: 2,\r\n    quiz: 3,\r\n    last: 4,\r\n    thumbnail: 5,\r\n};\r\nexport type Page = typeof Page[keyof typeof Page];\r\n\r\nexport type ChangePage = (nextPage: Page) => void;\r\n\r\ntype Props = RouteComponentProps<{ genreName: string }>;\r\ntype State = {\r\n    genreName: string;\r\n    screenWidth: number;\r\n    currentPage: Page;\r\n    vocabList: vocab[];\r\n    vocabGenre?: vocabGenre;\r\n    vocabSounds: sound[];\r\n    isOneSeason: boolean; // 動画全体でSeason単一\r\n    season: string; // 動画全体でのベースのSeason\r\n    vocabSeasons: string[]; // 単語ごとのSeason\r\n    isAutoRecord: boolean;\r\n};\r\n\r\nconst videoRecorder = new VideoRecorder();\r\n\r\nclass VocabVideo extends React.Component<Props, State> {\r\n    music: sound = getAudio({\r\n        src: `${BLOB_URL}/vocabulary-quiz/music.mp3`,\r\n    });\r\n    startingVoice: sound = getAudio({\r\n        src: `${BLOB_URL}/vocabulary-quiz/starting-voice.m4a`,\r\n    });\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        const { params } = props.match;\r\n        const genreName: string = params.genreName.toString().split(\"#\")[0];\r\n\r\n        this.state = {\r\n            genreName,\r\n            screenWidth: window.innerWidth,\r\n            currentPage: Page.menu,\r\n            vocabList: [],\r\n            vocabGenre: undefined,\r\n            vocabSounds: [],\r\n            season: \"spring\",\r\n            vocabSeasons: [],\r\n            isOneSeason: true,\r\n            isAutoRecord: true,\r\n        };\r\n\r\n        let timer: number;\r\n        window.onresize = () => {\r\n            if (timer > 0) {\r\n                clearTimeout(timer);\r\n            }\r\n\r\n            timer = window.setTimeout(() => {\r\n                this.changeScreenSize();\r\n            }, 100);\r\n        };\r\n    }\r\n\r\n    loadVocab = async () => {\r\n        const {\r\n            match: { params },\r\n        } = this.props;\r\n        const genreName: string = params.genreName.toString().split(\"#\")[0];\r\n        const res = await fetch(\r\n            `api/VocabQuiz/GetQuizDataWithoutCache/${genreName}`\r\n        );\r\n        const result: {\r\n            vocabList: vocab[];\r\n            vocabGenre: vocabGenre;\r\n        } = await res.json();\r\n\r\n        this.makeSound(result);\r\n        this.setState(result);\r\n    };\r\n\r\n    makeSound = ({\r\n        vocabList,\r\n        vocabGenre,\r\n    }: {\r\n        vocabList: vocab[];\r\n        vocabGenre: vocabGenre;\r\n    }) => {\r\n        const vocabSounds: sound[] = [];\r\n\r\n        vocabList.length > 0 &&\r\n            vocabList.forEach((v: vocab) => {\r\n                vocabSounds[v.vocabId] = getAudio({\r\n                    src: `${BLOB_URL}/vocabulary-quiz/audio/${vocabGenre.genreName}/Japanese-vocabulary${v.vocabId}.m4a`,\r\n                });\r\n            });\r\n\r\n        this.setState({ vocabSounds });\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.loadVocab();\r\n\r\n        for (let i = 0; i < 5; i++) {\r\n            setTimeout(() => {\r\n                this.changeScreenSize();\r\n            }, i * 1000);\r\n        }\r\n    }\r\n\r\n    changeScreenSize = () => {\r\n        if (this.state.screenWidth !== window.innerWidth) {\r\n            this.setState({\r\n                screenWidth: window.innerWidth,\r\n            });\r\n        }\r\n    };\r\n\r\n    changePage = (nextPage: Page) => {\r\n        this.setState({ currentPage: nextPage });\r\n    };\r\n\r\n    prepareRecordingAsync = async () => {\r\n        await videoRecorder.prepareRecordingAsync(\r\n            \"japanese_vocab_quiz_\" + this.state.genreName\r\n        );\r\n    };\r\n\r\n    render() {\r\n        const { music, startingVoice } = this;\r\n        const {\r\n            vocabGenre,\r\n            vocabList,\r\n            vocabSounds,\r\n            screenWidth,\r\n            currentPage,\r\n            season,\r\n            isOneSeason,\r\n            vocabSeasons,\r\n            isAutoRecord,\r\n        } = this.state;\r\n\r\n        const genreName =\r\n            (vocabGenre && vocabGenre.genreName) || this.state.genreName || \"\";\r\n        const titleToShowUpper = genreName\r\n            .split(\"_\")\r\n            .map(t => t && t[0].toUpperCase() + t.substr(1))\r\n            .join(\" \");\r\n\r\n        const setSeason = (season: string) => {\r\n            this.setState({ season });\r\n        };\r\n\r\n        const setVocabSeason = (vocabId: number, season: string) => {\r\n            const newVocabSeasons = [...vocabSeasons];\r\n            newVocabSeasons[vocabId] = season;\r\n            this.setState({ vocabSeasons: newVocabSeasons });\r\n        };\r\n\r\n        const setVocabSeasons = (vocabSeasons: string[]) => {\r\n            this.setState({ vocabSeasons });\r\n        };\r\n\r\n        let pageContent: React.ReactNode;\r\n        switch (currentPage) {\r\n            case Page.menu: {\r\n                pageContent = (\r\n                    <MenuPage\r\n                        changePage={this.changePage}\r\n                        vocabSounds={vocabSounds}\r\n                        music={music}\r\n                        startingVoice={startingVoice}\r\n                        setSeason={setSeason}\r\n                        setVocabSeason={setVocabSeason}\r\n                        setVocabSeasons={setVocabSeasons}\r\n                        vocabList={vocabList}\r\n                        isOneSeason={isOneSeason}\r\n                        setIsOneSeason={(isOneSeason: boolean) => {\r\n                            this.setState({ isOneSeason });\r\n                        }}\r\n                        vocabSeasons={vocabSeasons}\r\n                        startRecording={videoRecorder.startRecording}\r\n                        prepareRecordingAsync={this.prepareRecordingAsync}\r\n                        setIsAutoRecord={(isAutoRecord: boolean) => {\r\n                            this.setState({ isAutoRecord });\r\n                        }}\r\n                    />\r\n                );\r\n                break;\r\n            }\r\n            case Page.title: {\r\n                pageContent = (\r\n                    <TitlePage\r\n                        titleToShowUpper={titleToShowUpper}\r\n                        screenWidth={screenWidth}\r\n                        changePage={this.changePage}\r\n                        vocabList={vocabList}\r\n                        music={music}\r\n                        startingVoice={startingVoice}\r\n                        isAutoRecord={isAutoRecord}\r\n                    />\r\n                );\r\n                break;\r\n            }\r\n            case Page.list: {\r\n                pageContent = (\r\n                    <ListPage\r\n                        screenWidth={screenWidth}\r\n                        changePage={this.changePage}\r\n                        vocabList={vocabList}\r\n                        vocabSounds={vocabSounds.map(s => s?.audio)}\r\n                        vocabSeasons={vocabSeasons}\r\n                        setSeason={setSeason}\r\n                        isOneSeason={isOneSeason}\r\n                        season={season}\r\n                    />\r\n                );\r\n                break;\r\n            }\r\n            case Page.quiz: {\r\n                pageContent = (\r\n                    <QuizPage\r\n                        screenWidth={screenWidth}\r\n                        changePage={this.changePage}\r\n                        vocabList={vocabList}\r\n                        vocabSounds={vocabSounds.map(s => s?.audio)}\r\n                        vocabSeasons={vocabSeasons}\r\n                        setSeason={setSeason}\r\n                        isOneSeason={isOneSeason}\r\n                        season={season}\r\n                    />\r\n                );\r\n                break;\r\n            }\r\n            case Page.last: {\r\n                pageContent = (\r\n                    <LastPage\r\n                        screenWidth={screenWidth}\r\n                        changePage={this.changePage}\r\n                        music={music}\r\n                        stopRecording={videoRecorder.stopRecording}\r\n                    />\r\n                );\r\n                break;\r\n            }\r\n            case Page.thumbnail: {\r\n                pageContent = (\r\n                    <Thumbnail\r\n                        titleToShowUpper={titleToShowUpper}\r\n                        screenWidth={screenWidth}\r\n                        vocabList={vocabList}\r\n                    />\r\n                );\r\n                break;\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <Head noindex />\r\n                <HideHeaderAndFooter />\r\n                <div\r\n                    style={{\r\n                        position: \"absolute\",\r\n                        top: 0,\r\n                        left: 0,\r\n                        width: \"100%\",\r\n                        height: \"100%\",\r\n                        display: \"flex\",\r\n                        alignItems: \"center\",\r\n                        justifyContent: \"center\",\r\n                    }}\r\n                >\r\n                    {pageContent}\r\n                </div>\r\n                {currentPage !== Page.thumbnail && (\r\n                    <SeasonAnimation\r\n                        isFestivalHidden\r\n                        frequencySec={3}\r\n                        screenWidth={screenWidth}\r\n                        season={season}\r\n                    />\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction getAudio({ src }: { src: string }) {\r\n    const audio = new window.Audio();\r\n    audio.preload = \"none\";\r\n    audio.autoplay = false;\r\n    audio.src = src;\r\n    return { audio, playable: false };\r\n}\r\n\r\nexport default connect(\r\n    (state: ApplicationState) => state.vocabQuiz,\r\n    dispatch => bindActionCreators(vocabStore.actionCreators, dispatch)\r\n)(VocabVideo);\r\n","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\shared\\Helmet.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\Vocab\\Edit\\index.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\Vocab\\Merge\\index.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\Admin\\index.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\shared\\GoogleAd.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\shared\\FaceBook.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\shared\\InputRegisterToken.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\shared\\HideHeaderAndFooter\\HideFooter.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\Ninja\\Page1.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\VocabQuiz\\AllKanjiList.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\VocabQuiz\\AllVocabList.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\Ninja\\Page2.tsx",["930"],"import * as React from \"react\";\r\nimport { gameStorage } from \"../../../../../common/consts\";\r\nimport { Ninja } from \"../../Games/NinjaGame\";\r\nimport { NinjaChar } from \"./objs/ninja/ninja\";\r\nimport { Obj } from \"./objs/obj\";\r\n\r\n//オブジェクト素材画像----------------\r\n\r\n//岩\r\nconst imgRock = `${gameStorage}ninja1/objs/rock.png`;\r\n//岩（上下反転）\r\nconst imgRockR = `${gameStorage}ninja1/objs/rockRiverse.png`;\r\n//木\r\nconst imgTree1 = `${gameStorage}ninja1/objs/tree1.png`;\r\n//看板\r\nconst imgKanban1 = `${gameStorage}ninja1/objs/kanban1.png`;\r\n//看板の矢印\r\nconst imgArrow1 = `${gameStorage}ninja1/objs/arrow1.png`;\r\n//鳥居\r\nconst imgTorii = `${gameStorage}ninja1/objs/torii.png`;\r\n//Welcomeのフレーム\r\nconst imgFrame = `${gameStorage}ninja1/objs/frame.jpg`;\r\n//火\r\nconst imgfire1 = `${gameStorage}ninja1/objs/fire1.png`;\r\n//火（上下反転）\r\nconst imgfireR = `${gameStorage}ninja1/objs/fireReverse.png`;\r\n//ポチ\r\nconst imgPochi = `${gameStorage}ninja1/objs/pochi.png`;\r\n//閉じている巻物\r\nconst imgScroll = `${gameStorage}ninja1/objs/scrollObj.png`;\r\n//開いている巻物\r\nconst imgScrollOpen = `${gameStorage}ninja1/objs/scrollOpen.png`;\r\n//仏壇\r\nconst imgButsudan = `${gameStorage}ninja1/objs/butsudan.png`;\r\n//シノ（先輩くのいち）\r\nconst imgShino = `${gameStorage}ninja1/objs/shino.png`;\r\n//地蔵\r\nconst imgJizo = `${gameStorage}ninja1/objs/jizo.png`;\r\n//ハニワ\r\nconst imgHaniwa = `${gameStorage}ninja1/objs/haniwa.png`;\r\n//コウスケ\r\nconst imgKosuke = `${gameStorage}ninja1/objs/kosuke.png`;\r\n\r\n//背景画像//---------------------------\r\n\r\n//stage1\r\nconst furuie = `${gameStorage}ninja1/background/furuie5.jpg`;\r\n//stage2\r\nconst town1 = `${gameStorage}ninja1/background/town1.jpg`;\r\n//stage3\r\nconst ryokan1 = `${gameStorage}ninja1/background/ryokan1.jpg`;\r\n//stage4\r\nconst riverside1 = `${gameStorage}ninja1/background/riverside.jpg`;\r\n//stage5\r\nconst river1 = `${gameStorage}ninja1/background/river.jpg`;\r\n//stage6\r\nconst river2 = `${gameStorage}ninja1/background/river2.jpg`;\r\n//stage7\r\nconst jizos = `${gameStorage}ninja1/background/jizos.jpg`;\r\n//stage8\r\nconst gardianDog = `${gameStorage}ninja1/background/gardianDog.jpg`;\r\n//stage9\r\nconst shrine = `${gameStorage}ninja1/background/shrine.jpg`;\r\n//stage10\r\nconst skyStone = `${gameStorage}ninja1/background/sky1.jpg`;\r\n//stage11\r\nconst castleRiver = `${gameStorage}ninja1/background/castleRiver.jpg`;\r\n//stage12\r\nconst castleWall = `${gameStorage}ninja1/background/castleWall.jpg`;\r\n//stage13\r\nconst castle = `${gameStorage}ninja1/background/castle.jpg`;\r\n//stage14\r\nconst heaven = `${gameStorage}ninja1/background/heaven.png`;\r\n\r\nexport type EventFunc = (keyType: string | undefined) => void;\r\nexport interface Game extends Page2 {\r\n    onClickButton: EventFunc;\r\n    onMouseUp: EventFunc;\r\n    UL: number;\r\n    objs: any;\r\n}\r\n\r\nexport default class Page2 extends React.Component {\r\n    props: any;\r\n    state: any;\r\n\r\n    terminalPC?: boolean;\r\n    initFlag?: boolean;\r\n    prevStage?: number;\r\n    UL?: number;\r\n    ninja?: any;\r\n    objWalls?: {\r\n        leftWall: {\r\n            size: number;\r\n            posX: number;\r\n            posY: number;\r\n            zIndex: number;\r\n            onTouch: (ninja: any, from: any) => void;\r\n        };\r\n        rightWall: {\r\n            size: number;\r\n            posX: number;\r\n            posY: number;\r\n            zIndex: number;\r\n            onTouch: (ninja: any, from: any) => void;\r\n        };\r\n    };\r\n    readElementScroll?: string[];\r\n    objOutOfScreen?: {\r\n        outOfScreenLeft: {\r\n            size: number;\r\n            posX: number;\r\n            posY: number;\r\n            onTouch: () => void;\r\n            divType: string;\r\n        };\r\n        outOfScreenRight: {\r\n            size: number;\r\n            posX: number;\r\n            posY: number;\r\n            onTouch: () => void;\r\n            divType: string;\r\n        };\r\n        outOfScreenTop: any;\r\n        outOfScreenBottom: any;\r\n    };\r\n    objFloor?: {\r\n        floor1: {\r\n            size: number;\r\n            posX: number;\r\n            posY: number;\r\n            zIndex: number;\r\n            onTouch: (ninja: any, from: any) => void;\r\n        };\r\n        floor2: {\r\n            size: number;\r\n            posX: number;\r\n            posY: number;\r\n            zIndex: number;\r\n            onTouch: (ninja: any, from: any) => void;\r\n        };\r\n        floor3: any;\r\n        floor4: any;\r\n    };\r\n    backgroundSetting?: {\r\n        /* 背景画像 */\r\n        backgroundImage: string;\r\n        /* 画像を常に天地左右の中央に配置 */\r\n        backgroundPosition: string;\r\n        /* 画像をタイル状に繰り返し表示しない */\r\n        backgroundRepeat: string;\r\n        /* 表示するコンテナの大きさに基づいて、背景画像を調整 */\r\n        backgroundSize: string;\r\n        /* 背景画像が読み込まれる前に表示される背景のカラー */\r\n        backgroundColor: string;\r\n    };\r\n    consts: any;\r\n    lButton?: boolean;\r\n    rButton?: boolean;\r\n    jButton?: boolean;\r\n    pageStyle: any;\r\n    timerId?: number;\r\n    objs?: any;\r\n    closeScroll?: boolean;\r\n    closeButton?: boolean;\r\n    bgImg: any;\r\n\r\n    UNSAFE_componentWillMount() {\r\n        //(PC) or (スマホ/タブレット) 判定\r\n        this.terminalPC = this.checkTerminalPC();\r\n\r\n        //初期描画の時のみtrueとする（2回目以降はfalse）\r\n        //タイムステップごとの処理の登録を1回のみ行うために用いる\r\n        this.initFlag = true;\r\n\r\n        //前のステージ（ステージ変更判定に利用）\r\n        this.prevStage = 0;\r\n\r\n        //画面の高さと幅を取得\r\n        let pageSize = this.getWindowSize();\r\n\r\n        //【Unit Length】画面の高さを90等分した長さを、このゲームの単位長さとする\r\n        this.UL = pageSize.pageHeight / 90;\r\n\r\n        //前のステージから受け取った忍者の初期値を設定\r\n        this.ninja = this.props.ninja;\r\n\r\n        this.readElementScroll = this.props.readElementScroll;\r\n\r\n        this.ninja.game = this;\r\n\r\n        //画面外を黒くする要素\r\n        this.objOutOfScreen = {\r\n            outOfScreenLeft: {\r\n                size: 300,\r\n                posX: -300,\r\n                posY: -200,\r\n                onTouch: onTouchNothing,\r\n                divType: \"outOfScreen\",\r\n            },\r\n            outOfScreenRight: {\r\n                size: 300,\r\n                posX: 160,\r\n                posY: -200,\r\n                onTouch: onTouchNothing,\r\n                divType: \"outOfScreen\",\r\n            },\r\n            outOfScreenTop: {\r\n                size: 260,\r\n                posX: -50,\r\n                posY: -260,\r\n                onTouch: onTouchNothing,\r\n                divType: \"outOfScreen\",\r\n            },\r\n            outOfScreenBottom: {\r\n                size: 260,\r\n                posX: -50,\r\n                posY: 90,\r\n                onTouch: onTouchNothing,\r\n                divType: \"outOfScreen\",\r\n            },\r\n        };\r\n\r\n        //全ステージ共通の壁（render内で設定）\r\n        this.objWalls = {\r\n            leftWall: {\r\n                size: 300,\r\n                posX: -310,\r\n                posY: -200,\r\n                zIndex: 30,\r\n                onTouch: onTouchBlock,\r\n            },\r\n            rightWall: {\r\n                size: 300,\r\n                posX: 170,\r\n                posY: -200,\r\n                zIndex: 30,\r\n                onTouch: onTouchBlock,\r\n            },\r\n        };\r\n\r\n        //床（必要な場合、render内で設定）\r\n        this.objFloor = {\r\n            floor1: {\r\n                size: 200,\r\n                posX: -20,\r\n                posY: 79,\r\n                zIndex: 30,\r\n                onTouch: onTouchBlock,\r\n            },\r\n            floor2: {\r\n                size: 200,\r\n                posX: -20,\r\n                posY: 77,\r\n                zIndex: 30,\r\n                onTouch: onTouchBlock,\r\n            },\r\n            floor3: {\r\n                size: 200,\r\n                posX: -20,\r\n                posY: 76,\r\n                zIndex: 30,\r\n                onTouch: onTouchBlock,\r\n            },\r\n            floor4: {\r\n                size: 200,\r\n                posX: -20,\r\n                posY: 75,\r\n                zIndex: 30,\r\n                onTouch: onTouchBlock,\r\n            },\r\n        };\r\n\r\n        //背景の初期設定\r\n        //        this.bgImg = furuie;\r\n        this.backgroundSetting = {\r\n            /* 背景画像 */\r\n            backgroundImage: `url(${furuie})`,\r\n\r\n            /* 画像を常に天地左右の中央に配置 */\r\n            backgroundPosition: \"center center\",\r\n\r\n            /* 画像をタイル状に繰り返し表示しない */\r\n            backgroundRepeat: \"no-repeat\",\r\n\r\n            /* 表示するコンテナの大きさに基づいて、背景画像を調整 */\r\n            backgroundSize: \"cover\",\r\n\r\n            /* 背景画像が読み込まれる前に表示される背景のカラー */\r\n            backgroundColor: \"black\",\r\n        };\r\n\r\n        // ------------------------------------------------------------\r\n        // 定数設定\r\n        // ------------------------------------------------------------\r\n        if (this.props.language === \"Japanese\") {\r\n            this.consts = {\r\n                timeStep: 100,\r\n\r\n                //操作ボタン\r\n                BUTTON: \"btn btn-info btn-lg btn-block\",\r\n\r\n                //スタートと同時に表示される巻物\r\n                FIRST_SCROLL_TITLE: \"拙者の屋敷に参るがよい\",\r\n                FIRST_SCROLL_MESSAGE:\r\n                    \"よく来たな、異国の者よ。我が名はポチ。忍者マスターである。\\n\" +\r\n                    \"おぬしは忍術を学ぶため、はるばるこの地へ来たと聞いている。\\n\" +\r\n                    \"画面下の [＜] ボタンを押し、拙者の家まで来るがよい。\",\r\n\r\n                //ジャンプの説明\r\n                JUMP_INSTRUCTION_TITLE: \"ジャンプの方法\",\r\n                JUMP_INSTRUCTION_MESSAGE:\r\n                    \"画面下の [＜] ボタンを押しながら、\\n\" +\r\n                    \"[ ↑jump↑ ] ボタンを押してください。\\n\",\r\n\r\n                //ポチの家でポチに触った時のメッセージ\r\n                POCHI_SCROLL_TITLE: \"異国の地より、よく参った！\",\r\n                POCHI_SCROLL_MESSAGE:\r\n                    \"我が名はポチ！\\n\" +\r\n                    \"忍者マスターになるには [火] [風] [水] [地] の4つの巻物を集めねばならぬ。\\n\" +\r\n                    \"火の書は既に拙者が持っている。そこの仏壇にある巻物に触れてみるがよい。\",\r\n\r\n                //城でポチに触った時のメッセージ\r\n                POCHI_SCROLL2_TITLE: \"よくぞここまで成長した！\",\r\n                POCHI_SCROLL2_MESSAGE:\r\n                    \"これがおぬしの最後の巻物、\\n\" +\r\n                    \"「地の書」である！\\n\" +\r\n                    \"手にするがよい！\",\r\n\r\n                //火の書（ポチの家の仏壇）\r\n                FIRE_SCROLL_TITLE: \"火の書\",\r\n                FIRE_SCROLL_MESSAGE:\r\n                    \"火の力が宿った巻物。\\n\" +\r\n                    \"炎の上昇気流を利用して、飛び上がることができる。\\n\" +\r\n                    \"炎に触れてみるがよい。\",\r\n\r\n                //風の書（宿の屋根の上）\r\n                AIR_SCROLL_TITLE: \"風の書\",\r\n                AIR_SCROLL_MESSAGE:\r\n                    \"風の力が宿った巻物\\n\" +\r\n                    \"空中を自由に跳びまわることができる。\\n\" +\r\n                    \"空中でもう一度ジャンプボタンを押してみるがよい。\",\r\n\r\n                //水の書（宇宙の岩の上）\r\n                WATER_SCROLL_TITLE: \"水の書\",\r\n                WATER_SCROLL_MESSAGE:\r\n                    \"水の力が宿った巻物。\\n\" +\r\n                    \"水の流れの影響を受けず、水中を自由に歩き回ることができる。\\n\" +\r\n                    \"水に潜ってみるがよい。\",\r\n\r\n                //地の書（城の岩の上）\r\n                EARTH_SCROLL_TITLE: \"地の書\",\r\n                EARTH_SCROLL_MESSAGE:\r\n                    \"大地の力が宿った巻物。\\n\" +\r\n                    \"泥のハニワを作ることができる。\\n\" +\r\n                    \"[＜] ボタンと [＞] ボタンを同時に押してみるがよい。\",\r\n\r\n                //河原の看板\r\n                KAWARA_SCROLL_TITLE: \"急流注意！\",\r\n                KAWARA_SCROLL_MESSAGE:\r\n                    \"川の流れが激しいため、普通の者は進むべからず。\\n\" +\r\n                    \"水の力を修めし忍者のみ、進むべし。\",\r\n\r\n                //川でシノに触った時のメッセージ\r\n                SHINO_SCROLL_TITLE: \"こんにちは\",\r\n                SHINO_SCROLL_MESSAGE:\r\n                    \"あたいはシノ。あんたの先輩だよ。\\n\" +\r\n                    \"この先に進むと城がある。でも、たどり着くのは難しいよ。\\n\" +\r\n                    \"ポチ師匠の家から、右に飛んでみた？\",\r\n\r\n                //鳥居の上でシノに触った時のメッセージ\r\n                SHINO_SCROLL2_TITLE: \"調子はどうだい？\",\r\n                SHINO_SCROLL2_MESSAGE:\r\n                    \"もう少し右に行くと、風の書が手に入るよ。\\n\" +\r\n                    \"風の書を読んだら、 [↑jump↑] ボタンを空中で押してごらん。\\n\" +\r\n                    \"空中を自由に進めるよ！\",\r\n\r\n                //水路の岩肌のイクノに触った時のメッセージ\r\n                SHINO_SCROLL3_TITLE: \"川の流れが強いね\",\r\n                SHINO_SCROLL3_MESSAGE:\r\n                    \"空中を歩けるようになったら、「狛犬神社」に行ってみると良いよ。\\n\" +\r\n                    \"そこで「水の書」が手に入ると言われている。\\n\" +\r\n                    \"ポチ師匠の家から、ひたすら右に進んでごらん。\",\r\n\r\n                //城でシノに触った時のメッセージ\r\n                SHINO_SCROLL4_TITLE: \"遂にやったわね！\",\r\n                SHINO_SCROLL4_MESSAGE:\r\n                    \"全ての忍術をマスターしたね！\\n\" +\r\n                    \"これであなたも忍者マスターよ。\\n\" +\r\n                    \"忍者マスターになったら、狛犬神社の巨大な狛犬に会いに行ってごらん…\",\r\n\r\n                //大きな狛犬の前でシノに触った時のメッセージ\r\n                SHINO_SCROLL5_TITLE: \"こんな噂を聞いたことがある…\",\r\n                SHINO_SCROLL5_MESSAGE:\r\n                    \"忍者マスターになったら、\\n\" +\r\n                    \"この巨大な狛犬が、別の世界に連れて行ってくれるとか…\",\r\n\r\n                //神社入り口のメッセージ\r\n                SHRINE_ENTRANCE_TITLE: \"この先、「狛犬神社」\",\r\n                SHRINE_ENTRANCE_MESSAGE:\r\n                    \"お地蔵様に触れると、狛犬が怒り、火を噴くので注意\",\r\n\r\n                //天界でコウスケに触った時のメッセージ\r\n                KOSUKE_SCROLL_TITLE: \"こんにちは、僕はコウスケ！\",\r\n                KOSUKE_SCROLL_MESSAGE:\r\n                    \"このゲームを作りし者さ！\\n\" +\r\n                    \"僕のゲームで遊んでくれてありがとう！\\n\" +\r\n                    \"次のチャプターでは、炎を使って敵と戦おう！\",\r\n            };\r\n        } else {\r\n            this.consts = {\r\n                timeStep: 100,\r\n\r\n                //操作ボタン\r\n                BUTTON: \"btn btn-info btn-lg btn-block\",\r\n\r\n                //スタートと同時に表示される巻物\r\n                FIRST_SCROLL_TITLE: \"Come to my house!\",\r\n                FIRST_SCROLL_MESSAGE:\r\n                    \"Hello, newbie! My name is Pochi. I am a Ninja Master!\\n\" +\r\n                    \"I heard you came to Japan to learn Ninja Skills!\\n\" +\r\n                    \"Please come to my house by pushing [＜] button at the bottom of the screen!\",\r\n\r\n                //ジャンプの説明\r\n                JUMP_INSTRUCTION_TITLE: \"How to jump!\",\r\n                JUMP_INSTRUCTION_MESSAGE:\r\n                    \"Keep pushing the [＜] button,\\n\" +\r\n                    \"and push [ ↑jump↑ ] button!\\n\",\r\n\r\n                //ポチの家でポチに触った時のメッセージ\r\n                POCHI_SCROLL_TITLE: \"Nice to meet you!\",\r\n                POCHI_SCROLL_MESSAGE:\r\n                    \"I'm Pochi!\\n\" +\r\n                    \"To become a Ninja Master, you should collect the scrolls of the four elements!\\n\" +\r\n                    \"I have one. Please grab the scroll at the altar, and read!\",\r\n\r\n                //城でポチに触った時のメッセージ\r\n                POCHI_SCROLL2_TITLE: \"Congratulation!\",\r\n                POCHI_SCROLL2_MESSAGE:\r\n                    \"Well done!\\n\" +\r\n                    \"This is your final scroll.\\n\" +\r\n                    \"Please collect!\",\r\n\r\n                //火の書（ポチの家の仏壇）\r\n                FIRE_SCROLL_TITLE: \"火の書\",\r\n                FIRE_SCROLL_MESSAGE:\r\n                    \"This is the Fire Element Scroll.\\n\" +\r\n                    \"You can learn 'Fire Jump' from this scroll.\\n\" +\r\n                    \"You can fly using updraft from fire.\",\r\n\r\n                //風の書（宿の屋根の上）\r\n                AIR_SCROLL_TITLE: \"風の書\",\r\n                AIR_SCROLL_MESSAGE:\r\n                    \"This is the scroll of the air element.\\n\" +\r\n                    \"You can learn 'Air Walk' from this scroll.\\n\" +\r\n                    \"You can jump while in the air!\",\r\n\r\n                //水の書（宇宙の岩の上）\r\n                WATER_SCROLL_TITLE: \"水の書\",\r\n                WATER_SCROLL_MESSAGE:\r\n                    \"This is the scroll of the water element.\\n\" +\r\n                    \"You can learn 'Water Spider' from this scroll.\\n\" +\r\n                    \"You can walk in water normally!\",\r\n\r\n                //地の書（城の岩の上）\r\n                EARTH_SCROLL_TITLE: \"地の書\",\r\n                EARTH_SCROLL_MESSAGE:\r\n                    \"This is the scroll of the earth element.\\n\" +\r\n                    \"You can make a mud doll.\\n\" +\r\n                    \"Please push [＜] button and [＞] button at the same time!\",\r\n\r\n                //河原の看板\r\n                KAWARA_SCROLL_TITLE: \"Dangerous Waters!\",\r\n                KAWARA_SCROLL_MESSAGE:\r\n                    \"Caution: Normal people can not go this way,\\n\" +\r\n                    \"water flow is too strong.\",\r\n\r\n                //川でシノに触った時のメッセージ\r\n                SHINO_SCROLL_TITLE: \"Hi\",\r\n                SHINO_SCROLL_MESSAGE:\r\n                    \"I'm your senior, Shino.\\n\" +\r\n                    \"If you go forward, there will be a castle. However, at this time it's too difficult.\\n\" +\r\n                    \"Touch the fire while pushing [＞] button at Master Pochi's house.\",\r\n\r\n                //鳥居の上でシノに触った時のメッセージ\r\n                SHINO_SCROLL2_TITLE: \"How are you?\",\r\n                SHINO_SCROLL2_MESSAGE:\r\n                    \"If you keep right, you can get the Air Element Scroll.\\n\" +\r\n                    \"After getting the scroll, please try to push the [↑jump↑] button twice.\\n\" +\r\n                    \"You can jump in the air twice!\",\r\n\r\n                //水路の岩肌のシノに触った時のメッセージ\r\n                SHINO_SCROLL3_TITLE: \"Hello!\",\r\n                SHINO_SCROLL3_MESSAGE:\r\n                    \"After learning to jump in the air,\\n\" +\r\n                    \"please go to the Shrine of Guardian Dogs to get the Water Element Scroll.\\n\" +\r\n                    \"To go to the shrine, keep going right from Master Pochi's house.\",\r\n\r\n                //城でシノに触った時のメッセージ\r\n                SHINO_SCROLL4_TITLE: \"You did it!\",\r\n                SHINO_SCROLL4_MESSAGE:\r\n                    \"You gained all four element skills!\\n\" +\r\n                    \"Now you are a Ninja Master!\\n\" +\r\n                    \"Ninja Masters should go to meet the huge Guardian Dog of the shrine...\",\r\n\r\n                //大きな狛犬の前でシノに触った時のメッセージ\r\n                SHINO_SCROLL5_TITLE: \"There is a regend...\",\r\n                SHINO_SCROLL5_MESSAGE:\r\n                    \"It is said that the big Gardian Dog can bring you to a secret world\\n\" +\r\n                    \"after becoming a Ninja Master...\",\r\n\r\n                //神社入り口のメッセージ\r\n                SHRINE_ENTRANCE_TITLE: \"Shrine of Guardian Dogs\",\r\n                SHRINE_ENTRANCE_MESSAGE:\r\n                    \"If you touch the Ksitigarbha in the shrine,\\n\" +\r\n                    \"The Guardian Dogs will be angry.\",\r\n\r\n                //天界でコウスケに触った時のメッセージ\r\n                KOSUKE_SCROLL_TITLE: \"Hello, I'm Kosuke!\",\r\n                KOSUKE_SCROLL_MESSAGE:\r\n                    \"I am the creator of this game!\\n\" +\r\n                    \"Thank you for playing my game!\\n\" +\r\n                    \"In the next chapter, you should defeat the enemies using fire!\",\r\n            };\r\n        }\r\n\r\n        // ------------------------------------------------------------\r\n        // ステート設定\r\n        // ------------------------------------------------------------\r\n        this.setState({\r\n            screenStyle: {\r\n                width: pageSize.pageWidth,\r\n                height: pageSize.pageHeight - 15 * this.UL,\r\n                ...this.backgroundSetting,\r\n            },\r\n            ninjaStat: {\r\n                left: true,\r\n                ninjaX: this.ninja.posX * this.UL,\r\n                ninjaY: this.ninja.posY * this.UL,\r\n            },\r\n        });\r\n\r\n        //←ボタン押下判定\r\n        this.lButton = false;\r\n        //→ボタン押下判定\r\n        this.rButton = false;\r\n        //jumpボタン押下判定\r\n        this.jButton = false;\r\n\r\n        //キーボード押下時イベントセット\r\n        this.setKeyboardEvent(this);\r\n    }\r\n\r\n    checkTerminalPC() {\r\n        // ------------------------------------------------------------\r\n        // (PC) or (スマホ/タブレット) 判定\r\n        // ------------------------------------------------------------\r\n        if (navigator.userAgent.match(/(iPhone|iPad|iPod|Android)/i)) {\r\n            // スマホ・タブレット（iOS・Android）の場合\r\n            return false;\r\n        } else {\r\n            // PCの場合\r\n            return true;\r\n        }\r\n    }\r\n\r\n    //---------------↓　resize　↓---------------\r\n    getWindowSize() {\r\n        let pageWidth: number, pageHeight: number;\r\n        let screenWidth = window.innerWidth;\r\n        let screenHeight = window.innerHeight;\r\n\r\n        if (screenWidth > screenHeight) {\r\n            //横長\r\n            pageHeight = screenHeight;\r\n            pageWidth = (pageHeight * 16) / 9;\r\n\r\n            if (pageWidth > screenWidth) {\r\n                //横がはみ出たら(正方形に近い画面)\r\n                pageWidth = screenWidth;\r\n                pageHeight = (pageWidth * 9) / 16;\r\n\r\n                this.pageStyle = {\r\n                    //ページの余白設定\r\n                    position: \"absolute\",\r\n                    top: (screenHeight - pageHeight) / 2,\r\n                };\r\n            } else {\r\n                this.pageStyle = {\r\n                    //ページの余白設定\r\n                    position: \"absolute\",\r\n                    left: (screenWidth - pageWidth) / 2,\r\n                };\r\n            }\r\n        } else {\r\n            //縦長\r\n            pageHeight = (screenWidth * 9) / 10;\r\n            pageWidth = (pageHeight * 16) / 9;\r\n\r\n            if (pageWidth > (screenHeight * 9) / 10) {\r\n                //横がはみ出そうだったら(正方形に近い画面)\r\n                pageWidth = (screenHeight * 9) / 10;\r\n                pageHeight = (pageWidth * 9) / 16;\r\n\r\n                this.pageStyle = {\r\n                    //ページの余白設定\r\n                    position: \"absolute\",\r\n                    left: (screenWidth + pageHeight) / 2,\r\n                    top: screenHeight / 20,\r\n                };\r\n            } else {\r\n                this.pageStyle = {\r\n                    //ページの余白設定\r\n                    position: \"absolute\",\r\n                    left: (screenWidth * 95) / 100,\r\n                    top: (screenHeight - pageWidth) / 2,\r\n                };\r\n            }\r\n        }\r\n\r\n        return { pageWidth, pageHeight };\r\n    }\r\n    //---------------↑　resize　↑---------------\r\n\r\n    onLoadPage() {\r\n        //初回描画時のみ処理の登録を行う\r\n        if (this.initFlag) {\r\n            //タイムステップ毎に処理を呼び出す\r\n            this.timerId = window.setInterval(() => {\r\n                //タイムステップごとの計算\r\n\r\n                /* ↓　物体速度・位置計算　↓ */\r\n\r\n                //忍者の画像の向き\r\n                let boolLeft = this.state.ninjaStat.left;\r\n\r\n                //ボタン押下判定\r\n                if (this.lButton === false && this.rButton === false) {\r\n                    this.ninja.speedX = 0;\r\n                } else {\r\n                    if (this.lButton === true) {\r\n                        this.ninja.speedX = -6;\r\n                        boolLeft = true; //画像左向き\r\n                    }\r\n                    if (this.rButton === true) {\r\n                        this.ninja.speedX = 6;\r\n                        boolLeft = false; //画像右向き\r\n                    }\r\n                    if (this.lButton === true && this.rButton === true) {\r\n                        //右と左同時押しでハニワ生成\r\n                        if (\r\n                            this.ninja.readScroll.indexOf(\r\n                                this.ninja.game.consts.EARTH_SCROLL_TITLE\r\n                            ) > 0\r\n                        ) {\r\n                            //地の書を既に読んでいる場合\r\n                            this.objs.haniwa = {\r\n                                size: 12,\r\n                                posX: this.ninja.posX,\r\n                                posY: this.ninja.posY,\r\n                                zIndex: 20,\r\n                                img: imgHaniwa,\r\n                                onTouch: onTouchNothing,\r\n                                haniwa: true,\r\n                            };\r\n                        }\r\n                    }\r\n                }\r\n\r\n                //前タイムステップでジャンプをした時のため、元に戻す\r\n                this.closeScroll = false;\r\n\r\n                if (this.jButton === true) {\r\n                    if (this.ninja.speedY === 0) {\r\n                        //通常ジャンプ\r\n                        this.ninja.speedY = -11;\r\n\r\n                        //ジャンプ時に巻物を閉じる\r\n                        this.closeScroll = true;\r\n                    }\r\n                    if (\r\n                        this.ninja.readScroll.indexOf(\r\n                            this.ninja.game.consts.AIR_SCROLL_TITLE\r\n                        ) > 0\r\n                    ) {\r\n                        //風の書を読んでいる\r\n                        if (this.ninja.posY > 14) {\r\n                            //2段ジャンプ実行限界高度に達していない\r\n                            this.ninja.speedY = -11;\r\n                        }\r\n                    }\r\n                    this.jButton = false;\r\n                }\r\n\r\n                if (this.closeButton === true) {\r\n                    //巻物を閉じる（Enterキー等押下時）\r\n                    this.closeScroll = true;\r\n                }\r\n\r\n                //重力加速度\r\n                this.ninja.speedY += 2.1;\r\n\r\n                //落下速度限界\r\n                if (this.ninja.speedY > 9) {\r\n                    this.ninja.speedY = 9;\r\n                }\r\n\r\n                //位置計算\r\n                this.ninja.posX += this.ninja.speedX;\r\n                this.ninja.posY += this.ninja.speedY;\r\n\r\n                //オブジェクトとの接触判定\r\n\r\n                //忍者の上下左右の端の位置\r\n                let ninjaLeft = this.ninja.posX;\r\n                let ninjaRight = ninjaLeft + this.ninja.size;\r\n                let ninjaTop = this.ninja.posY;\r\n                let ninjaFoot = ninjaTop + this.ninja.size;\r\n\r\n                for (let key in this.objs) {\r\n                    //途中でステージ遷移したら、関数を中止するためのフラグ\r\n                    let stageChangedFlag = \"\";\r\n\r\n                    //オブジェクトの上下左右の端の位置\r\n                    let objLeft = this.objs[key].posX;\r\n                    let objRight = objLeft + this.objs[key].size;\r\n                    let objTop = this.objs[key].posY;\r\n                    let objFoot = objTop + this.objs[key].size;\r\n\r\n                    //忍者が上から\r\n                    if (\r\n                        checkRelativityLeftAndTop(\r\n                            ninjaTop,\r\n                            objTop,\r\n                            objLeft,\r\n                            objRight,\r\n                            ninjaFoot,\r\n                            ninjaLeft,\r\n                            ninjaRight,\r\n                            this.ninja.size\r\n                        ) === true\r\n                    ) {\r\n                        stageChangedFlag = this.objs[key].onTouch(\r\n                            this.ninja,\r\n                            \"upper\"\r\n                        );\r\n                    }\r\n                    //忍者が右から\r\n                    if (\r\n                        checkRelativityRightAndFoot(\r\n                            objRight,\r\n                            ninjaRight,\r\n                            objTop,\r\n                            objFoot,\r\n                            ninjaLeft,\r\n                            ninjaTop,\r\n                            ninjaFoot,\r\n                            this.ninja.size\r\n                        ) === true\r\n                    ) {\r\n                        stageChangedFlag = this.objs[key].onTouch(\r\n                            this.ninja,\r\n                            \"right\"\r\n                        );\r\n                    }\r\n                    //忍者が下から\r\n                    if (\r\n                        checkRelativityRightAndFoot(\r\n                            objFoot,\r\n                            ninjaFoot,\r\n                            objLeft,\r\n                            objRight,\r\n                            ninjaTop,\r\n                            ninjaLeft,\r\n                            ninjaRight,\r\n                            this.ninja.size\r\n                        ) === true\r\n                    ) {\r\n                        stageChangedFlag = this.objs[key].onTouch(\r\n                            this.ninja,\r\n                            \"lower\"\r\n                        );\r\n                    }\r\n                    //忍者が左から\r\n                    if (\r\n                        checkRelativityLeftAndTop(\r\n                            ninjaLeft,\r\n                            objLeft,\r\n                            objTop,\r\n                            objFoot,\r\n                            ninjaRight,\r\n                            ninjaTop,\r\n                            ninjaFoot,\r\n                            this.ninja.size\r\n                        ) === true\r\n                    ) {\r\n                        stageChangedFlag = this.objs[key].onTouch(\r\n                            this.ninja,\r\n                            \"left\"\r\n                        );\r\n                    }\r\n\r\n                    //ステージ遷移をしていたら、関数中止\r\n                    if (stageChangedFlag && stageChangedFlag === \"changed\") {\r\n                        return;\r\n                    }\r\n                }\r\n                /* ↑　物体速度・位置計算　↑ */\r\n\r\n                //ページサイズ取得（ウィンドウサイズが変更された時のため）\r\n                let pageSize = this.getWindowSize();\r\n\r\n                //画面の高さを90等分した長さを、このゲームの「単位長さ」とする\r\n                this.UL = pageSize.pageHeight / 90;\r\n\r\n                //物体の位置などを更新し、再描画\r\n                this.setState({\r\n                    screenStyle: {\r\n                        width: pageSize.pageWidth,\r\n                        height: pageSize.pageHeight - 15 * this.UL,\r\n                        ...this.backgroundSetting,\r\n                    },\r\n                    ninjaStat: {\r\n                        left: boolLeft,\r\n                        ninjaX: this.ninja.posX * this.UL,\r\n                        ninjaY: this.ninja.posY * this.UL,\r\n                    },\r\n                });\r\n            }, this.consts.timeStep);\r\n\r\n            //2回目以降の描画時はタイムステップごとの処理を重複して登録しないようにする\r\n            this.initFlag = false;\r\n        }\r\n    }\r\n\r\n    setKeyboardEvent(objGame: any) {\r\n        // ------------------------------------------------------------\r\n        // キーボードを押したときに実行されるイベント\r\n        // ------------------------------------------------------------\r\n        document.onkeydown = function (e: any) {\r\n            if (!e) e = window.event; // レガシー\r\n\r\n            // ------------------------------------------------------------\r\n            // 入力情報を取得\r\n            // ------------------------------------------------------------\r\n            // キーコード\r\n            let keyCode = e.keyCode;\r\n            let keyType;\r\n            if (keyCode === 37) {\r\n                keyType = \"left\";\r\n            } else if (keyCode === 39) {\r\n                keyType = \"right\";\r\n            } else if (keyCode === 38) {\r\n                keyType = \"jump\";\r\n            } else if (keyCode === 32) {\r\n                keyType = \"jump\";\r\n            } else if (\r\n                keyCode === 13 ||\r\n                keyCode === 8 ||\r\n                keyCode === 46 ||\r\n                keyCode === 27\r\n            ) {\r\n                keyType = \"close\";\r\n            }\r\n            objGame.onClickButton(keyType);\r\n        };\r\n\r\n        // ------------------------------------------------------------\r\n        // キーボードを離したときに実行されるイベント\r\n        // ------------------------------------------------------------\r\n        document.onkeyup = function (e: any) {\r\n            if (!e) e = window.event; // レガシー\r\n\r\n            // キーコード\r\n            let keyCode = e.keyCode;\r\n            let keyType;\r\n            if (keyCode === 37) {\r\n                keyType = \"left\";\r\n            } else if (keyCode === 39) {\r\n                keyType = \"right\";\r\n            } else if (keyCode === 38) {\r\n                keyType = \"jump\";\r\n            } else if (keyCode === 32) {\r\n                keyType = \"jump\";\r\n            } else if (\r\n                keyCode === 13 ||\r\n                keyCode === 8 ||\r\n                keyCode === 46 ||\r\n                keyCode === 27\r\n            ) {\r\n                keyType = \"close\";\r\n            }\r\n            objGame.onMouseUp(keyType);\r\n        };\r\n    }\r\n\r\n    //ボタン押下時処理\r\n    onClickButton(btnType: string) {\r\n        if (btnType === \"left\") {\r\n            //←ボタン押下判定\r\n            this.lButton = true;\r\n        } else if (btnType === \"right\") {\r\n            //→ボタン押下判定\r\n            this.rButton = true;\r\n        } else if (btnType === \"jump\") {\r\n            //jumpボタン押下判定\r\n            this.jButton = true;\r\n        } else if (btnType === \"close\") {\r\n            //closeキー押下判定（Enter、Delete等）\r\n            this.closeButton = true;\r\n        }\r\n    }\r\n    //ボタン押下終了時処理\r\n    onMouseUp(btnType: string) {\r\n        if (btnType === \"left\") {\r\n            //←ボタン押下判定\r\n            this.lButton = false;\r\n        } else if (btnType === \"right\") {\r\n            //→ボタン押下判定\r\n            this.rButton = false;\r\n        } else if (btnType === \"close\") {\r\n            //closeキー押下判定（Enter、Delete等）\r\n            this.closeButton = false;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if (this.prevStage !== this.props.stage) {\r\n            //ステージ変更時のみ1回実行\r\n\r\n            if (this.props.stage === 1) {\r\n                // ------------------------------------------------------------\r\n                // ステージ1（出発の宿）\r\n                // ------------------------------------------------------------\r\n                this.objs = {\r\n                    ...this.objOutOfScreen,\r\n                    ...this.objWalls,\r\n                    ...this.objFloor,\r\n\r\n                    openFirstScroll: {\r\n                        size: 10,\r\n                        posX: 145,\r\n                        posY: -20,\r\n                        zIndex: 20,\r\n                        onTouch: onTouchScrollOpener,\r\n                        openTargetTitle: this.consts.FIRST_SCROLL_TITLE,\r\n                    },\r\n                    firstScroll: {\r\n                        size: 150,\r\n                        posX: 5,\r\n                        posY: 5,\r\n                        zIndex: 1000,\r\n                        img: imgScrollOpen,\r\n                        scroll: true,\r\n                        visible: false,\r\n                        onTouch: onTouchNothing,\r\n                        title: this.consts.FIRST_SCROLL_TITLE,\r\n                        message: this.consts.FIRST_SCROLL_MESSAGE,\r\n                        fontSize: 3,\r\n                        speakerImg: imgPochi,\r\n                    },\r\n                    jumpInstruction: {\r\n                        size: 150,\r\n                        posX: 5,\r\n                        posY: 5,\r\n                        zIndex: 1000,\r\n                        img: imgScrollOpen,\r\n                        scroll: true,\r\n                        visible: false,\r\n                        onTouch: onTouchNothing,\r\n                        title: this.consts.JUMP_INSTRUCTION_TITLE,\r\n                        message: this.consts.JUMP_INSTRUCTION_MESSAGE,\r\n                        fontSize: 3,\r\n                    },\r\n                    rock1: {\r\n                        size: 10,\r\n                        posX: 100,\r\n                        posY: 70,\r\n                        zIndex: 20,\r\n                        img: imgRock,\r\n                        onTouch: onTouchScrollOpener,\r\n                        openTargetTitle: this.consts.JUMP_INSTRUCTION_TITLE,\r\n                    },\r\n                    rock2: {\r\n                        size: 17,\r\n                        posX: 90,\r\n                        posY: 65,\r\n                        zIndex: 20,\r\n                        img: imgRock,\r\n                        onTouch: onTouchBlock,\r\n                    },\r\n                    kanban1Pic: {\r\n                        size: 20,\r\n                        posX: 7,\r\n                        posY: 60,\r\n                        zIndex: 10,\r\n                        img: imgKanban1,\r\n                        onTouch: onTouchNothing,\r\n                    },\r\n                    kanban1ArrowPic: {\r\n                        size: 10,\r\n                        posX: 11,\r\n                        posY: 63,\r\n                        boolLeft: true,\r\n                        zIndex: 11,\r\n                        img: imgArrow1,\r\n                        onTouch: onTouchNothing,\r\n                    },\r\n                    airScroll: {\r\n                        size: 10,\r\n                        posX: 11,\r\n                        posY: 13,\r\n                        boolLeft: true,\r\n                        zIndex: 22,\r\n                        img: imgScroll,\r\n                        onTouch: onTouchScrollOpener,\r\n                        openTargetTitle: this.consts.AIR_SCROLL_TITLE,\r\n                    },\r\n                    airScrollOpened: {\r\n                        size: 150,\r\n                        posX: 5,\r\n                        posY: 5,\r\n                        zIndex: 1000,\r\n                        img: imgScrollOpen,\r\n                        scroll: true,\r\n                        visible: false,\r\n                        onTouch: onTouchNothing,\r\n                        title: this.consts.AIR_SCROLL_TITLE,\r\n                        message: this.consts.AIR_SCROLL_MESSAGE,\r\n                        fontSize: 3,\r\n                    },\r\n                    stepUnderAirScroll: {\r\n                        size: 40,\r\n                        posX: 0,\r\n                        posY: 23,\r\n                        boolLeft: true,\r\n                        zIndex: 22,\r\n                        onTouch: onTouchTree,\r\n                        openTargetTitle: this.consts.AIR_SCROLL_TITLE,\r\n                    },\r\n                    rightGateWall: {\r\n                        size: 300,\r\n                        posX: 160,\r\n                        posY: -200,\r\n                        zIndex: 30,\r\n                        next: 7,\r\n                        onTouch: onTouchGateWall,\r\n                        changeStage: this.props.changeStage,\r\n                    },\r\n                    leftGateWall: {\r\n                        size: 300,\r\n                        posX: -300,\r\n                        posY: -200,\r\n                        zIndex: 30,\r\n                        next: 2,\r\n                        onTouch: onTouchGateWall,\r\n                        changeStage: this.props.changeStage,\r\n                    },\r\n                };\r\n                //ステージの背景画像を設定\r\n                this.bgImg = furuie;\r\n            } else if (this.props.stage === 2) {\r\n                // ------------------------------------------------------------\r\n                // ステージ2（鳥居がある町）\r\n                // ------------------------------------------------------------\r\n                this.objs = {\r\n                    ...this.objOutOfScreen,\r\n                    ...this.objWalls,\r\n                    ...this.objFloor,\r\n\r\n                    shino: {\r\n                        size: 10,\r\n                        posX: 120,\r\n                        posY: 2,\r\n                        zIndex: 27,\r\n                        img: imgShino,\r\n                        onTouch: onTouchScrollOpener,\r\n                        openTargetTitle: this.consts.SHINO_SCROLL2_TITLE,\r\n                    },\r\n                    shinoScroll: {\r\n                        size: 150,\r\n                        posX: 5,\r\n                        posY: 5,\r\n                        zIndex: 1000,\r\n                        img: imgScrollOpen,\r\n                        scroll: true,\r\n                        visible: false,\r\n                        onTouch: onTouchNothing,\r\n                        title: this.consts.SHINO_SCROLL2_TITLE,\r\n                        message: this.consts.SHINO_SCROLL2_MESSAGE,\r\n                        fontSize: 3,\r\n                        speakerImg: imgShino,\r\n                    },\r\n                    rock1: {\r\n                        size: 17,\r\n                        posX: 50,\r\n                        posY: 63,\r\n                        zIndex: 30,\r\n                        img: imgRock,\r\n                        onTouch: onTouchBlock,\r\n                    },\r\n                    tree1Pic: {\r\n                        size: 60,\r\n                        posX: 120,\r\n                        posY: 20,\r\n                        zIndex: 15,\r\n                        img: imgTree1,\r\n                        onTouch: onTouchNothing,\r\n                    },\r\n                    tree1Actual: {\r\n                        size: 60,\r\n                        posX: 120,\r\n                        posY: 30,\r\n                        onTouch: onTouchTree,\r\n                    },\r\n                    toriiPic: {\r\n                        size: 120,\r\n                        posX: 35,\r\n                        posY: 3,\r\n                        zIndex: 10,\r\n                        img: imgTorii,\r\n                        onTouch: onTouchNothing,\r\n                    },\r\n                    toriiActual: {\r\n                        size: 120,\r\n                        posX: 35,\r\n                        posY: 9,\r\n                        zIndex: 10,\r\n                        onTouch: onTouchTree,\r\n                    },\r\n                    toriiFramePic: {\r\n                        size: 40,\r\n                        posX: 75,\r\n                        posY: 5,\r\n                        zIndex: 30,\r\n                        img: imgFrame,\r\n                        onTouch: onTouchNothing,\r\n                    },\r\n                    toriiMessage1: {\r\n                        size: 30,\r\n                        posX: 87,\r\n                        posY: 10,\r\n                        zIndex: 30,\r\n                        message: \"Welcome\",\r\n                        fontSize: 4,\r\n                        onTouch: onTouchNothing,\r\n                    },\r\n                    toriiMessage2: {\r\n                        size: 30,\r\n                        posX: 93,\r\n                        posY: 15,\r\n                        zIndex: 30,\r\n                        message: \"to\",\r\n                        fontSize: 4,\r\n                        onTouch: onTouchNothing,\r\n                    },\r\n                    toriiMessage3: {\r\n                        size: 30,\r\n                        posX: 89,\r\n                        posY: 20,\r\n                        zIndex: 30,\r\n                        message: \"Japan!\",\r\n                        fontSize: 4,\r\n                        onTouch: onTouchNothing,\r\n                    },\r\n                    rightGateWall: {\r\n                        size: 300,\r\n                        posX: 160,\r\n                        posY: -200,\r\n                        zIndex: 30,\r\n                        next: 1,\r\n                        onTouch: onTouchGateWall,\r\n                        changeStage: this.props.changeStage,\r\n                    },\r\n                    leftGateWall: {\r\n                        size: 300,\r\n                        posX: -300,\r\n                        posY: -200,\r\n                        zIndex: 30,\r\n                        next: 3,\r\n                        onTouch: onTouchGateWall,\r\n                        changeStage: this.props.changeStage,\r\n                    },\r\n                };\r\n                //ステージの背景画像を設定\r\n                this.bgImg = town1;\r\n            } else if (this.props.stage === 3) {\r\n                // ------------------------------------------------------------\r\n                // ステージ3（ポチの家）\r\n                // ------------------------------------------------------------\r\n                this.objs = {\r\n                    ...this.objOutOfScreen,\r\n                    ...this.objWalls,\r\n                    ...this.objFloor,\r\n\r\n                    rightGateWall: {\r\n                        size: 300,\r\n                        posX: 160,\r\n                        posY: -200,\r\n                        zIndex: 30,\r\n                        next: 2,\r\n                        onTouch: onTouchGateWall,\r\n                        changeStage: this.props.changeStage,\r\n                    },\r\n                    fire1: {\r\n                        size: 13,\r\n                        posX: 74,\r\n                        posY: 62,\r\n                        zIndex: 20,\r\n                        img: imgfire1,\r\n                        onTouch: onTouchFire,\r\n                        jumpHeight: 25,\r\n                    },\r\n                    pochi: {\r\n                        size: 10,\r\n                        posX: 50,\r\n                        posY: 62,\r\n                        zIndex: 20,\r\n                        img: imgPochi,\r\n                        onTouch: onTouchScrollOpener,\r\n                        openTargetTitle: this.consts.POCHI_SCROLL_TITLE,\r\n                    },\r\n                    pochiScroll: {\r\n                        size: 150,\r\n                        posX: 5,\r\n                        posY: 5,\r\n                        zIndex: 1000,\r\n                        img: imgScrollOpen,\r\n                        scroll: true,\r\n                        visible: false,\r\n                        onTouch: onTouchNothing,\r\n                        title: this.consts.POCHI_SCROLL_TITLE,\r\n                        message: this.consts.POCHI_SCROLL_MESSAGE,\r\n                        fontSize: 3,\r\n                        speakerImg: imgPochi,\r\n                    },\r\n                    butsudan: {\r\n                        size: 40,\r\n                        posX: 5,\r\n                        posY: 32,\r\n                        zIndex: 20,\r\n                        img: imgButsudan,\r\n                        onTouch: onTouchTree,\r\n                    },\r\n                    scrollButsudanIcon: {\r\n                        size: 10,\r\n                        posX: 19,\r\n                        posY: 42,\r\n                        boolLeft: true,\r\n                        zIndex: 22,\r\n                        img: imgScroll,\r\n                        onTouch: onTouchScrollOpener,\r\n                        openTargetTitle: this.consts.FIRE_SCROLL_TITLE,\r\n                    },\r\n                    butsudanScrollOpened: {\r\n                        size: 150,\r\n                        posX: 5,\r\n                        posY: 5,\r\n                        zIndex: 1000,\r\n                        img: imgScrollOpen,\r\n                        scroll: true,\r\n                        visible: false,\r\n                        onTouch: onTouchNothing,\r\n                        title: this.consts.FIRE_SCROLL_TITLE,\r\n                        message: this.consts.FIRE_SCROLL_MESSAGE,\r\n                        fontSize: 3,\r\n                    },\r\n                    kanban1Pic: {\r\n                        size: 15,\r\n                        posX: 18,\r\n                        posY: 22,\r\n                        zIndex: 10,\r\n                        img: imgKanban1,\r\n                        onTouch: onTouchNothing,\r\n                    },\r\n                    kanban1ArrowPic: {\r\n                        size: 7,\r\n                        posX: 22,\r\n                        posY: 25,\r\n                        boolLeft: true,\r\n                        zIndex: 11,\r\n                        img: imgArrow1,\r\n                        onTouch: onTouchNothing,\r\n                    },\r\n                    leftGateWall: {\r\n                        size: 300,\r\n                        posX: -300,\r\n                        posY: -270,\r\n                        zIndex: 30,\r\n                        next: 4,\r\n                        onTouch: onTouchGateWall,\r\n                        changeStage: this.props.changeStage,\r\n                    },\r\n                };\r\n                //ステージの背景画像を設定\r\n                this.bgImg = ryokan1;\r\n            } else if (this.props.stage === 4) {\r\n                // ------------------------------------------------------------\r\n                // ステージ4（看板がある河原）\r\n                // ------------------------------------------------------------\r\n                this.objs = {\r\n                    ...this.objOutOfScreen,\r\n                    ...this.objWalls,\r\n                    ...this.objFloor,\r\n\r\n                    kanban1Pic: {\r\n                        size: 20,\r\n                        posX: 47,\r\n                        posY: 60,\r\n                        zIndex: 10,\r\n                        img: imgKanban1,\r\n                        onTouch: onTouchScrollOpener,\r\n                        openTargetTitle: this.consts.KAWARA_SCROLL_TITLE,\r\n                    },\r\n                    kanban1ArrowPic: {\r\n                        size: 10,\r\n                        posX: 51,\r\n                        posY: 63,\r\n                        boolLeft: true,\r\n                        zIndex: 11,\r\n                        img: imgArrow1,\r\n                        onTouch: onTouchNothing,\r\n                    },\r\n                    scrollFromKanban: {\r\n                        size: 150,\r\n                        posX: 5,\r\n                        posY: 5,\r\n                        zIndex: 1000,\r\n                        img: imgScrollOpen,\r\n                        scroll: true,\r\n                        visible: false,\r\n                        onTouch: onTouchNothing,\r\n                        title: this.consts.KAWARA_SCROLL_TITLE,\r\n                        message: this.consts.KAWARA_SCROLL_MESSAGE,\r\n                        fontSize: 3,\r\n                    },\r\n                    rock1: {\r\n                        size: 17,\r\n                        posX: 90,\r\n                        posY: 65,\r\n                        zIndex: 20,\r\n                        img: imgRock,\r\n                        onTouch: onTouchBlock,\r\n                    },\r\n                    rock2: {\r\n                        size: 20,\r\n                        posX: 15,\r\n                        posY: 63,\r\n                        zIndex: 30,\r\n                        img: imgRock,\r\n                        onTouch: onTouchBlock,\r\n                    },\r\n                    rock3Pic: {\r\n                        size: 50,\r\n                        posX: -25,\r\n                        posY: 40,\r\n                        zIndex: 20,\r\n                        img: imgRock,\r\n                        onTouch: onTouchNothing,\r\n                    },\r\n                    rock3Actual: {\r\n                        size: 50,\r\n                        posX: -25,\r\n                        posY: 43,\r\n                        zIndex: 30,\r\n                        onTouch: onTouchBlock,\r\n                    },\r\n                    riverPic: {\r\n                        size: 200,\r\n                        posX: -175,\r\n                        posY: 72,\r\n                        divType: \"water\",\r\n                        zIndex: 29,\r\n                        onTouch: onTouchNothing,\r\n                    },\r\n                    rightGateWall: {\r\n                        size: 300,\r\n                        posX: 160,\r\n                        posY: -200,\r\n                        zIndex: 30,\r\n                        next: 3,\r\n                        onTouch: onTouchGateWall,\r\n                        changeStage: this.props.changeStage,\r\n                    },\r\n                    leftGateWall: {\r\n                        size: 300,\r\n                        posX: -300,\r\n                        posY: -200,\r\n                        zIndex: 30,\r\n                        next: 5,\r\n                        onTouch: onTouchGateWall,\r\n                        changeStage: this.props.changeStage,\r\n                    },\r\n                };\r\n                //ステージの背景画像を設定\r\n                this.bgImg = riverside1;\r\n            } else if (this.props.stage === 5) {\r\n                // ------------------------------------------------------------\r\n                // ステージ5（シノがいる川）\r\n                // ------------------------------------------------------------\r\n                this.objs = {\r\n                    ...this.objOutOfScreen,\r\n                    ...this.objWalls,\r\n                    ...this.objFloor,\r\n\r\n                    rock1Pic: {\r\n                        size: 50,\r\n                        posX: 135,\r\n                        posY: 40,\r\n                        zIndex: 20,\r\n                        img: imgRockR,\r\n                        onTouch: onTouchNothing,\r\n                    },\r\n                    rock1Actual: {\r\n                        size: 50,\r\n                        posX: 135,\r\n                        posY: 43,\r\n                        zIndex: 30,\r\n                        onTouch: onTouchBlock,\r\n                    },\r\n                    rock2Pic: {\r\n                        size: 50,\r\n                        posX: 5,\r\n                        posY: 40,\r\n                        zIndex: 15,\r\n                        img: imgRockR,\r\n                        onTouch: onTouchNothing,\r\n                    },\r\n                    rock2Actual: {\r\n                        size: 50,\r\n                        posX: 5,\r\n                        posY: 43,\r\n                        zIndex: 15,\r\n                        onTouch: onTouchBlock,\r\n                    },\r\n                    rock3Pic: {\r\n                        size: 50,\r\n                        posX: -25,\r\n                        posY: 40,\r\n                        zIndex: 20,\r\n                        img: imgRockR,\r\n                        onTouch: onTouchNothing,\r\n                    },\r\n                    rock3Actual: {\r\n                        size: 50,\r\n                        posX: -25,\r\n                        posY: 43,\r\n                        zIndex: 30,\r\n                        onTouch: onTouchBlock,\r\n                    },\r\n                    shino: {\r\n                        size: 10,\r\n                        posX: 20,\r\n                        posY: 29,\r\n                        zIndex: 17,\r\n                        img: imgShino,\r\n                        onTouch: onTouchScrollOpener,\r\n                        openTargetTitle: this.consts.SHINO_SCROLL_TITLE,\r\n                    },\r\n                    shinoScroll: {\r\n                        size: 150,\r\n                        posX: 5,\r\n                        posY: 5,\r\n                        zIndex: 1000,\r\n                        img: imgScrollOpen,\r\n                        scroll: true,\r\n                        visible: false,\r\n                        onTouch: onTouchNothing,\r\n                        title: this.consts.SHINO_SCROLL_TITLE,\r\n                        message: this.consts.SHINO_SCROLL_MESSAGE,\r\n                        fontSize: 3,\r\n                        speakerImg: imgShino,\r\n                    },\r\n                    riverPic: {\r\n                        size: 200,\r\n                        posX: -20,\r\n                        posY: 60,\r\n                        divType: \"water\",\r\n                        zIndex: 40,\r\n                        onTouch: onTouchNothing,\r\n                    },\r\n                    riverActual: {\r\n                        size: 200,\r\n                        posX: -20,\r\n                        posY: 72,\r\n                        zIndex: 30,\r\n                        onTouch: onTouchRiverToRight,\r\n                    },\r\n                    rightGateWall: {\r\n                        size: 300,\r\n                        posX: 160,\r\n                        posY: -200,\r\n                        zIndex: 30,\r\n                        next: 4,\r\n                        onTouch: onTouchGateWall,\r\n                        changeStage: this.props.changeStage,\r\n                    },\r\n                    leftGateWall: {\r\n                        size: 300,\r\n                        posX: -300,\r\n                        posY: -200,\r\n                        zIndex: 30,\r\n                        next: 6,\r\n                        onTouch: onTouchGateWall,\r\n                        changeStage: this.props.changeStage,\r\n                    },\r\n                };\r\n                //ステージの背景画像を設定\r\n                this.bgImg = river1;\r\n            } else if (this.props.stage === 6) {\r\n                // ------------------------------------------------------------\r\n                // ステージ6（岩の下の水路）\r\n                // ------------------------------------------------------------\r\n                this.objs = {\r\n                    ...this.objOutOfScreen,\r\n                    ...this.objWalls,\r\n                    ...this.objFloor,\r\n\r\n                    shino: {\r\n                        size: 10,\r\n                        posX: 73,\r\n                        posY: 5,\r\n                        zIndex: 35,\r\n                        img: imgShino,\r\n                        onTouch: onTouchScrollOpener,\r\n                        openTargetTitle: this.consts.SHINO_SCROLL3_TITLE,\r\n                    },\r\n                    shinoScroll: {\r\n                        size: 150,\r\n                        posX: 5,\r\n                        posY: 5,\r\n                        zIndex: 1000,\r\n                        img: imgScrollOpen,\r\n                        scroll: true,\r\n                        visible: false,\r\n                        onTouch: onTouchNothing,\r\n                        title: this.consts.SHINO_SCROLL3_TITLE,\r\n                        message: this.consts.SHINO_SCROLL3_MESSAGE,\r\n                        fontSize: 3,\r\n                        speakerImg: imgShino,\r\n                    },\r\n                    rock1Pic: {\r\n                        size: 50,\r\n                        posX: 135,\r\n                        posY: 40,\r\n                        zIndex: 20,\r\n                        img: imgRockR,\r\n                        onTouch: onTouchNothing,\r\n                    },\r\n                    rock1Actual: {\r\n                        size: 50,\r\n                        posX: 135,\r\n                        posY: 43,\r\n                        zIndex: 30,\r\n                        onTouch: onTouchBlock,\r\n                    },\r\n                    rock2Pic: {\r\n                        size: 90,\r\n                        posX: -5,\r\n                        posY: -25,\r\n                        zIndex: 29,\r\n                        img: imgRock,\r\n                        onTouch: onTouchNothing,\r\n                    },\r\n                    rock2Actual: {\r\n                        size: 90,\r\n                        posX: -12,\r\n                        posY: -28,\r\n                        zIndex: 15,\r\n                        onTouch: onTouchBlock,\r\n                    },\r\n                    rock3Pic: {\r\n                        size: 90,\r\n                        posX: -25,\r\n                        posY: -25,\r\n                        zIndex: 30,\r\n                        img: imgRock,\r\n                        onTouch: onTouchNothing,\r\n                    },\r\n                    rock3Actual: {\r\n                        size: 90,\r\n                        posX: -25,\r\n                        posY: -28,\r\n                        zIndex: 30,\r\n                        onTouch: onTouchBlock,\r\n                    },\r\n                    riverPic: {\r\n                        size: 200,\r\n                        posX: -20,\r\n                        posY: 60,\r\n                        divType: \"water\",\r\n                        zIndex: 40,\r\n                        onTouch: onTouchNothing,\r\n                    },\r\n                    riverActual: {\r\n                        size: 200,\r\n                        posX: -20,\r\n                        posY: 72,\r\n                        zIndex: 30,\r\n                        onTouch: onTouchRiverToRight,\r\n                    },\r\n                    rightGateWall: {\r\n                        size: 300,\r\n                        posX: 160,\r\n                        posY: -200,\r\n                        zIndex: 30,\r\n                        next: 5,\r\n                        onTouch: onTouchGateWall,\r\n                        changeStage: this.props.changeStage,\r\n                    },\r\n                    leftGateWall: {\r\n                        size: 300,\r\n                        posX: -300,\r\n                        posY: -200,\r\n                        zIndex: 30,\r\n                        next: 11,\r\n                        onTouch: onTouchGateWall,\r\n                        changeStage: this.props.changeStage,\r\n                    },\r\n                };\r\n                //ステージの背景画像を設定\r\n                this.bgImg = river2;\r\n            } else if (this.props.stage === 7) {\r\n                // ------------------------------------------------------------\r\n                // ステージ7（石像複数）\r\n                // ------------------------------------------------------------\r\n                this.objs = {\r\n                    ...this.objOutOfScreen,\r\n                    ...this.objWalls,\r\n                    ...this.objFloor,\r\n\r\n                    kanban1Pic: {\r\n                        size: 20,\r\n                        posX: 77,\r\n                        posY: 60,\r\n                        zIndex: 10,\r\n                        img: imgKanban1,\r\n                        onTouch: onTouchScrollOpener,\r\n                        openTargetTitle: this.consts.SHRINE_ENTRANCE_TITLE,\r\n                    },\r\n                    kanban1ArrowPic: {\r\n                        size: 10,\r\n                        posX: 82,\r\n                        posY: 63,\r\n                        zIndex: 11,\r\n                        img: imgArrow1,\r\n                        onTouch: onTouchNothing,\r\n                    },\r\n                    scrollFromKanban: {\r\n                        size: 150,\r\n                        posX: 5,\r\n                        posY: 5,\r\n                        zIndex: 1000,\r\n                        img: imgScrollOpen,\r\n                        scroll: true,\r\n                        visible: false,\r\n                        onTouch: onTouchNothing,\r\n                        title: this.consts.SHRINE_ENTRANCE_TITLE,\r\n                        message: this.consts.SHRINE_ENTRANCE_MESSAGE,\r\n                        fontSize: 3,\r\n                    },\r\n                    rightGateWall: {\r\n                        size: 300,\r\n                        posX: 160,\r\n                        posY: -200,\r\n                        zIndex: 30,\r\n                        next: 8,\r\n                        onTouch: onTouchGateWall,\r\n                        changeStage: this.props.changeStage,\r\n                    },\r\n                    leftGateWall: {\r\n                        size: 300,\r\n                        posX: -300,\r\n                        posY: -200,\r\n                        zIndex: 30,\r\n                        next: 1,\r\n                        onTouch: onTouchGateWall,\r\n                        changeStage: this.props.changeStage,\r\n                    },\r\n                };\r\n                //ステージの背景画像を設定\r\n                this.bgImg = jizos;\r\n            } else if (this.props.stage === 8) {\r\n                // ------------------------------------------------------------\r\n                // ステージ8 (狛犬)\r\n                // ------------------------------------------------------------\r\n                this.objs = {\r\n                    ...this.objOutOfScreen,\r\n                    ...this.objWalls,\r\n                    ...this.objFloor,\r\n\r\n                    jizo1: {\r\n                        size: 14,\r\n                        posX: 40,\r\n                        posY: 62,\r\n                        zIndex: 15,\r\n                        boolLeft: true,\r\n                        img: imgJizo,\r\n                        onTouch: onTouchJizo,\r\n                    },\r\n                    fire1: {\r\n                        size: 13,\r\n                        posX: 97,\r\n                        posY: 6,\r\n                        zIndex: 20,\r\n                        img: imgfire1,\r\n                        fireContinueTime: 5, //0.5秒\r\n                        onTouch: onTouchFire,\r\n                        jumpHeight: 20,\r\n                    },\r\n                    shino: {\r\n                        size: 10,\r\n                        posX: 77,\r\n                        posY: 62,\r\n                        zIndex: 23,\r\n                        img: imgShino,\r\n                        onTouch: onTouchScrollOpener,\r\n                        openTargetTitle: this.consts.SHINO_SCROLL5_TITLE,\r\n                    },\r\n                    shinoScroll: {\r\n                        size: 150,\r\n                        posX: 5,\r\n                        posY: 5,\r\n                        zIndex: 1000,\r\n                        img: imgScrollOpen,\r\n                        scroll: true,\r\n                        visible: false,\r\n                        onTouch: onTouchNothing,\r\n                        title: this.consts.SHINO_SCROLL5_TITLE,\r\n                        message: this.consts.SHINO_SCROLL5_MESSAGE,\r\n                        fontSize: 3,\r\n                        speakerImg: imgShino,\r\n                    },\r\n                    rightGateWall: {\r\n                        size: 300,\r\n                        posX: 160,\r\n                        posY: -200,\r\n                        zIndex: 30,\r\n                        next: 9,\r\n                        onTouch: onTouchGateWall,\r\n                        changeStage: this.props.changeStage,\r\n                    },\r\n                    leftGateWall: {\r\n                        size: 300,\r\n                        posX: -300,\r\n                        posY: -200,\r\n                        zIndex: 30,\r\n                        next: 7,\r\n                        onTouch: onTouchGateWall,\r\n                        changeStage: this.props.changeStage,\r\n                    },\r\n                    topGate: {\r\n                        size: 150,\r\n                        posX: 5,\r\n                        posY: -230,\r\n                        zIndex: 30,\r\n                        next: 14,\r\n                        onTouch: onTouchGateTopOrBottom,\r\n                        changeStage: this.props.changeStage,\r\n                    },\r\n                };\r\n                //ステージの背景画像を設定\r\n                this.bgImg = gardianDog;\r\n            } else if (this.props.stage === 9) {\r\n                // ------------------------------------------------------------\r\n                // ステージ9 (神社)\r\n                // ------------------------------------------------------------\r\n                this.objs = {\r\n                    ...this.objOutOfScreen,\r\n                    ...this.objWalls,\r\n                    ...this.objFloor,\r\n\r\n                    rock1: {\r\n                        size: 60,\r\n                        posX: 60,\r\n                        posY: 35,\r\n                        zIndex: 20,\r\n                        boolLeft: true,\r\n                        img: imgRock,\r\n                        onTouch: onTouchBlock,\r\n                    },\r\n                    jizo1: {\r\n                        size: 14,\r\n                        posX: 83,\r\n                        posY: 24,\r\n                        zIndex: 15,\r\n                        boolLeft: true,\r\n                        img: imgJizo,\r\n                        onTouch: onTouchJizo,\r\n                    },\r\n                    fire1: {\r\n                        size: 13,\r\n                        posX: 58,\r\n                        posY: 17,\r\n                        zIndex: 20,\r\n                        img: imgfire1,\r\n                        fireContinueTime: 20, //2秒\r\n                        onTouch: onTouchFire,\r\n                        jumpHeight: 30,\r\n                    },\r\n                    fire2: {\r\n                        size: 13,\r\n                        posX: 114,\r\n                        posY: 13,\r\n                        zIndex: 20,\r\n                        img: imgfire1,\r\n                        fireContinueTime: 20, //2秒\r\n                        onTouch: onTouchFire,\r\n                        jumpHeight: 30,\r\n                    },\r\n                    leftGateWall: {\r\n                        size: 300,\r\n                        posX: -300,\r\n                        posY: 0,\r\n                        zIndex: 30,\r\n                        next: 8,\r\n                        onTouch: onTouchGateWall,\r\n                        changeStage: this.props.changeStage,\r\n                    },\r\n                    topGate: {\r\n                        size: 300,\r\n                        posX: 50,\r\n                        posY: -310,\r\n                        zIndex: 30,\r\n                        next: 10,\r\n                        onTouch: onTouchGateTopOrBottom,\r\n                        changeStage: this.props.changeStage,\r\n                    },\r\n                };\r\n                //ステージの背景画像を設定\r\n                this.bgImg = shrine;\r\n            } else if (this.props.stage === 10) {\r\n                // ------------------------------------------------------------\r\n                // ステージ10 (空の岩)\r\n                // ------------------------------------------------------------\r\n                this.objs = {\r\n                    ...this.objOutOfScreen,\r\n                    ...this.objWalls,\r\n\r\n                    waterScroll: {\r\n                        size: 10,\r\n                        posX: 30,\r\n                        posY: 12,\r\n                        boolLeft: true,\r\n                        zIndex: 18,\r\n                        img: imgScroll,\r\n                        onTouch: onTouchScrollOpener,\r\n                        openTargetTitle: this.consts.WATER_SCROLL_TITLE,\r\n                    },\r\n                    waterScrollOpened: {\r\n                        size: 150,\r\n                        posX: 5,\r\n                        posY: 5,\r\n                        zIndex: 1000,\r\n                        img: imgScrollOpen,\r\n                        scroll: true,\r\n                        visible: false,\r\n                        onTouch: onTouchNothing,\r\n                        title: this.consts.WATER_SCROLL_TITLE,\r\n                        message: this.consts.WATER_SCROLL_MESSAGE,\r\n                        fontSize: 3,\r\n                    },\r\n                    rock1: {\r\n                        size: 30,\r\n                        posX: 20,\r\n                        posY: 20,\r\n                        zIndex: 20,\r\n                        boolLeft: true,\r\n                        img: imgRock,\r\n                        onTouch: onTouchBlock,\r\n                    },\r\n                    fire1: {\r\n                        size: 15,\r\n                        posX: 20,\r\n                        posY: 45,\r\n                        zIndex: 19,\r\n                        img: imgfireR,\r\n                        onTouch: onTouchNothing,\r\n                        jumpHeight: 25,\r\n                    },\r\n                    fire2: {\r\n                        size: 15,\r\n                        posX: 35,\r\n                        posY: 45,\r\n                        zIndex: 19,\r\n                        img: imgfireR,\r\n                        onTouch: onTouchNothing,\r\n                        jumpHeight: 25,\r\n                    },\r\n                    bottomGate: {\r\n                        size: 300,\r\n                        posX: -70,\r\n                        posY: 80,\r\n                        zIndex: 30,\r\n                        next: 9,\r\n                        onTouch: onTouchGateTopOrBottom,\r\n                        changeStage: this.props.changeStage,\r\n                    },\r\n                };\r\n                //ステージの背景画像を設定\r\n                this.bgImg = skyStone;\r\n            } else if (this.props.stage === 11) {\r\n                // ------------------------------------------------------------\r\n                // ステージ11 (河原の城壁)\r\n                // ------------------------------------------------------------\r\n                this.objs = {\r\n                    ...this.objOutOfScreen,\r\n                    ...this.objWalls,\r\n                    ...this.objFloor,\r\n\r\n                    riverPic: {\r\n                        size: 200,\r\n                        posX: -20,\r\n                        posY: 71,\r\n                        divType: \"water\",\r\n                        zIndex: 40,\r\n                        onTouch: onTouchNothing,\r\n                    },\r\n                    rightGateWall: {\r\n                        size: 300,\r\n                        posX: 160,\r\n                        posY: -200,\r\n                        zIndex: 30,\r\n                        next: 6,\r\n                        onTouch: onTouchGateWallStage11,\r\n                        changeStage: this.props.changeStage,\r\n                    },\r\n                    leftGateWall: {\r\n                        size: 300,\r\n                        posX: -300,\r\n                        posY: -200,\r\n                        zIndex: 30,\r\n                        next: 12,\r\n                        onTouch: onTouchGateWall,\r\n                        changeStage: this.props.changeStage,\r\n                    },\r\n                };\r\n                //ステージの背景画像を設定\r\n                this.bgImg = castleRiver;\r\n            } else if (this.props.stage === 12) {\r\n                // ------------------------------------------------------------\r\n                // ステージ12 (城壁の岩肌)\r\n                // ------------------------------------------------------------\r\n                this.objs = {\r\n                    ...this.objOutOfScreen,\r\n                    ...this.objWalls,\r\n                    ...this.objFloor,\r\n\r\n                    rightGateWall: {\r\n                        size: 300,\r\n                        posX: 160,\r\n                        posY: -200,\r\n                        zIndex: 30,\r\n                        next: 11,\r\n                        onTouch: onTouchGateWall,\r\n                        changeStage: this.props.changeStage,\r\n                    },\r\n                    leftGateWall: {\r\n                        size: 300,\r\n                        posX: -300,\r\n                        posY: -200,\r\n                        zIndex: 30,\r\n                        next: 13,\r\n                        onTouch: onTouchGateWall,\r\n                        changeStage: this.props.changeStage,\r\n                    },\r\n                };\r\n                //ステージの背景画像を設定\r\n                this.bgImg = castleWall;\r\n            } else if (this.props.stage === 13) {\r\n                // ------------------------------------------------------------\r\n                // ステージ13 (城)\r\n                // ------------------------------------------------------------\r\n                this.objs = {\r\n                    ...this.objOutOfScreen,\r\n                    ...this.objWalls,\r\n                    ...this.objFloor,\r\n\r\n                    pochi: {\r\n                        size: 10,\r\n                        posX: 110,\r\n                        posY: 62,\r\n                        zIndex: 22,\r\n                        img: imgPochi,\r\n                        onTouch: onTouchScrollOpener,\r\n                        openTargetTitle: this.consts.POCHI_SCROLL2_TITLE,\r\n                    },\r\n                    pochiScroll: {\r\n                        size: 150,\r\n                        posX: 5,\r\n                        posY: 5,\r\n                        zIndex: 1000,\r\n                        img: imgScrollOpen,\r\n                        scroll: true,\r\n                        visible: false,\r\n                        onTouch: onTouchNothing,\r\n                        title: this.consts.POCHI_SCROLL2_TITLE,\r\n                        message: this.consts.POCHI_SCROLL2_MESSAGE,\r\n                        fontSize: 3,\r\n                        speakerImg: imgPochi,\r\n                    },\r\n                    earthScrollIcon: {\r\n                        size: 10,\r\n                        posX: 85,\r\n                        posY: 46,\r\n                        boolLeft: true,\r\n                        zIndex: 22,\r\n                        img: imgScroll,\r\n                        onTouch: onTouchScrollOpener,\r\n                        openTargetTitle: this.consts.EARTH_SCROLL_TITLE,\r\n                    },\r\n                    earthScrollOpened: {\r\n                        size: 150,\r\n                        posX: 5,\r\n                        posY: 5,\r\n                        zIndex: 1000,\r\n                        img: imgScrollOpen,\r\n                        scroll: true,\r\n                        visible: false,\r\n                        onTouch: onTouchNothing,\r\n                        title: this.consts.EARTH_SCROLL_TITLE,\r\n                        message: this.consts.EARTH_SCROLL_MESSAGE,\r\n                        fontSize: 3,\r\n                    },\r\n                    rock1Pic: {\r\n                        size: 40,\r\n                        posX: 70,\r\n                        posY: 50,\r\n                        zIndex: 20,\r\n                        img: imgRock,\r\n                        onTouch: onTouchNothing,\r\n                    },\r\n                    rock1Actual: {\r\n                        size: 40,\r\n                        posX: 70,\r\n                        posY: 53,\r\n                        zIndex: 30,\r\n                        onTouch: onTouchBlock,\r\n                    },\r\n                    shino: {\r\n                        size: 10,\r\n                        posX: 30,\r\n                        posY: 62,\r\n                        zIndex: 17,\r\n                        img: imgShino,\r\n                        onTouch: onTouchScrollOpener,\r\n                        openTargetTitle: this.consts.SHINO_SCROLL4_TITLE,\r\n                    },\r\n                    shinoScroll: {\r\n                        size: 150,\r\n                        posX: 5,\r\n                        posY: 5,\r\n                        zIndex: 1000,\r\n                        img: imgScrollOpen,\r\n                        scroll: true,\r\n                        visible: false,\r\n                        onTouch: onTouchNothing,\r\n                        title: this.consts.SHINO_SCROLL4_TITLE,\r\n                        message: this.consts.SHINO_SCROLL4_MESSAGE,\r\n                        fontSize: 3,\r\n                        speakerImg: imgShino,\r\n                    },\r\n                    rightGateWall: {\r\n                        size: 300,\r\n                        posX: 160,\r\n                        posY: -200,\r\n                        zIndex: 30,\r\n                        next: 12,\r\n                        onTouch: onTouchGateWall,\r\n                        changeStage: this.props.changeStage,\r\n                    },\r\n                };\r\n                //ステージの背景画像を設定\r\n                this.bgImg = castle;\r\n            } else if (this.props.stage === 14) {\r\n                // ------------------------------------------------------------\r\n                // ステージ14 (天)\r\n                // ------------------------------------------------------------\r\n                this.objs = {\r\n                    ...this.objOutOfScreen,\r\n                    ...this.objWalls,\r\n                    ...this.objFloor,\r\n\r\n                    toriiPic: {\r\n                        size: 120,\r\n                        posX: 35,\r\n                        posY: 3,\r\n                        zIndex: 10,\r\n                        img: imgTorii,\r\n                        onTouch: onTouchNothing,\r\n                    },\r\n                    toriiActual: {\r\n                        size: 120,\r\n                        posX: 35,\r\n                        posY: 9,\r\n                        zIndex: 10,\r\n                        onTouch: onTouchTree,\r\n                    },\r\n                    toriiFramePic: {\r\n                        size: 40,\r\n                        posX: 75,\r\n                        posY: 5,\r\n                        zIndex: 30,\r\n                        img: imgFrame,\r\n                        onTouch: onTouchNothing,\r\n                    },\r\n                    toriiMessage: {\r\n                        size: 30,\r\n                        posX: 90,\r\n                        posY: 10,\r\n                        zIndex: 30,\r\n                        message: \"天\",\r\n                        fontSize: 10,\r\n                        onTouch: onTouchNothing,\r\n                    },\r\n                    kosuke: {\r\n                        size: 13,\r\n                        posX: 88,\r\n                        posY: 52,\r\n                        zIndex: 17,\r\n                        img: imgKosuke,\r\n                        onTouch: onTouchScrollOpener,\r\n                        openTargetTitle: this.consts.KOSUKE_SCROLL_TITLE,\r\n                    },\r\n                    kosukeScroll: {\r\n                        size: 150,\r\n                        posX: 5,\r\n                        posY: 5,\r\n                        zIndex: 1000,\r\n                        img: imgScrollOpen,\r\n                        scroll: true,\r\n                        visible: false,\r\n                        onTouch: onTouchNothing,\r\n                        title: this.consts.KOSUKE_SCROLL_TITLE,\r\n                        message: this.consts.KOSUKE_SCROLL_MESSAGE,\r\n                        fontSize: 3,\r\n                        finalMessage: true,\r\n                    },\r\n                };\r\n                //ステージの背景画像を設定\r\n                this.bgImg = heaven;\r\n            }\r\n\r\n            this.prevStage = this.props.stage;\r\n\r\n            //localStorageに自動セーブ\r\n            const { game, ...rest } = this.ninja;\r\n            const saveData = { ninja: rest, stage: this.props.stage };\r\n            localStorage.setItem(\"saveData1\", JSON.stringify(saveData));\r\n\r\n            //背景画像の変更\r\n            if (this.backgroundSetting) {\r\n                this.backgroundSetting.backgroundImage = `url(${this.bgImg})`;\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div id=\"Page2\" style={this.pageStyle}>\r\n                <div\r\n                    id=\"gameScreen\"\r\n                    style={this.state.screenStyle}\r\n                    onLoad={() => {\r\n                        this.onLoadPage();\r\n                    }}\r\n                >\r\n                    <NinjaChar\r\n                        imgAlt=\"Running Ninja\"\r\n                        width={this.ninja.size * (this?.UL || 0)}\r\n                        x={this.state.ninjaStat.ninjaX}\r\n                        y={this.state.ninjaStat.ninjaY}\r\n                        boolLeft={this.state.ninjaStat.left}\r\n                    />\r\n                    <RenderObjs game={this} />\r\n                </div>\r\n                <b>\r\n                    <RenderScreenBottom\r\n                        onClickButton={this.onClickButton.bind(this)}\r\n                        onMouseUp={this.onMouseUp.bind(this)}\r\n                        terminalPC={this.terminalPC}\r\n                        UL={this.UL}\r\n                        lang={this.props.language}\r\n                    />\r\n                </b>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction RenderObjs(props: any) {\r\n    let objList = [];\r\n    for (let key in props.game.objs) {\r\n        objList.push(\r\n            <Obj\r\n                key={key}\r\n                obj={props.game.objs[key]}\r\n                UL={props.game.UL}\r\n                game={props.game}\r\n            />\r\n        );\r\n    }\r\n    return <span>{objList}</span>;\r\n}\r\n\r\nfunction RenderScreenBottom(props: any) {\r\n    const UL = props.UL;\r\n\r\n    //画面下部のボタンなどの表示の出し分け\r\n    if (props.terminalPC) {\r\n        let styleDivPcMessage: any = {\r\n            position: \"absolute\",\r\n            top: 75 * UL,\r\n            width: 160 * UL,\r\n            height: 15 * UL,\r\n            zIndex: \"99999999\",\r\n            backgroundColor: \"black\",\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n        };\r\n        let styleTextPcMessage: any = {\r\n            fontSize: \"xx-large\",\r\n            color: \"white\",\r\n        };\r\n        if (props.lang === \"Japanese\") {\r\n            return (\r\n                <div style={styleDivPcMessage}>\r\n                    <span style={styleTextPcMessage}>\r\n                        PCでは、キーボードの「←」「↑」「→」キーで操作をしてください。\r\n                    </span>\r\n                </div>\r\n            );\r\n        } else {\r\n            return (\r\n                <div style={styleDivPcMessage}>\r\n                    <span style={styleTextPcMessage}>\r\n                        Please use [←], [↑], and [→] keys to play!\r\n                    </span>\r\n                </div>\r\n            );\r\n        }\r\n    } else {\r\n        //スマホ・タブレットの場合、画面下部にボタンを表示\r\n        return (\r\n            <RenderButtons\r\n                onClickButton={props.onClickButton}\r\n                onMouseUp={props.onMouseUp}\r\n                UL={props.UL}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nfunction RenderButtons(props: {\r\n    onClickButton: EventFunc;\r\n    onMouseUp: EventFunc;\r\n    UL: number;\r\n}) {\r\n    const UL = props.UL;\r\n\r\n    //ボタンがあるテーブルのスタイル\r\n    let controllerStyle: any = {\r\n        position: \"absolute\",\r\n        top: 75 * UL,\r\n        width: 160 * UL,\r\n        zIndex: \"99999999\",\r\n        backgroundColor: \"black\",\r\n    };\r\n    //左右のボタンのスタイル\r\n    let sideButtonStyle = {\r\n        width: 30 * UL,\r\n        height: 15 * UL,\r\n        fontSize: 4 * UL + \"px\",\r\n        margin: \"1px\",\r\n    };\r\n    //ジャンプボタンのスタイル\r\n    let jumpButtonStyle = {\r\n        width: 100 * UL,\r\n        height: 15 * UL,\r\n        fontSize: 4 * UL,\r\n        margin: \"1px\",\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <table id=\"controller\" style={controllerStyle}>\r\n                <tbody>\r\n                    <tr>\r\n                        <td align=\"right\">\r\n                            <button\r\n                                style={sideButtonStyle}\r\n                                className={\"btn btn-info btn-lg btn-block\"}\r\n                                onMouseDown={() => {\r\n                                    props.onClickButton(\"left\");\r\n                                }}\r\n                                onTouchStart={() => {\r\n                                    props.onClickButton(\"left\");\r\n                                }}\r\n                                onMouseUp={() => {\r\n                                    props.onMouseUp(\"left\");\r\n                                }}\r\n                                onMouseOut={() => {\r\n                                    props.onMouseUp(\"left\");\r\n                                }}\r\n                                onTouchEnd={() => {\r\n                                    props.onMouseUp(\"left\");\r\n                                }}\r\n                            >\r\n                                {\"＜\"}\r\n                            </button>\r\n                        </td>\r\n                        <td align=\"center\">\r\n                            <button\r\n                                style={jumpButtonStyle}\r\n                                className={\"btn btn-info btn-lg btn-block\"}\r\n                                onMouseDown={() => {\r\n                                    props.onClickButton(\"jump\");\r\n                                }}\r\n                                onTouchStart={() => {\r\n                                    props.onClickButton(\"jump\");\r\n                                }}\r\n                                onMouseUp={() => {\r\n                                    props.onMouseUp(\"jump\");\r\n                                }}\r\n                                onMouseOut={() => {\r\n                                    props.onMouseUp(\"jump\");\r\n                                }}\r\n                                onTouchEnd={() => {\r\n                                    props.onMouseUp(\"jump\");\r\n                                }}\r\n                            >\r\n                                {\"↑　jump　↑\"}\r\n                            </button>\r\n                        </td>\r\n                        <td align=\"left\">\r\n                            <button\r\n                                style={sideButtonStyle}\r\n                                className={\"btn btn-info btn-lg btn-block\"}\r\n                                onMouseDown={() => {\r\n                                    props.onClickButton(\"right\");\r\n                                }}\r\n                                onTouchStart={() => {\r\n                                    props.onClickButton(\"right\");\r\n                                }}\r\n                                onMouseUp={() => {\r\n                                    props.onMouseUp(\"right\");\r\n                                }}\r\n                                onMouseOut={() => {\r\n                                    props.onMouseUp(\"right\");\r\n                                }}\r\n                                onTouchEnd={() => {\r\n                                    props.onMouseUp(\"right\");\r\n                                }}\r\n                            >\r\n                                {\"＞\"}\r\n                            </button>\r\n                        </td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n            <table\r\n                id=\"controller\"\r\n                style={{ ...controllerStyle, top: 60 * UL, opacity: 0 }}\r\n            >\r\n                <tbody>\r\n                    <tr>\r\n                        <td align=\"right\">\r\n                            <button\r\n                                style={{ ...sideButtonStyle, height: 30 * UL }}\r\n                                className={\"btn btn-info btn-lg btn-block\"}\r\n                                onMouseDown={() => {\r\n                                    props.onClickButton(\"left\");\r\n                                }}\r\n                                onTouchStart={() => {\r\n                                    props.onClickButton(\"left\");\r\n                                }}\r\n                                onMouseUp={() => {\r\n                                    props.onMouseUp(\"left\");\r\n                                }}\r\n                                onMouseOut={() => {\r\n                                    props.onMouseUp(\"left\");\r\n                                }}\r\n                                onTouchEnd={() => {\r\n                                    props.onMouseUp(\"left\");\r\n                                }}\r\n                            >\r\n                                {\"＜\"}\r\n                            </button>\r\n                        </td>\r\n                        <td align=\"center\">\r\n                            <button\r\n                                style={{ ...jumpButtonStyle, height: 30 * UL }}\r\n                                className={\"btn btn-info btn-lg btn-block\"}\r\n                                onMouseDown={() => {\r\n                                    props.onClickButton(\"jump\");\r\n                                }}\r\n                                onTouchStart={() => {\r\n                                    props.onClickButton(\"jump\");\r\n                                }}\r\n                                onMouseUp={() => {\r\n                                    props.onMouseUp(\"jump\");\r\n                                }}\r\n                                onMouseOut={() => {\r\n                                    props.onMouseUp(\"jump\");\r\n                                }}\r\n                                onTouchEnd={() => {\r\n                                    props.onMouseUp(\"jump\");\r\n                                }}\r\n                            >\r\n                                {\"↑　jump　↑\"}\r\n                            </button>\r\n                        </td>\r\n                        <td align=\"left\">\r\n                            <button\r\n                                style={{ ...sideButtonStyle, height: 30 * UL }}\r\n                                className={\"btn btn-info btn-lg btn-block\"}\r\n                                onMouseDown={() => {\r\n                                    props.onClickButton(\"right\");\r\n                                }}\r\n                                onTouchStart={() => {\r\n                                    props.onClickButton(\"right\");\r\n                                }}\r\n                                onMouseUp={() => {\r\n                                    props.onMouseUp(\"right\");\r\n                                }}\r\n                                onMouseOut={() => {\r\n                                    props.onMouseUp(\"right\");\r\n                                }}\r\n                                onTouchEnd={() => {\r\n                                    props.onMouseUp(\"right\");\r\n                                }}\r\n                            >\r\n                                {\"＞\"}\r\n                            </button>\r\n                        </td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n        </>\r\n    );\r\n}\r\n\r\nfunction checkRelativityRightAndFoot(\r\n    objRight: number,\r\n    ninjaRight: number,\r\n    objTop: number,\r\n    objFoot: number,\r\n    ninjaLeft: number,\r\n    ninjaTop: number,\r\n    ninjaFoot: number,\r\n    ninjaSize: number\r\n) {\r\n    //コメントは忍者が右から来た想定\r\n    if (objRight > ninjaLeft) {\r\n        //忍者が右から\r\n        if (objRight < ninjaRight) {\r\n            //忍者の右端がオブジェクトの右端を左向きに超えてはいない\r\n            if (objTop < ninjaFoot - (ninjaSize * 7) / 12) {\r\n                //オブジェクトの上をまたいでいない\r\n                if (objFoot > ninjaTop + (ninjaSize * 7) / 12) {\r\n                    //オブジェクトの下をくぐっていない\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}\r\nfunction checkRelativityLeftAndTop(\r\n    ninjaLeft: number,\r\n    objLeft: number,\r\n    objTop: number,\r\n    objFoot: number,\r\n    ninjaRight: number,\r\n    ninjaTop: number,\r\n    ninjaFoot: number,\r\n    ninjaSize: number\r\n) {\r\n    //コメントは忍者が左から来た想定\r\n    if (objLeft < ninjaRight) {\r\n        //忍者が左から\r\n        if (objLeft > ninjaLeft) {\r\n            //忍者の左端がオブジェクトの左端を右向きに超えてはいない\r\n            if (objTop < ninjaFoot - (ninjaSize * 7) / 12) {\r\n                //オブジェクトの上をまたいでいない\r\n                if (objFoot > ninjaTop + (ninjaSize * 7) / 12) {\r\n                    //オブジェクトの下をくぐっていない\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n//=======================================\r\n// 巻物を開くためのトリガーに触った際のタッチ関数\r\n//=======================================\r\nfunction onTouchScrollOpener(ninja: Ninja) {\r\n    //@ts-ignore\r\n    if (ninja.game?.props.readElementScroll.indexOf(this.openTargetTitle) < 0) {\r\n        //まだターゲットの巻物が読まれていない（ステージ遷移の度にリセット）\r\n\r\n        let objs = ninja.game?.objs;\r\n        for (let key in objs) {\r\n            //@ts-ignore\r\n            if (objs[key].title !== this.openTargetTitle && objs[key].scroll) {\r\n                //表示が被らないように、他の巻物を消す\r\n                objs[key].visible = false;\r\n                //@ts-ignore\r\n            } else if (objs[key].title === this.openTargetTitle) {\r\n                //該当の巻物を表示する\r\n                objs[key].visible = true;\r\n            }\r\n        }\r\n    }\r\n    //読み終えたリストの中に該当の巻物を追加\r\n    //@ts-ignore\r\n    ninja.readScroll.push(this.openTargetTitle);\r\n    //@ts-ignore\r\n    void ninja.game?.props.readElementScroll.push(this.openTargetTitle);\r\n}\r\n\r\n//=======================================\r\n// 貫通不可能ブロック用のタッチ関数\r\n//=======================================\r\nfunction onTouchBlock(ninja: Ninja, from: string) {\r\n    if (from === \"upper\") {\r\n        //上から\r\n        //@ts-ignore\r\n        ninja.posY = this.posY - ninja.size;\r\n        ninja.speedY = 0;\r\n    } else if (from === \"right\") {\r\n        //右から\r\n        //@ts-ignore\r\n        ninja.posX = this.posX + this.size;\r\n        ninja.speedX = 0;\r\n    } else if (from === \"lower\") {\r\n        //下から\r\n        //@ts-ignore\r\n        ninja.posY = this.posY + this.size;\r\n        ninja.speedY = 0;\r\n    } else if (from === \"left\") {\r\n        //左から\r\n        //@ts-ignore\r\n        ninja.posX = this.posX - ninja.size;\r\n        ninja.speedX = 0;\r\n    }\r\n}\r\n\r\n//=======================================\r\n// 上から乗れる木などのタッチ関数\r\n//=======================================\r\nfunction onTouchTree(ninja: Ninja, from: string) {\r\n    if (from === \"upper\") {\r\n        //上から\r\n        //@ts-ignore\r\n        ninja.posY = this.posY - ninja.size;\r\n        ninja.speedY = 0;\r\n    }\r\n}\r\n\r\n//=======================================\r\n// 右向きにに流れる川へのタッチ関数\r\n//=======================================\r\nfunction onTouchRiverToRight(ninja: Ninja) {\r\n    if (ninja.readScroll.indexOf(ninja.game?.consts.WATER_SCROLL_TITLE) < 0) {\r\n        //水の書を読んでいなければ、流される\r\n        ninja.posX += 10;\r\n        //@ts-ignore\r\n        ninja.posY = this.posY - ninja.size;\r\n        ninja.speedX = 30;\r\n        ninja.speedY = 0;\r\n    }\r\n}\r\n\r\n//=======================================\r\n// 何も起こらないタッチ関数\r\n//=======================================\r\nfunction onTouchNothing() {}\r\n\r\n//=======================================\r\n// 別ステージへのゲートのタッチ関数（左右）\r\n//=======================================\r\nfunction onTouchGateWall(ninja: Ninja, from: string) {\r\n    if (from === \"right\") {\r\n        //右から\r\n        ninja.posX += 160 - ninja.size;\r\n        ninja.speedX = 0;\r\n        ninja.speedY = 0;\r\n    } else {\r\n        //左から\r\n        ninja.posX = 0;\r\n        ninja.speedX = 0;\r\n        ninja.speedY = 0;\r\n    }\r\n    //@ts-ignore\r\n    this.changeStage(this.next, ninja);\r\n\r\n    return \"changed\";\r\n}\r\n\r\n//=======================================\r\n// 別ステージへのゲートのタッチ関数（ステージ11から水路に戻る場合）\r\n//=======================================\r\nfunction onTouchGateWallStage11(ninja: Ninja, from: string) {\r\n    if (from === \"left\") {\r\n        //左から\r\n        ninja.posX = 0;\r\n        ninja.posY = 60;\r\n        ninja.speedX = 0;\r\n        ninja.speedY = 0;\r\n    }\r\n    //@ts-ignore\r\n    this.changeStage(this.next, ninja);\r\n\r\n    return \"changed\";\r\n}\r\n\r\n//=======================================\r\n// 別ステージへのゲートのタッチ関数（上下）\r\n//=======================================\r\nfunction onTouchGateTopOrBottom(ninja: Ninja, from: string) {\r\n    if (from === \"upper\") {\r\n        //上から\r\n        ninja.posY = 0;\r\n        ninja.speedX = 0;\r\n        ninja.speedY = 0;\r\n    } else if (from === \"lower\") {\r\n        //下から\r\n        ninja.posY += 70 - ninja.size;\r\n        ninja.speedX = 0;\r\n        ninja.speedY = -15;\r\n    }\r\n    //@ts-ignore\r\n    this.changeStage(this.next, ninja);\r\n\r\n    return \"changed\";\r\n}\r\n\r\n//=======================================\r\n// 炎にタッチ\r\n//=======================================\r\nfunction onTouchFire(ninja: Ninja) {\r\n    //@ts-ignore\r\n    if (this.fireContinueTime && this.visible !== true) {\r\n        //時間制限付きの火でありながら、不可視となっている場合はジャンプしない\r\n        return;\r\n    }\r\n    if (ninja.readScroll.indexOf(ninja.game?.consts.FIRE_SCROLL_TITLE) > 0) {\r\n        //火の書を読んでいればジャンプする\r\n        //@ts-ignore\r\n        ninja.speedY = this.jumpHeight * -1;\r\n    }\r\n}\r\n\r\n//=======================================\r\n// 地蔵にタッチ\r\n//=======================================\r\nfunction onTouchJizo(ninja: Ninja) {\r\n    let objs = ninja.game?.objs;\r\n    for (let key in objs) {\r\n        if (objs[key].fireContinueTime) {\r\n            //fireContinueTimeを持っている要素を表示する\r\n            objs[key].visible = true;\r\n        }\r\n    }\r\n}\r\n\r\nexport { Page2 };\r\n","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\shared\\SnsShareButton.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\shared\\Author.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\Ninja3\\Page2.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\Ninja2\\Page2.tsx",["931"],"import * as React from \"react\";\r\nimport { appsPublicImg, gameStorage } from \"../../../../../common/consts\";\r\nimport { Ninja } from \"../../Games/NinjaGame2\";\r\nimport { NinjaChar } from \"./objs/ninja/ninja\";\r\nimport { Obj } from \"./objs/obj\";\r\n\r\n//オブジェクト素材画像----------------\r\n\r\n//岩\r\nconst imgRock = `${gameStorage}ninja1/objs/rock.png`;\r\n//岩（上下反転）\r\nconst imgRockR = `${gameStorage}ninja1/objs/rockRiverse.png`;\r\n//ポチ\r\nconst imgPochi = `${gameStorage}ninja1/objs/pochi.png`;\r\n//閉じている巻物\r\nconst imgScroll = `${gameStorage}ninja1/objs/scrollObj.png`;\r\n//開いている巻物\r\nconst imgScrollOpen = `${gameStorage}ninja1/objs/scrollOpen.png`;\r\n//シノ（先輩くのいち）\r\nconst imgShino = `${gameStorage}ninja1/objs/shino.png`;\r\n//屋敷（屋根）\r\nconst imgHouse1 = `${gameStorage}ninja2/objs/house.png`;\r\n//悪忍者\r\nconst imgBadNinja = `${appsPublicImg}ninja_bad.png`;\r\n//鷲\r\nconst imgWashi = `${gameStorage}ninja2/objs/washi.png`;\r\n//木箱\r\nconst imgBox1 = `${gameStorage}ninja2/objs/box.jpg`;\r\n//レンガ\r\nconst imgBlock1 = `${gameStorage}ninja2/objs/block.jpg`;\r\n//カニ\r\nconst imgKani = `${gameStorage}ninja2/objs/kani.png`;\r\n//フグ\r\nconst imgFugu = `${gameStorage}ninja2/objs/fugu.png`;\r\n//海藻\r\nconst imgKaisou = `${gameStorage}ninja2/objs/kaisou.png`;\r\n//デカい魚\r\nconst imgKimme = `${gameStorage}ninja2/objs/onikinme.png`;\r\n//FireBall\r\nconst imgFireBallR = `${gameStorage}ninja2/objs/fireBallR.png`;\r\n//扉\r\nconst imgDoor = `${gameStorage}ninja2/objs/tobira.jpg`;\r\n//木のブロック\r\nconst imgWoodenBlock = `${gameStorage}ninja2/objs/woodenBox.jpg`;\r\n//鍵\r\nconst imgKey = `${gameStorage}ninja2/objs/kagi.png`;\r\n//はしご\r\nconst imgHashigo = `${gameStorage}ninja2/objs/hashigo_wood.png`;\r\n//一つ目\r\nconst imgOneEye = `${gameStorage}ninja2/objs/hitotsume.png`;\r\n//青い火の玉\r\nconst imgBlueFire = `${gameStorage}ninja2/objs/hinotama.png`;\r\n//鬼\r\nconst imgOni = `${gameStorage}ninja2/objs/oni.png`;\r\n//ボス\r\nconst imgBoss = `${gameStorage}ninja2/objs/badDog.png`;\r\n//コウモリ\r\nconst imgBat = `${gameStorage}ninja2/objs/bat.png`;\r\n//看板\r\nconst imgKanban1 = `${gameStorage}ninja1/objs/kanban1.png`;\r\n//看板の矢印\r\nconst imgArrow1 = `${gameStorage}ninja1/objs/arrow1.png`;\r\n//鳥居\r\nconst imgTorii = `${gameStorage}ninja1/objs/torii.png`;\r\n\r\n//背景画像//---------------------------\r\n\r\n//stage1\r\nconst stage1 = `${gameStorage}ninja2/background/castle1.jpg`;\r\n//stage2\r\nconst stage2 = `${gameStorage}ninja2/background/whiteWall.jpg`;\r\n//stage3\r\nconst stage3 = `${gameStorage}ninja2/background/whiteWall2.jpg`;\r\n//stage4\r\nconst stage4 = `${gameStorage}ninja2/background/whiteWall3.jpg`;\r\n//stage5\r\nconst stage5 = `${gameStorage}ninja2/background/waterCastle.jpg`;\r\n//stage6～8\r\nconst inWater = `${gameStorage}ninja2/background/rockWall.jpg`;\r\n//stage9\r\nconst stage9 = `${gameStorage}ninja2/background/furo.jpg`;\r\n//stage10\r\nconst stage10 = `${gameStorage}ninja2/background/datsuiJo.jpg`;\r\n//stage11～13\r\nconst twoLayer = `${gameStorage}ninja2/background/washitsu.jpg`;\r\n//stage14\r\nconst stage14 = `${gameStorage}ninja2/background/wa1.jpg`;\r\n//stage15\r\nconst stage15 = `${gameStorage}ninja2/background/soto.jpg`;\r\n//stage16\r\nconst stage16 = `${gameStorage}ninja2/background/wa2.jpg`;\r\n//stage17\r\nconst stage17 = `${gameStorage}ninja2/background/wa3.jpg`;\r\n//stage18\r\nconst stage18 = `${gameStorage}ninja2/background/wa4.jpg`;\r\n//stage19\r\nconst stage19 = `${gameStorage}ninja2/background/boss.jpg`;\r\n//stage19（クリア後）\r\nconst stage19a = `${gameStorage}ninja2/background/afterBoss.jpg`;\r\n//stage20\r\nconst stage20 = `${gameStorage}ninja2/background/wa5.jpg`;\r\n\r\nexport default class Page2 extends React.Component {\r\n    props: any;\r\n    state: any;\r\n\r\n    terminalPC?: boolean;\r\n    lang: any;\r\n    prevStage?: number;\r\n    UL?: number;\r\n    ninja: any;\r\n    readElementScroll: any;\r\n    objOutOfScreen: any;\r\n    objWalls: any;\r\n    objFloor: any;\r\n    backgroundSetting: any;\r\n    consts: any;\r\n    lButton?: boolean;\r\n    rButton?: boolean;\r\n    jButton?: boolean;\r\n    timerId: any;\r\n    objs: any;\r\n    closeScroll?: boolean;\r\n    closeButton?: boolean;\r\n    pageStyle: any;\r\n    bgImg: any;\r\n\r\n    UNSAFE_componentWillMount() {\r\n        //(PC) or (スマホ/タブレット) 判定\r\n        this.terminalPC = this.checkTerminalPC();\r\n\r\n        //ゲームオーバー画面に送信するための言語情報\r\n        this.lang = this.props.language;\r\n\r\n        //前のステージ（ステージ変更判定に利用）\r\n        this.prevStage = 0;\r\n\r\n        //画面の高さと幅を取得\r\n        let pageSize = this.getWindowSize();\r\n\r\n        //【Unit Length】画面の高さを90等分した長さを、このゲームの単位長さとする\r\n        this.UL = pageSize.pageHeight / 90;\r\n\r\n        //前のステージから受け取った忍者の初期値を設定\r\n        this.ninja = this.props.ninja;\r\n\r\n        this.readElementScroll = this.props.readElementScroll;\r\n\r\n        this.ninja.game = this;\r\n\r\n        //画面外を黒くする要素\r\n        this.objOutOfScreen = {\r\n            outOfScreenLeft: {\r\n                size: 300,\r\n                posX: -300,\r\n                posY: -200,\r\n                onTouch: onTouchNothing,\r\n                divType: \"outOfScreen\",\r\n            },\r\n            outOfScreenRight: {\r\n                size: 300,\r\n                posX: 160,\r\n                posY: -200,\r\n                onTouch: onTouchNothing,\r\n                divType: \"outOfScreen\",\r\n            },\r\n            outOfScreenTop: {\r\n                size: 260,\r\n                posX: -50,\r\n                posY: -260,\r\n                onTouch: onTouchNothing,\r\n                divType: \"outOfScreen\",\r\n            },\r\n            outOfScreenBottom: {\r\n                size: 260,\r\n                posX: -50,\r\n                posY: 90,\r\n                onTouch: onTouchNothing,\r\n                divType: \"outOfScreen\",\r\n            },\r\n        };\r\n\r\n        //全ステージ共通の壁（render内で設定）\r\n        this.objWalls = {\r\n            leftWall: {\r\n                size: 300,\r\n                posX: -310,\r\n                posY: -200,\r\n                zIndex: 30,\r\n                onTouch: onTouchBlock,\r\n            },\r\n            rightWall: {\r\n                size: 300,\r\n                posX: 170,\r\n                posY: -200,\r\n                zIndex: 30,\r\n                onTouch: onTouchBlock,\r\n            },\r\n        };\r\n\r\n        //床（必要な場合、render内で設定）\r\n        this.objFloor = {\r\n            floor1: {\r\n                size: 200,\r\n                posX: -20,\r\n                posY: 79,\r\n                zIndex: 30,\r\n                onTouch: onTouchBlock,\r\n            },\r\n            floor2: {\r\n                size: 200,\r\n                posX: -20,\r\n                posY: 77,\r\n                zIndex: 30,\r\n                onTouch: onTouchBlock,\r\n            },\r\n            floor3: {\r\n                size: 200,\r\n                posX: -20,\r\n                posY: 76,\r\n                zIndex: 30,\r\n                onTouch: onTouchBlock,\r\n            },\r\n            floor4: {\r\n                size: 200,\r\n                posX: -20,\r\n                posY: 75,\r\n                zIndex: 30,\r\n                onTouch: onTouchBlock,\r\n            },\r\n        };\r\n\r\n        //背景の初期設定\r\n        this.backgroundSetting = {\r\n            /* 背景画像 */\r\n            backgroundImage: `url(${stage1})`,\r\n\r\n            /* 画像を常に天地左右の中央に配置 */\r\n            backgroundPosition: \"center center\",\r\n\r\n            /* 画像をタイル状に繰り返し表示しない */\r\n            backgroundRepeat: \"no-repeat\",\r\n\r\n            /* 表示するコンテナの大きさに基づいて、背景画像を調整 */\r\n            backgroundSize: \"cover\",\r\n\r\n            /* 背景画像が読み込まれる前に表示される背景のカラー */\r\n            backgroundColor: \"black\",\r\n        };\r\n\r\n        // ------------------------------------------------------------\r\n        // 定数設定\r\n        // ------------------------------------------------------------\r\n        if (this.props.language === \"Japanese\") {\r\n            this.consts = {\r\n                timeStep: 100,\r\n\r\n                //操作ボタン\r\n                BUTTON: \"btn btn-info btn-lg btn-block\",\r\n\r\n                //屋根の上でポチに触った時のメッセージ\r\n                POCHI_SCROLL_TITLE: \"あれが敵の城じゃ！\",\r\n                POCHI_SCROLL_MESSAGE:\r\n                    \"今回のお主の任務は、敵の城に忍び込み、\\n\" +\r\n                    \"敵の忍者の長を倒すことである。\\n\" +\r\n                    \"敵の手下捕まるでないぞ！検討を祈る！\",\r\n\r\n                //水辺でポチに触った時のメッセージ\r\n                POCHI_SCROLL2_TITLE: \"水路を使うがよい\",\r\n                POCHI_SCROLL2_MESSAGE:\r\n                    \"敵の城に忍び込むには、地下水路を使うのが良さそうじゃ。\\n\" +\r\n                    \"水中では [jump]ボタン を何度も押すことで、浮上できるぞ。\\n\" +\r\n                    \"さらに「火遁」は水中でも使える！検討を祈る！\",\r\n\r\n                //ボス部屋前でポチに触った時のメッセージ\r\n                POCHI_SCROLL3_TITLE: \"敵のボスはすぐそこじゃ！\",\r\n                POCHI_SCROLL3_MESSAGE:\r\n                    \"敵のボスに炎を当てればお主の勝ちじゃ！\\n\" +\r\n                    \"[<]ボタン と [>]ボタン を押しっぱなしにして\\n\" +\r\n                    \"火を吹いている間は、奴の手下どもの攻撃を受けないぞ！\",\r\n\r\n                //全クリ時にポチに触った時のメッセージ\r\n                POCHI_SCROLL4_TITLE: \"よくやった！\",\r\n                POCHI_SCROLL4_MESSAGE:\r\n                    \"ついにやつを倒したな！\\n\" +\r\n                    \"お主ももう、立派な忍者じゃ。\\n\" +\r\n                    \"これが敵の秘伝の巻物である。\",\r\n\r\n                //火遁の巻物\r\n                FIRE_SCROLL_TITLE: \"火遁\",\r\n                FIRE_SCROLL_MESSAGE:\r\n                    \"火遁の術を学ぶための巻物。\\n\" +\r\n                    \"[<]ボタン と [>]ボタン を同時に押すことで、火の玉を飛ばせるぞ。\\n\" +\r\n                    \"敵に当てることで、敵を倒すことができる！\",\r\n\r\n                //階段のシノに触った時のメッセージ\r\n                SHINO_SCROLL_TITLE: \"調子はどう？\",\r\n                SHINO_SCROLL_MESSAGE:\r\n                    \"貴方も火遁が使えるようになったのね。\\n\" +\r\n                    \"木の箱を見付けたら、炎をぶつけてみると良いわ。\\n\" +\r\n                    \"箱を壊して、中身を確認することができるわ。\",\r\n\r\n                //風呂場でシノに触った時のメッセージ\r\n                SHINO_SCROLL2_TITLE: \"鍵が必要なようね。\",\r\n                SHINO_SCROLL2_MESSAGE:\r\n                    \"城に入るための扉には鍵がかかっているわ。\\n\" +\r\n                    \"確か水の中で鍵を見た気がするけど…\\n\" +\r\n                    \"あなた、水路で鍵を拾ったりした？\",\r\n\r\n                //扉の部屋でシノに触った時のメッセージ\r\n                SHINO_SCROLL3_TITLE: \"鍵がかかっているわね...\",\r\n                SHINO_SCROLL3_MESSAGE:\r\n                    \"２つの扉の鍵は、この城のどこかにあるはず…\\n\" +\r\n                    \"扉を開けてあの箱を燃やせれば、はしごを登れそうね。\\n\" +\r\n                    \"敵のボスの部屋はすぐそこよ！\",\r\n\r\n                //水中のカギに触った時のメッセージ\r\n                KEY_SCROLL_TITLE: \"浴場の鍵\",\r\n                KEY_SCROLL_MESSAGE:\r\n                    \"城の風呂場の鍵を手に入れた！\\n\" +\r\n                    \"城に侵入する際に使おう！\\n\" +\r\n                    \"なくすでないぞ！\",\r\n\r\n                //鬼が守るカギに触った時のメッセージ\r\n                KEY2_SCROLL_TITLE: \"ボスの部屋の鍵\",\r\n                KEY2_SCROLL_MESSAGE:\r\n                    \"敵のボスがいる部屋への扉を開ける鍵。\\n\" +\r\n                    \"２つの鍵が必要。\",\r\n\r\n                //屋根裏のカギに触った時のメッセージ\r\n                KEY3_SCROLL_TITLE: \"ボス部屋の鍵\",\r\n                KEY3_SCROLL_MESSAGE:\r\n                    \"敵のボスの部屋への扉を通るための鍵。\\n\" +\r\n                    \"２つの鍵を集めると、ボスの部屋に入れる。\",\r\n\r\n                //最後の巻物に触った時のメッセージ\r\n                KOSUKE_SCROLL_TITLE: \"おめでとう！\",\r\n                KOSUKE_SCROLL_MESSAGE:\r\n                    \"クリアおめでとう！\\n\" +\r\n                    \"これで君も立派な忍者だ！\\n\" +\r\n                    \"次の章では、雪山の村を救おう！\",\r\n            };\r\n        } else {\r\n            this.consts = {\r\n                timeStep: 100,\r\n\r\n                //操作ボタン\r\n                BUTTON: \"btn btn-info btn-lg btn-block\",\r\n\r\n                //屋根の上でポチに触った時のメッセージ\r\n                POCHI_SCROLL_TITLE: \"Sneak into the enemy's castle!\",\r\n                POCHI_SCROLL_MESSAGE:\r\n                    \"Can you see the enemy's castle!?\\n\" +\r\n                    \"Your mission is to sneak into the castle, and steal the secret scroll!\\n\" +\r\n                    \"Don't touch the enemy! Good luck!\",\r\n\r\n                //水辺でポチに触った時のメッセージ\r\n                POCHI_SCROLL2_TITLE: \"Go under the water!\",\r\n                POCHI_SCROLL2_MESSAGE:\r\n                    \"Best way to sneak into the castle is by going under the water!\\n\" +\r\n                    \"In the water, you can swim by pushing [jump] button many times!\\n\" +\r\n                    \"Don't touch the enemy! Good luck!\",\r\n\r\n                //ボス部屋前でポチに触った時のメッセージ\r\n                POCHI_SCROLL3_TITLE: \"The boss is there!\",\r\n                POCHI_SCROLL3_MESSAGE:\r\n                    \"If your fire hits the Boss, you will win!\\n\" +\r\n                    \"While using fire pushing [<] button and [>] button,\\n\" +\r\n                    \"enemies cannot touch you! Good luck!\",\r\n\r\n                //全クリ時にポチに触った時のメッセージ\r\n                POCHI_SCROLL4_TITLE: \"You did it!\",\r\n                POCHI_SCROLL4_MESSAGE:\r\n                    \"You defeated the enemy!\\n\" +\r\n                    \"You have become such a strong Ninja!\\n\" +\r\n                    \"That is the enemy's secret scroll. Take it!\",\r\n\r\n                //火遁の巻物\r\n                FIRE_SCROLL_TITLE: \"火遁\",\r\n                FIRE_SCROLL_MESSAGE:\r\n                    \"This is the scroll to learn 'Fire Ball'.\\n\" +\r\n                    \"Push [<] button and [>] button at the same time.\\n\" +\r\n                    \"You can defeat the enemy using Fire Ball.\",\r\n\r\n                //階段のシノに触った時のメッセージ\r\n                SHINO_SCROLL_TITLE: \"Hello!\",\r\n                SHINO_SCROLL_MESSAGE:\r\n                    \"Now, you can use Fire Ball.\\n\" +\r\n                    \"When you find a wooden box, you should use fire.\\n\" +\r\n                    \"It will burn the box, and you can see what's inside.\",\r\n\r\n                //風呂場でシノに触った時のメッセージ\r\n                SHINO_SCROLL2_TITLE: \"Do you have the key?\",\r\n                SHINO_SCROLL2_MESSAGE:\r\n                    \"The door is locked!\\n\" +\r\n                    \"I think I saw the key in the water.\\n\" +\r\n                    \"Did you find the key?\",\r\n\r\n                //扉の部屋でシノに触った時のメッセージ\r\n                SHINO_SCROLL3_TITLE: \"The doors are locked...\",\r\n                SHINO_SCROLL3_MESSAGE:\r\n                    \"The keys for these two doors must be in this castle!\\n\" +\r\n                    \"The boss's room is just there. We need two keys!\\n\" +\r\n                    \"You should burn the wooden boxes to climb the ladder.\",\r\n\r\n                //水中のカギに触った時のメッセージ\r\n                KEY_SCROLL_TITLE: \"Key to the bath room\",\r\n                KEY_SCROLL_MESSAGE:\r\n                    \"You got the key of the bath room!\\n\" +\r\n                    \"You will use this to enter the castle.\\n\" +\r\n                    \"Don't lose it!\",\r\n\r\n                //鬼が守るカギに触った時のメッセージ\r\n                KEY2_SCROLL_TITLE: \"Key of the Boss's room\",\r\n                KEY2_SCROLL_MESSAGE:\r\n                    \"This is the key to the Boss's room.\\n\" +\r\n                    \"To enter the Boss's room, you need to collect two keys!\",\r\n\r\n                //屋根裏のカギに触った時のメッセージ\r\n                KEY3_SCROLL_TITLE: \"Key to enter the boss's room!\",\r\n                KEY3_SCROLL_MESSAGE:\r\n                    \"This is the key to the Boss's room.\\n\" +\r\n                    \"To enter the Boss's room, you need to collect two keys!\",\r\n\r\n                //最後の巻物に触った時のメッセージ\r\n                //天界でコウスケに触った時のメッセージ\r\n                KOSUKE_SCROLL_TITLE: \"Congratulations!\",\r\n                KOSUKE_SCROLL_MESSAGE:\r\n                    \"You completed the game!\\n\" +\r\n                    \"In the next chapter,\\n\" +\r\n                    \"save the village in the snowy mountain!\",\r\n            };\r\n        }\r\n\r\n        // ------------------------------------------------------------\r\n        // ステート初期設定\r\n        // ------------------------------------------------------------\r\n        this.setState({\r\n            screenStyle: {\r\n                width: pageSize.pageWidth,\r\n                height: pageSize.pageHeight - 15 * this.UL,\r\n                ...this.backgroundSetting,\r\n            },\r\n            ninjaStat: {\r\n                left: true,\r\n                ninjaX: this.ninja.posX * this.UL,\r\n                ninjaY: this.ninja.posY * this.UL,\r\n            },\r\n        });\r\n\r\n        //←ボタン押下判定　初期値\r\n        this.lButton = false;\r\n        //→ボタン押下判定　初期値\r\n        this.rButton = false;\r\n        //jumpボタン押下判定　初期値\r\n        this.jButton = false;\r\n\r\n        //キーボード押下時イベントセット\r\n        this.setKeyboardEvent(this);\r\n\r\n        //タイムステップ毎に処理を呼び出す\r\n        this.timerId = setInterval(() => {\r\n            //タイムステップごとの計算\r\n\r\n            /* ↓　物体速度・位置計算　↓ */\r\n\r\n            //ボタン押下判定\r\n            if (this.lButton === false && this.rButton === false) {\r\n                this.ninja.speedX = 0;\r\n            } else {\r\n                if (this.lButton === true && this.rButton === true) {\r\n                    //右と左同時押しでファイヤーボール\r\n                    if (\r\n                        this.ninja.readScroll.indexOf(\r\n                            this.ninja.game.consts.FIRE_SCROLL_TITLE\r\n                        ) >= 0\r\n                    ) {\r\n                        //火遁の書を既に読んでいる場合\r\n\r\n                        this.objs[\"fireBall\" + this.ninja.fireBallCount] = {\r\n                            size: 12,\r\n                            posX: this.ninja.posX,\r\n                            posY: this.ninja.posY,\r\n                            zIndex: 999 - this.ninja.fireBallCount,\r\n                            img: imgFireBallR,\r\n                            onTouch: onTouchNothing,\r\n                            fireBall: true,\r\n                            boolLeft: this.ninja.boolLeft,\r\n                            eachTime: eachTimeFireBall,\r\n                        };\r\n                        this.ninja.fireBallCount++;\r\n                    }\r\n                } else {\r\n                    if (this.lButton === true) {\r\n                        this.ninja.speedX = this.ninja.inWater ? -3 : -6;\r\n                        this.ninja.boolLeft = true; //画像左向き\r\n                    } else if (this.rButton === true) {\r\n                        this.ninja.speedX = this.ninja.inWater ? 3 : 6;\r\n                        this.ninja.boolLeft = false; //画像右向き\r\n                    }\r\n                }\r\n            }\r\n\r\n            //前タイムステップでジャンプをした時のため、元に戻す\r\n            this.closeScroll = false;\r\n\r\n            if (this.jButton === true) {\r\n                if (this.ninja.speedY === 0) {\r\n                    //通常ジャンプ\r\n                    this.ninja.speedY = -11;\r\n\r\n                    //ジャンプ時に巻物を閉じる\r\n                    this.closeScroll = true;\r\n                }\r\n                if (this.ninja.inWater) {\r\n                    //水中\r\n                    if (this.ninja.posY > -10) {\r\n                        //2段ジャンプ実行限界高度に達していない\r\n                        this.ninja.speedY = -7;\r\n                    }\r\n                }\r\n                this.jButton = false;\r\n            }\r\n\r\n            if (this.closeButton === true) {\r\n                //巻物を閉じる（Enterキー等押下時）\r\n                this.closeScroll = true;\r\n            }\r\n\r\n            //重力加速度\r\n            this.ninja.speedY += this.ninja.inWater ? 1.1 : 2.1;\r\n\r\n            //落下速度限界\r\n            if (this.ninja.inWater) {\r\n                //水中\r\n                if (this.ninja.speedY > 2) {\r\n                    this.ninja.speedY = 2;\r\n                }\r\n            } else {\r\n                //陸上\r\n                if (this.ninja.speedY > 9) {\r\n                    this.ninja.speedY = 9;\r\n                }\r\n            }\r\n\r\n            //位置計算\r\n            this.ninja.posX += this.ninja.speedX;\r\n            this.ninja.posY += this.ninja.speedY;\r\n\r\n            //オブジェクトとの接触判定\r\n\r\n            //忍者の上下左右の端の位置\r\n            let ninjaLeft = this.ninja.posX;\r\n            let ninjaRight = ninjaLeft + this.ninja.size;\r\n            let ninjaTop = this.ninja.posY;\r\n            let ninjaFoot = ninjaTop + this.ninja.size;\r\n\r\n            for (let key in this.objs) {\r\n                //途中でステージ遷移したら、関数を中止するためのフラグ\r\n                let stageChangedFlag = \"\";\r\n\r\n                //オブジェクトの上下左右の端の位置\r\n                let objLeft = this.objs[key].posX;\r\n                let objRight = objLeft + this.objs[key].size;\r\n                let objTop = this.objs[key].posY;\r\n                let objFoot = objTop + this.objs[key].size;\r\n\r\n                //忍者が上から\r\n                if (\r\n                    checkRelativityLeftAndTop(\r\n                        ninjaTop,\r\n                        objTop,\r\n                        objLeft,\r\n                        objRight,\r\n                        ninjaFoot,\r\n                        ninjaLeft,\r\n                        ninjaRight,\r\n                        this.ninja.size\r\n                    ) === true\r\n                ) {\r\n                    //ステージ遷移をしていたら、関数中止\r\n                    if (stageChangedFlag && stageChangedFlag === \"changed\") {\r\n                        return;\r\n                    }\r\n                    stageChangedFlag = this.objs[key].onTouch(\r\n                        this.ninja,\r\n                        \"upper\"\r\n                    );\r\n                }\r\n                //忍者が右から\r\n                if (\r\n                    checkRelativityRightAndFoot(\r\n                        objRight,\r\n                        ninjaRight,\r\n                        objTop,\r\n                        objFoot,\r\n                        ninjaLeft,\r\n                        ninjaTop,\r\n                        ninjaFoot,\r\n                        this.ninja.size\r\n                    ) === true\r\n                ) {\r\n                    //ステージ遷移をしていたら、関数中止\r\n                    if (stageChangedFlag && stageChangedFlag === \"changed\") {\r\n                        return;\r\n                    }\r\n                    stageChangedFlag = this.objs[key].onTouch(\r\n                        this.ninja,\r\n                        \"right\"\r\n                    );\r\n                }\r\n                //忍者が下から\r\n                if (\r\n                    checkRelativityRightAndFoot(\r\n                        objFoot,\r\n                        ninjaFoot,\r\n                        objLeft,\r\n                        objRight,\r\n                        ninjaTop,\r\n                        ninjaLeft,\r\n                        ninjaRight,\r\n                        this.ninja.size\r\n                    ) === true\r\n                ) {\r\n                    //ステージ遷移をしていたら、関数中止\r\n                    if (stageChangedFlag && stageChangedFlag === \"changed\") {\r\n                        return;\r\n                    }\r\n                    stageChangedFlag = this.objs[key].onTouch(\r\n                        this.ninja,\r\n                        \"lower\"\r\n                    );\r\n                }\r\n                //忍者が左から\r\n                if (\r\n                    checkRelativityLeftAndTop(\r\n                        ninjaLeft,\r\n                        objLeft,\r\n                        objTop,\r\n                        objFoot,\r\n                        ninjaRight,\r\n                        ninjaTop,\r\n                        ninjaFoot,\r\n                        this.ninja.size\r\n                    ) === true\r\n                ) {\r\n                    //ステージ遷移をしていたら、関数中止\r\n                    if (stageChangedFlag && stageChangedFlag === \"changed\") {\r\n                        return;\r\n                    }\r\n                    stageChangedFlag = this.objs[key].onTouch(\r\n                        this.ninja,\r\n                        \"left\"\r\n                    );\r\n                }\r\n\r\n                //ステージ遷移をしていたら、関数中止\r\n                if (stageChangedFlag && stageChangedFlag === \"changed\") {\r\n                    return;\r\n                }\r\n\r\n                //各タイムステップごとの処理を持っていれば、実行する\r\n                if (this.objs[key].eachTime) {\r\n                    this.objs[key].eachTime(this.ninja, key);\r\n                }\r\n\r\n                //ステージ遷移をしていたら、関数中止\r\n                if (stageChangedFlag && stageChangedFlag === \"changed\") {\r\n                    return;\r\n                }\r\n            }\r\n            /* ↑　物体速度・位置計算　↑ */\r\n\r\n            //ページサイズ取得（ウィンドウサイズが変更された時のため）\r\n            let pageSize = this.getWindowSize();\r\n\r\n            //画面の高さを90等分した長さを、このゲームの「単位長さ」とする\r\n            this.UL = pageSize.pageHeight / 90;\r\n\r\n            //物体の位置などを更新し、再描画\r\n            this.setState({\r\n                screenStyle: {\r\n                    width: pageSize.pageWidth,\r\n                    height: pageSize.pageHeight - 15 * this.UL,\r\n                    ...this.backgroundSetting,\r\n                },\r\n                ninjaStat: {\r\n                    left: this.ninja.boolLeft,\r\n                    ninjaX: this.ninja.posX * this.UL,\r\n                    ninjaY: this.ninja.posY * this.UL,\r\n                },\r\n            });\r\n        }, this.consts.timeStep);\r\n    }\r\n\r\n    checkTerminalPC() {\r\n        // ------------------------------------------------------------\r\n        // (PC) or (スマホ/タブレット) 判定\r\n        // ------------------------------------------------------------\r\n        if (navigator.userAgent.match(/(iPhone|iPad|iPod|Android)/i)) {\r\n            // スマホ・タブレット（iOS・Android）の場合\r\n            return false;\r\n        } else {\r\n            // PCの場合\r\n            return true;\r\n        }\r\n    }\r\n\r\n    //---------------↓　resize　↓---------------\r\n    getWindowSize() {\r\n        let pageWidth, pageHeight;\r\n        let screenWidth = window.innerWidth;\r\n        let screenHeight = window.innerHeight;\r\n\r\n        if (screenWidth > screenHeight) {\r\n            //横長\r\n            pageHeight = screenHeight;\r\n            pageWidth = (pageHeight * 16) / 9;\r\n\r\n            if (pageWidth > screenWidth) {\r\n                //横がはみ出たら(正方形に近い画面)\r\n                pageWidth = screenWidth;\r\n                pageHeight = (pageWidth * 9) / 16;\r\n\r\n                this.pageStyle = {\r\n                    //ページの余白設定\r\n                    position: \"absolute\",\r\n                    top: (screenHeight - pageHeight) / 2,\r\n                };\r\n            } else {\r\n                this.pageStyle = {\r\n                    //ページの余白設定\r\n                    position: \"absolute\",\r\n                    left: (screenWidth - pageWidth) / 2,\r\n                };\r\n            }\r\n        } else {\r\n            //縦長\r\n            pageHeight = (screenWidth * 9) / 10;\r\n            pageWidth = (pageHeight * 16) / 9;\r\n\r\n            if (pageWidth > (screenHeight * 9) / 10) {\r\n                //横がはみ出そうだったら(正方形に近い画面)\r\n                pageWidth = (screenHeight * 9) / 10;\r\n                pageHeight = (pageWidth * 9) / 16;\r\n\r\n                this.pageStyle = {\r\n                    //ページの余白設定\r\n                    position: \"absolute\",\r\n                    left: (screenWidth + pageHeight) / 2,\r\n                    top: screenHeight / 20,\r\n                };\r\n            } else {\r\n                this.pageStyle = {\r\n                    //ページの余白設定\r\n                    position: \"absolute\",\r\n                    left: (screenWidth * 95) / 100,\r\n                    top: (screenHeight - pageWidth) / 2,\r\n                };\r\n            }\r\n        }\r\n\r\n        return { pageWidth: pageWidth, pageHeight: pageHeight };\r\n    }\r\n    //---------------↑　resize　↑---------------\r\n\r\n    setKeyboardEvent(objGame: any) {\r\n        // ------------------------------------------------------------\r\n        // キーボードを押したときに実行されるイベント\r\n        // ------------------------------------------------------------\r\n        document.onkeydown = function (e: any) {\r\n            if (!e) e = window.event; // レガシー\r\n\r\n            // ------------------------------------------------------------\r\n            // 入力情報を取得\r\n            // ------------------------------------------------------------\r\n            // キーコード\r\n            let keyCode = e.keyCode;\r\n            let keyType;\r\n            if (keyCode === 37) {\r\n                keyType = \"left\";\r\n            } else if (keyCode === 39) {\r\n                keyType = \"right\";\r\n            } else if (keyCode === 38) {\r\n                keyType = \"jump\";\r\n            } else if (keyCode === 32) {\r\n                keyType = \"jump\";\r\n            } else if (\r\n                keyCode === 13 ||\r\n                keyCode === 8 ||\r\n                keyCode === 46 ||\r\n                keyCode === 27\r\n            ) {\r\n                keyType = \"close\";\r\n            }\r\n            objGame.onClickButton(keyType);\r\n        };\r\n\r\n        // ------------------------------------------------------------\r\n        // キーボードを離したときに実行されるイベント\r\n        // ------------------------------------------------------------\r\n        document.onkeyup = function (e: any) {\r\n            if (!e) e = window.event; // レガシー\r\n\r\n            // キーコード\r\n            let keyCode = e.keyCode;\r\n            let keyType;\r\n            if (keyCode === 37) {\r\n                keyType = \"left\";\r\n            } else if (keyCode === 39) {\r\n                keyType = \"right\";\r\n            } else if (keyCode === 38) {\r\n                keyType = \"jump\";\r\n            } else if (keyCode === 32) {\r\n                keyType = \"jump\";\r\n            } else if (\r\n                keyCode === 13 ||\r\n                keyCode === 8 ||\r\n                keyCode === 46 ||\r\n                keyCode === 27\r\n            ) {\r\n                keyType = \"close\";\r\n            }\r\n            objGame.onMouseUp(keyType);\r\n        };\r\n    }\r\n\r\n    //ボタン押下時処理\r\n    onClickButton(btnType: string) {\r\n        if (btnType === \"left\") {\r\n            //←ボタン押下判定\r\n            this.lButton = true;\r\n        } else if (btnType === \"right\") {\r\n            //→ボタン押下判定\r\n            this.rButton = true;\r\n        } else if (btnType === \"jump\") {\r\n            //jumpボタン押下判定\r\n            this.jButton = true;\r\n        } else if (btnType === \"close\") {\r\n            //closeキー押下判定（Enter、Delete等）\r\n            this.closeButton = true;\r\n        }\r\n    }\r\n    //ボタン押下終了時処理\r\n    onMouseUp(btnType: string) {\r\n        if (btnType === \"left\") {\r\n            //←ボタン押下判定\r\n            this.lButton = false;\r\n        } else if (btnType === \"right\") {\r\n            //→ボタン押下判定\r\n            this.rButton = false;\r\n        } else if (btnType === \"close\") {\r\n            //closeキー押下判定（Enter、Delete等）\r\n            this.closeButton = false;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if (this.prevStage !== this.props.stage) {\r\n            //ステージ変更時のみ1回実行\r\n\r\n            //忍者のFireBallCountを0に戻す\r\n            this.ninja.fireBallCount = 0;\r\n\r\n            //水中判定を一旦falseとする（水中の場合は、各ステージにて代入）\r\n            this.ninja.inWater = false;\r\n\r\n            if (this.props.stage === 1) {\r\n                // ------------------------------------------------------------\r\n                // ステージ1 (出発地点　屋根の上)\r\n                // ------------------------------------------------------------\r\n                this.objs = {\r\n                    ...this.objOutOfScreen,\r\n                    ...this.objWalls,\r\n\r\n                    house1Pic: {\r\n                        size: 60,\r\n                        posX: 120,\r\n                        posY: 55,\r\n                        zIndex: 35,\r\n                        img: imgHouse1,\r\n                        onTouch: onTouchNothing,\r\n                    },\r\n                    house1Actual: {\r\n                        size: 60,\r\n                        posX: 120,\r\n                        posY: 67,\r\n                        onTouch: onTouchTree,\r\n                    },\r\n\r\n                    house2Pic: {\r\n                        size: 60,\r\n                        posX: 90,\r\n                        posY: 55,\r\n                        zIndex: 34,\r\n                        img: imgHouse1,\r\n                        onTouch: onTouchNothing,\r\n                    },\r\n                    houseActual: {\r\n                        size: 60,\r\n                        posX: 97,\r\n                        posY: 67,\r\n                        onTouch: onTouchTree,\r\n                    },\r\n\r\n                    pochi: {\r\n                        size: 10,\r\n                        posX: 115,\r\n                        posY: 53,\r\n                        zIndex: 20,\r\n                        img: imgPochi,\r\n                        onTouch: onTouchScrollOpener,\r\n                        openTargetTitle: this.consts.POCHI_SCROLL_TITLE,\r\n                    },\r\n                    pochiScroll: {\r\n                        size: 150,\r\n                        posX: 5,\r\n                        posY: 5,\r\n                        zIndex: 1000,\r\n                        img: imgScrollOpen,\r\n                        scroll: true,\r\n                        visible: false,\r\n                        onTouch: onTouchNothing,\r\n                        title: this.consts.POCHI_SCROLL_TITLE,\r\n                        message: this.consts.POCHI_SCROLL_MESSAGE,\r\n                        fontSize: 3,\r\n                        speakerImg: imgPochi,\r\n                    },\r\n\r\n                    bottomGate: {\r\n                        size: 300,\r\n                        posX: -70,\r\n                        posY: 80,\r\n                        zIndex: 30,\r\n                        next: 2,\r\n                        onTouch: onTouchGateTop1,\r\n                        changeStage: this.props.changeStage,\r\n                    },\r\n                };\r\n                //ステージの背景画像を設定\r\n                this.bgImg = stage1;\r\n            } else if (this.props.stage === 2) {\r\n                // ------------------------------------------------------------\r\n                // ステージ2 (ファイヤーボールの書)\r\n                // ------------------------------------------------------------\r\n                this.objs = {\r\n                    ...this.objOutOfScreen,\r\n                    ...this.objWalls,\r\n                    ...this.objFloor,\r\n\r\n                    fireBallDummy: {\r\n                        //FireBallの画像初期表示速度向上のためのダミー\r\n                        size: 13,\r\n                        posX: -100,\r\n                        posY: 60,\r\n                        speedX: 0,\r\n                        speedY: 0,\r\n                        zIndex: 20,\r\n                        img: imgFireBallR,\r\n                        onTouch: onTouchNothing,\r\n                    },\r\n                    scrollFireBallIcon: {\r\n                        size: 10,\r\n                        posX: 105,\r\n                        posY: 46,\r\n                        boolLeft: true,\r\n                        zIndex: 22,\r\n                        img: imgScroll,\r\n                        onTouch: onTouchScrollOpener,\r\n                        openTargetTitle: this.consts.FIRE_SCROLL_TITLE,\r\n                    },\r\n                    fireBallScrollOpened: {\r\n                        size: 150,\r\n                        posX: 5,\r\n                        posY: 5,\r\n                        zIndex: 1000,\r\n                        img: imgScrollOpen,\r\n                        scroll: true,\r\n                        visible: false,\r\n                        onTouch: onTouchNothing,\r\n                        title: this.consts.FIRE_SCROLL_TITLE,\r\n                        message: this.consts.FIRE_SCROLL_MESSAGE,\r\n                        fontSize: 3,\r\n                    },\r\n                    rock1Pic: {\r\n                        size: 40,\r\n                        posX: 90,\r\n                        posY: 50,\r\n                        zIndex: 20,\r\n                        img: imgRock,\r\n                        onTouch: onTouchNothing,\r\n                    },\r\n                    rock1Actual: {\r\n                        size: 40,\r\n                        posX: 90,\r\n                        posY: 53,\r\n                        zIndex: 30,\r\n                        onTouch: onTouchBlock,\r\n                    },\r\n                    shino: {\r\n                        size: 10,\r\n                        posX: 30,\r\n                        posY: 61,\r\n                        zIndex: 17,\r\n                        img: imgShino,\r\n                        onTouch: onTouchScrollOpener,\r\n                        openTargetTitle: this.consts.SHINO_SCROLL_TITLE,\r\n                    },\r\n                    shinoScroll: {\r\n                        size: 150,\r\n                        posX: 5,\r\n                        posY: 5,\r\n                        zIndex: 1000,\r\n                        img: imgScrollOpen,\r\n                        scroll: true,\r\n                        visible: false,\r\n                        onTouch: onTouchNothing,\r\n                        title: this.consts.SHINO_SCROLL_TITLE,\r\n                        message: this.consts.SHINO_SCROLL_MESSAGE,\r\n                        fontSize: 3,\r\n                        speakerImg: imgShino,\r\n                    },\r\n                    topGate: {\r\n                        size: 300,\r\n                        posX: -70,\r\n                        posY: -100,\r\n                        zIndex: 30,\r\n                        next: 1,\r\n                        onTouch: onTouchGateTop2,\r\n                        changeStage: this.props.changeStage,\r\n                    },\r\n                    leftGateWall: {\r\n                        size: 300,\r\n                        posX: -300,\r\n                        posY: -200,\r\n                        zIndex: 30,\r\n                        next: 3,\r\n                        onTouch: onTouchGateWall,\r\n                        changeStage: this.props.changeStage,\r\n                    },\r\n                };\r\n                //ステージの背景画像を設定\r\n                this.bgImg = stage2;\r\n            } else if (this.props.stage === 3) {\r\n                // ------------------------------------------------------------\r\n                // ステージ3 (鷲と白壁)\r\n                // ------------------------------------------------------------\r\n                this.objs = {\r\n                    ...this.objOutOfScreen,\r\n                    ...this.objWalls,\r\n                    ...this.objFloor,\r\n\r\n                    washi1: {\r\n                        size: 11,\r\n                        posX: 0,\r\n                        posY: 0,\r\n                        speedX: 2,\r\n                        speedY: 1,\r\n                        zIndex: 20,\r\n                        img: imgWashi,\r\n                        onTouch: onTouchEnemy,\r\n                        enemy: true,\r\n                        eachTime: eachTimeEnemy,\r\n                    },\r\n                    washi2: {\r\n                        size: 11,\r\n                        posX: -40,\r\n                        posY: -60,\r\n                        speedX: 2,\r\n                        speedY: 1,\r\n                        zIndex: 20,\r\n                        img: imgWashi,\r\n                        onTouch: onTouchEnemy,\r\n                        enemy: true,\r\n                        eachTime: eachTimeEnemy,\r\n                    },\r\n                    washi3: {\r\n                        size: 11,\r\n                        posX: 0,\r\n                        posY: -100,\r\n                        speedX: 2,\r\n                        speedY: 1,\r\n                        zIndex: 20,\r\n                        img: imgWashi,\r\n                        onTouch: onTouchEnemy,\r\n                        enemy: true,\r\n                        eachTime: eachTimeEnemy,\r\n                    },\r\n\r\n                    box1: {\r\n                        size: 20,\r\n                        posX: 105,\r\n                        posY: 55,\r\n                        speedX: 0,\r\n                        speedY: 0,\r\n                        zIndex: 19,\r\n                        img: imgBox1,\r\n                        onTouch: onTouchBlock,\r\n                        enemy: true,\r\n                        eachTime: eachTimeEnemy,\r\n                    },\r\n\r\n                    rightGateWall: {\r\n                        size: 300,\r\n                        posX: 160,\r\n                        posY: -200,\r\n                        zIndex: 30,\r\n                        next: 2,\r\n                        onTouch: onTouchGateWall,\r\n                        changeStage: this.props.changeStage,\r\n                    },\r\n                    leftGateWall: {\r\n                        size: 300,\r\n                        posX: -300,\r\n                        posY: -200,\r\n                        zIndex: 30,\r\n                        next: 4,\r\n                        onTouch: onTouchGateWall,\r\n                        changeStage: this.props.changeStage,\r\n                    },\r\n                };\r\n                //ステージの背景画像を設定\r\n                this.bgImg = stage3;\r\n            } else if (this.props.stage === 4) {\r\n                // ------------------------------------------------------------\r\n                // ステージ4 (岩に隠れた忍者たち)\r\n                // ------------------------------------------------------------\r\n                this.objs = {\r\n                    ...this.objOutOfScreen,\r\n                    ...this.objWalls,\r\n                    ...getHoleFloor(80, 130),\r\n\r\n                    rock1Pic: {\r\n                        size: 40,\r\n                        posX: 60,\r\n                        posY: 50,\r\n                        zIndex: 30,\r\n                        img: imgRock,\r\n                        onTouch: onTouchNothing,\r\n                    },\r\n                    rock1Actual: {\r\n                        size: 40,\r\n                        posX: 60,\r\n                        posY: 53,\r\n                        zIndex: 30,\r\n                        onTouch: onTouchBlock,\r\n                    },\r\n\r\n                    rock2Pic: {\r\n                        size: 20,\r\n                        posX: 120,\r\n                        posY: 60,\r\n                        zIndex: 30,\r\n                        img: imgRock,\r\n                        onTouch: onTouchNothing,\r\n                    },\r\n                    rock2Actual: {\r\n                        size: 20,\r\n                        posX: 120,\r\n                        posY: 63,\r\n                        zIndex: 30,\r\n                        onTouch: onTouchBlock,\r\n                    },\r\n\r\n                    riverPic: {\r\n                        size: 50,\r\n                        posX: 80,\r\n                        posY: 69,\r\n                        divType: \"water\",\r\n                        zIndex: 29,\r\n                        onTouch: onTouchNothing,\r\n                    },\r\n\r\n                    enemy1: {\r\n                        size: 13,\r\n                        posX: 74,\r\n                        xMax: 74,\r\n                        posY: 60,\r\n                        speedX: 1,\r\n                        speedY: 0,\r\n                        zIndex: 19,\r\n                        img: imgBadNinja,\r\n                        onTouch: onTouchEnemy,\r\n                        enemy: true,\r\n                        eachTime: eachTimeEnemy,\r\n                    },\r\n                    enemy2: {\r\n                        size: 13,\r\n                        posX: 74,\r\n                        xMax: 74,\r\n                        posY: 60,\r\n                        speedX: 2,\r\n                        speedY: 0,\r\n                        zIndex: 19,\r\n                        img: imgBadNinja,\r\n                        onTouch: onTouchEnemy,\r\n                        enemy: true,\r\n                        eachTime: eachTimeEnemy,\r\n                    },\r\n                    enemy3: {\r\n                        size: 13,\r\n                        posX: 74,\r\n                        xMax: 74,\r\n                        posY: 60,\r\n                        speedX: 2.5,\r\n                        speedY: 0,\r\n                        zIndex: 19,\r\n                        img: imgBadNinja,\r\n                        onTouch: onTouchEnemy,\r\n                        enemy: true,\r\n                        eachTime: eachTimeEnemy,\r\n                    },\r\n\r\n                    rightGateWall: {\r\n                        size: 300,\r\n                        posX: 160,\r\n                        posY: -200,\r\n                        zIndex: 30,\r\n                        next: 3,\r\n                        onTouch: onTouchGateWall,\r\n                        changeStage: this.props.changeStage,\r\n                    },\r\n                    leftGateWall: {\r\n                        size: 300,\r\n                        posX: -300,\r\n                        posY: -200,\r\n                        zIndex: 30,\r\n                        next: 5,\r\n                        onTouch: onTouchGateWall,\r\n                        changeStage: this.props.changeStage,\r\n                    },\r\n                    bottomGate: {\r\n                        size: 300,\r\n                        posX: -70,\r\n                        posY: 100,\r\n                        zIndex: 30,\r\n                        next: 7,\r\n                        onTouch: onTouchStageChangeCommon,\r\n                        nextX: 100,\r\n                        nextY: 0,\r\n                        nextLeft: true,\r\n                        changeStage: this.props.changeStage,\r\n                    },\r\n                };\r\n                //ステージの背景画像を設定\r\n                this.bgImg = stage4;\r\n            } else if (this.props.stage === 5) {\r\n                // ------------------------------------------------------------\r\n                // ステージ5 (水辺の城)\r\n                // ------------------------------------------------------------\r\n                this.objs = {\r\n                    ...this.objOutOfScreen,\r\n                    ...this.objWalls,\r\n\r\n                    rock1Pic: {\r\n                        size: 100,\r\n                        posX: 86,\r\n                        posY: 67,\r\n                        zIndex: 26,\r\n                        img: imgRockR,\r\n                        onTouch: onTouchNothing,\r\n                    },\r\n                    rock1Actual: {\r\n                        size: 100,\r\n                        posX: 95,\r\n                        posY: 71,\r\n                        zIndex: 30,\r\n                        onTouch: onTouchBlock,\r\n                    },\r\n                    rock2Pic: {\r\n                        size: 100,\r\n                        posX: 66,\r\n                        posY: 67,\r\n                        zIndex: 26,\r\n                        img: imgRockR,\r\n                        onTouch: onTouchNothing,\r\n                    },\r\n                    rock2Actual: {\r\n                        size: 100,\r\n                        posX: 70,\r\n                        posY: 71,\r\n                        zIndex: 30,\r\n                        onTouch: onTouchBlock,\r\n                    },\r\n\r\n                    pochi: {\r\n                        size: 10,\r\n                        posX: 87,\r\n                        posY: 57,\r\n                        zIndex: 20,\r\n                        img: imgPochi,\r\n                        onTouch: onTouchScrollOpener,\r\n                        openTargetTitle: this.consts.POCHI_SCROLL2_TITLE,\r\n                    },\r\n                    pochiScroll: {\r\n                        size: 150,\r\n                        posX: 5,\r\n                        posY: 5,\r\n                        zIndex: 1000,\r\n                        img: imgScrollOpen,\r\n                        scroll: true,\r\n                        visible: false,\r\n                        onTouch: onTouchNothing,\r\n                        title: this.consts.POCHI_SCROLL2_TITLE,\r\n                        message: this.consts.POCHI_SCROLL2_MESSAGE,\r\n                        fontSize: 3,\r\n                        speakerImg: imgPochi,\r\n                    },\r\n                    riverPic: {\r\n                        size: 200,\r\n                        posX: -20,\r\n                        posY: 73,\r\n                        divType: \"water\",\r\n                        zIndex: 30,\r\n                        onTouch: onTouchNothing,\r\n                    },\r\n\r\n                    rightGateWall: {\r\n                        size: 300,\r\n                        posX: 160,\r\n                        posY: -200,\r\n                        zIndex: 30,\r\n                        next: 4,\r\n                        onTouch: onTouchGateWall,\r\n                        changeStage: this.props.changeStage,\r\n                    },\r\n                    bottomGate: {\r\n                        size: 300,\r\n                        posX: -70,\r\n                        posY: 80,\r\n                        zIndex: 30,\r\n                        next: 6,\r\n                        onTouch: onTouchStageChangeCommon,\r\n                        nextX: 10,\r\n                        nextY: 0,\r\n                        nextLeft: false,\r\n                        changeStage: this.props.changeStage,\r\n                    },\r\n                };\r\n                //ステージの背景画像を設定\r\n                this.bgImg = stage5;\r\n            } else if (this.props.stage === 6) {\r\n                this.ninja.inWater = true;\r\n\r\n                // ------------------------------------------------------------\r\n                // ステージ6 (水路１)\r\n                // ------------------------------------------------------------\r\n                this.objs = {\r\n                    ...this.objOutOfScreen,\r\n                    ...this.objWalls,\r\n                    ...this.objFloor,\r\n\r\n                    ...getKeys(\r\n                        this.ninja,\r\n                        120,\r\n                        20,\r\n                        20,\r\n                        this.consts.KEY_SCROLL_TITLE\r\n                    ),\r\n\r\n                    keyScroll: {\r\n                        size: 150,\r\n                        posX: 5,\r\n                        posY: 5,\r\n                        zIndex: 1000,\r\n                        img: imgScrollOpen,\r\n                        scroll: true,\r\n                        visible: false,\r\n                        onTouch: onTouchNothing,\r\n                        title: this.consts.KEY_SCROLL_TITLE,\r\n                        message: this.consts.KEY_SCROLL_MESSAGE,\r\n                        fontSize: 3,\r\n                        speakerImg: imgKey,\r\n                    },\r\n\r\n                    //レンガのブロック\r\n                    ...getBlocks(\r\n                        10,\r\n                        [\r\n                            [6, 0],\r\n                            [7, 0],\r\n                            [8, 0],\r\n                            [9, 0],\r\n                            [10, 0],\r\n                            [6, 1],\r\n                            [7, 1],\r\n                            [8, 1],\r\n                            [9, 1],\r\n                            [10, 1],\r\n                            [6, 2],\r\n                            [7, 2],\r\n                            [8, 2],\r\n                            [9, 2],\r\n                            [10, 2],\r\n                            [10, 3],\r\n                            [11, 3],\r\n                            [12, 3],\r\n                            [13, 3],\r\n                            [14, 3],\r\n                            [15, 3],\r\n                            [16, 3],\r\n                            [10, 4],\r\n                            [11, 4],\r\n                            [12, 4],\r\n                            [13, 4],\r\n                            [14, 4],\r\n                            [15, 4],\r\n                            [16, 4],\r\n                            [2, 5],\r\n                            [3, 5],\r\n                            [4, 5],\r\n                            [5, 5],\r\n                            [6, 5],\r\n                            [7, 5],\r\n                            [10, 5],\r\n                            [11, 5],\r\n                            [12, 5],\r\n                            [13, 5],\r\n                            [14, 5],\r\n                            [15, 5],\r\n                            [16, 5],\r\n                            [2, 6],\r\n                            [3, 6],\r\n                            [4, 6],\r\n                            [5, 6],\r\n                            [6, 6],\r\n                            [7, 6],\r\n                            [1, 7],\r\n                            [0, 7],\r\n                            [2, 7],\r\n                            [3, 7],\r\n                            [4, 7],\r\n                            [5, 7],\r\n                            [6, 7],\r\n                            [7, 7],\r\n                        ],\r\n                        onTouchBlock,\r\n                        imgBlock1,\r\n                        23\r\n                    ),\r\n\r\n                    box1: {\r\n                        size: 17,\r\n                        posX: 63,\r\n                        posY: 33,\r\n                        speedX: 0,\r\n                        speedY: 0,\r\n                        zIndex: 22,\r\n                        img: imgBox1,\r\n                        onTouch: onTouchBlock,\r\n                        enemy: true,\r\n                        eachTime: eachTimeEnemy,\r\n                    },\r\n                    box2: {\r\n                        size: 17,\r\n                        posX: 83,\r\n                        posY: 58,\r\n                        speedX: 0,\r\n                        speedY: 0,\r\n                        zIndex: 22,\r\n                        img: imgBox1,\r\n                        onTouch: onTouchBlock,\r\n                        enemy: true,\r\n                        eachTime: eachTimeEnemy,\r\n                    },\r\n\r\n                    rock1Pic: {\r\n                        size: 100,\r\n                        posX: 76,\r\n                        posY: -82,\r\n                        zIndex: 26,\r\n                        img: imgRock,\r\n                        onTouch: onTouchNothing,\r\n                    },\r\n                    rock2Pic: {\r\n                        size: 100,\r\n                        posX: 36,\r\n                        posY: -82,\r\n                        zIndex: 26,\r\n                        img: imgRock,\r\n                        onTouch: onTouchNothing,\r\n                    },\r\n                    rock2Actual: {\r\n                        size: 100,\r\n                        posX: 40,\r\n                        posY: -90,\r\n                        zIndex: 26,\r\n                        img: imgRock,\r\n                        onTouch: onTouchBlock,\r\n                    },\r\n\r\n                    riverPic: {\r\n                        size: 200,\r\n                        posX: -20,\r\n                        posY: -20,\r\n                        divType: \"water\",\r\n                        zIndex: 24,\r\n                        onTouch: onTouchNothing,\r\n                    },\r\n                    rightGateWall: {\r\n                        size: 300,\r\n                        posX: 160,\r\n                        posY: -200,\r\n                        zIndex: 30,\r\n                        next: 7,\r\n                        onTouch: onTouchGateWall,\r\n                        changeStage: this.props.changeStage,\r\n                    },\r\n                    topGate: {\r\n                        size: 300,\r\n                        posX: -70,\r\n                        posY: -310,\r\n                        zIndex: 30,\r\n                        next: 5,\r\n                        onTouch: onTouchStageChangeCommon,\r\n                        nextX: 100,\r\n                        nextY: 63,\r\n                        nextLeft: false,\r\n                        changeStage: this.props.changeStage,\r\n                    },\r\n                };\r\n                //ステージの背景画像を設定\r\n                this.bgImg = inWater;\r\n            } else if (this.props.stage === 7) {\r\n                this.ninja.inWater = true;\r\n\r\n                // ------------------------------------------------------------\r\n                // ステージ7 (水路2)\r\n                // ------------------------------------------------------------\r\n                this.objs = {\r\n                    ...this.objOutOfScreen,\r\n                    ...this.objWalls,\r\n                    ...this.objFloor,\r\n\r\n                    //レンガのブロック\r\n                    ...getBlocks(\r\n                        10,\r\n                        [\r\n                            [15, -1],\r\n                            [16, -1],\r\n                            [15, 0],\r\n                            [16, 0],\r\n                            [14, 1],\r\n                            [15, 1],\r\n                            [16, 1],\r\n                            [12, 2],\r\n                            [13, 2],\r\n                            [14, 2],\r\n                            [15, 2],\r\n                            [16, 2],\r\n                            [-1, 3],\r\n                            [0, 3],\r\n                            [1, 3],\r\n                            [2, 3],\r\n                            [3, 3],\r\n                            [4, 3],\r\n                            [5, 3],\r\n                            [6, 3],\r\n                            [7, 3],\r\n                            [8, 3],\r\n                            [9, 3],\r\n                            [10, 3],\r\n                            [11, 3],\r\n                            [12, 3],\r\n                            [13, 3],\r\n                            [14, 3],\r\n                            [15, 3],\r\n                            [16, 3],\r\n                            [-1, 4],\r\n                            [0, 4],\r\n                            [1, 4],\r\n                            [2, 4],\r\n                            [3, 4],\r\n                            [4, 4],\r\n                            [5, 4],\r\n                            [6, 4],\r\n                            [7, 4],\r\n                            [15, 4],\r\n                            [16, 4],\r\n                            [-1, 5],\r\n                            [0, 5],\r\n                            [1, 5],\r\n                        ],\r\n                        onTouchBlock,\r\n                        imgBlock1,\r\n                        23\r\n                    ),\r\n\r\n                    kani1: {\r\n                        size: 17,\r\n                        posX: 80,\r\n                        posY: 65,\r\n                        speedX: 0.7,\r\n                        speedY: 0,\r\n                        zIndex: 20,\r\n                        img: imgKani,\r\n                        onTouch: onTouchEnemy,\r\n                        enemy: true,\r\n                        eachTime: eachTimeEnemy,\r\n                    },\r\n                    fugu1: {\r\n                        size: 20,\r\n                        posX: 160,\r\n                        posY: 0,\r\n                        speedX: 0.5,\r\n                        speedY: 0.5,\r\n                        zIndex: 24,\r\n                        img: imgFugu,\r\n                        onTouch: onTouchEnemy,\r\n                        enemy: true,\r\n                        eachTime: eachTimeEnemy,\r\n                    },\r\n                    fugu2: {\r\n                        size: 20,\r\n                        posX: 70,\r\n                        posY: 50,\r\n                        speedX: 0.5,\r\n                        speedY: 0.5,\r\n                        zIndex: 24,\r\n                        img: imgFugu,\r\n                        onTouch: onTouchEnemy,\r\n                        enemy: true,\r\n                        eachTime: eachTimeEnemy,\r\n                    },\r\n                    kaisou1: {\r\n                        size: 9,\r\n                        posX: 90,\r\n                        posY: 61,\r\n                        zIndex: 19,\r\n                        img: imgKaisou,\r\n                        onTouch: onTouchNothing,\r\n                    },\r\n                    kaisou2: {\r\n                        size: 9,\r\n                        posX: 112,\r\n                        posY: 61,\r\n                        zIndex: 19,\r\n                        img: imgKaisou,\r\n                        onTouch: onTouchNothing,\r\n                    },\r\n                    kaisou3: {\r\n                        size: 9,\r\n                        posX: 22,\r\n                        posY: 16,\r\n                        zIndex: 19,\r\n                        img: imgKaisou,\r\n                        onTouch: onTouchNothing,\r\n                    },\r\n\r\n                    rock1Pic: {\r\n                        size: 100,\r\n                        posX: -20,\r\n                        posY: -82,\r\n                        zIndex: 26,\r\n                        img: imgRock,\r\n                        onTouch: onTouchNothing,\r\n                    },\r\n                    rock1Actual: {\r\n                        size: 100,\r\n                        posX: -20,\r\n                        posY: -90,\r\n                        zIndex: 26,\r\n                        img: imgRock,\r\n                        onTouch: onTouchBlock,\r\n                    },\r\n                    rock2Pic: {\r\n                        size: 100,\r\n                        posX: 140,\r\n                        posY: -82,\r\n                        zIndex: 26,\r\n                        img: imgRock,\r\n                        onTouch: onTouchNothing,\r\n                    },\r\n                    rock2Actual: {\r\n                        size: 100,\r\n                        posX: 140,\r\n                        posY: -90,\r\n                        zIndex: 26,\r\n                        img: imgRock,\r\n                        onTouch: onTouchBlock,\r\n                    },\r\n\r\n                    riverPic: {\r\n                        size: 200,\r\n                        posX: -20,\r\n                        posY: -20,\r\n                        divType: \"water\",\r\n                        zIndex: 24,\r\n                        onTouch: onTouchNothing,\r\n                    },\r\n                    rightGateWall: {\r\n                        size: 300,\r\n                        posX: 160,\r\n                        posY: -200,\r\n                        zIndex: 30,\r\n                        next: 8,\r\n                        onTouch: onTouchGateWall,\r\n                        changeStage: this.props.changeStage,\r\n                    },\r\n                    topGate: {\r\n                        size: 300,\r\n                        posX: -70,\r\n                        posY: -310,\r\n                        zIndex: 30,\r\n                        onTouch: onTouchStageChangeCommon,\r\n                        nextX: 120,\r\n                        nextY: 53,\r\n                        nextLeft: true,\r\n                        next: 4,\r\n                        changeStage: this.props.changeStage,\r\n                    },\r\n                    leftGateWall: {\r\n                        size: 300,\r\n                        posX: -300,\r\n                        posY: -200,\r\n                        zIndex: 30,\r\n                        next: 6,\r\n                        onTouch: onTouchGateWall,\r\n                        changeStage: this.props.changeStage,\r\n                    },\r\n                };\r\n                //ステージの背景画像を設定\r\n                this.bgImg = inWater;\r\n            } else if (this.props.stage === 8) {\r\n                this.ninja.inWater = true;\r\n\r\n                // ------------------------------------------------------------\r\n                // ステージ8 (水路3)\r\n                // ------------------------------------------------------------\r\n                this.objs = {\r\n                    ...this.objOutOfScreen,\r\n                    ...this.objWalls,\r\n                    ...this.objFloor,\r\n\r\n                    //レンガのブロック\r\n                    ...getBlocks(\r\n                        10,\r\n                        [\r\n                            [-1, -2],\r\n                            [0, -2],\r\n                            [3, -2],\r\n                            [4, -2],\r\n                            [5, -2],\r\n                            [6, -2],\r\n                            [7, -2],\r\n                            [8, -2],\r\n                            [9, -2],\r\n                            [10, -2],\r\n                            [11, -2],\r\n                            [12, -2],\r\n                            [13, -2],\r\n                            [14, -2],\r\n                            [15, -2],\r\n                            [16, -2],\r\n                            [-1, -1],\r\n                            [0, -1],\r\n                            [3, -1],\r\n                            [4, -1],\r\n                            [5, -1],\r\n                            [6, -1],\r\n                            [7, -1],\r\n                            [8, -1],\r\n                            [9, -1],\r\n                            [10, -1],\r\n                            [11, -1],\r\n                            [12, -1],\r\n                            [13, -1],\r\n                            [14, -1],\r\n                            [15, -1],\r\n                            [16, -1],\r\n                            [-1, 0],\r\n                            [0, 0],\r\n                            [3, 0],\r\n                            [4, 0],\r\n                            [5, 0],\r\n                            [6, 0],\r\n                            [7, 0],\r\n                            [8, 0],\r\n                            [9, 0],\r\n                            [10, 0],\r\n                            [11, 0],\r\n                            [12, 0],\r\n                            [13, 0],\r\n                            [14, 0],\r\n                            [15, 0],\r\n                            [16, 0],\r\n                            [-1, 1],\r\n                            [0, 1],\r\n                            [-1, 2],\r\n                            [0, 2],\r\n                            [-1, 3],\r\n                            [0, 3],\r\n                            [1, 3],\r\n                            [2, 3],\r\n                            [3, 3],\r\n                            [4, 3],\r\n                            [5, 3],\r\n                            [6, 3],\r\n                            [7, 3],\r\n                            [8, 3],\r\n                            [9, 3],\r\n                            [10, 3],\r\n                            [11, 3],\r\n                            [11.5, 3.5],\r\n                            [-1, 4],\r\n                            [0, 4],\r\n                            [1, 4],\r\n                            [2, 4],\r\n                            [3, 4],\r\n                            [4, 4],\r\n                            [5, 4],\r\n                            [6, 4],\r\n                            [7, 4],\r\n                            [8, 4],\r\n                            [9, 4],\r\n                            [10, 4],\r\n                            [11, 4],\r\n                        ],\r\n                        onTouchBlock,\r\n                        imgBlock1,\r\n                        23\r\n                    ),\r\n\r\n                    kimme1: {\r\n                        size: 130,\r\n                        posX: 160,\r\n                        xMin: 30,\r\n                        posY: -10,\r\n                        speedX: 1,\r\n                        speedY: 0,\r\n                        zIndex: 30,\r\n                        img: imgKimme,\r\n                        onTouch: onTouchBlock,\r\n                        nextX: 100,\r\n                        nextY: 63,\r\n                        nextLeft: false,\r\n                        next: 5,\r\n                        changeStage: this.props.changeStage,\r\n                        enemy: true,\r\n                        eachTime: eachTimeKimme,\r\n                    },\r\n                    kani1: {\r\n                        size: 17,\r\n                        posX: 80,\r\n                        xMin: 10,\r\n                        xMax: 95,\r\n                        posY: 20,\r\n                        speedX: 0.7,\r\n                        speedY: 0,\r\n                        zIndex: 19,\r\n                        img: imgKani,\r\n                        onTouch: onTouchEnemy,\r\n                        enemy: true,\r\n                        eachTime: eachTimeEnemy,\r\n                    },\r\n\r\n                    riverPic: {\r\n                        size: 200,\r\n                        posX: -20,\r\n                        posY: -20,\r\n                        divType: \"water\",\r\n                        zIndex: 24,\r\n                        onTouch: onTouchNothing,\r\n                    },\r\n                    topGate: {\r\n                        size: 300,\r\n                        posX: -70,\r\n                        posY: -310,\r\n                        zIndex: 30,\r\n                        onTouch: onTouchStageChangeCommon,\r\n                        nextX: 60,\r\n                        nextY: 62,\r\n                        nextLeft: false,\r\n                        next: 9,\r\n                        changeStage: this.props.changeStage,\r\n                    },\r\n                    leftGateWall: {\r\n                        size: 300,\r\n                        posX: -300,\r\n                        posY: -200,\r\n                        zIndex: 30,\r\n                        next: 7,\r\n                        onTouch: onTouchGateWall,\r\n                        changeStage: this.props.changeStage,\r\n                    },\r\n                };\r\n                //ステージの背景画像を設定\r\n                this.bgImg = inWater;\r\n            } else if (this.props.stage === 9) {\r\n                // ------------------------------------------------------------\r\n                // ステージ9 (風呂場)\r\n                // ------------------------------------------------------------\r\n                this.objs = {\r\n                    ...this.objOutOfScreen,\r\n                    ...this.objWalls,\r\n                    ...getHoleFloor(0, 55),\r\n\r\n                    shino: {\r\n                        size: 10,\r\n                        posX: 80,\r\n                        posY: 60,\r\n                        zIndex: 17,\r\n                        img: imgShino,\r\n                        onTouch: onTouchScrollOpener,\r\n                        openTargetTitle: this.consts.SHINO_SCROLL2_TITLE,\r\n                    },\r\n                    shinoScroll: {\r\n                        size: 150,\r\n                        posX: 5,\r\n                        posY: 5,\r\n                        zIndex: 1000,\r\n                        img: imgScrollOpen,\r\n                        scroll: true,\r\n                        visible: false,\r\n                        onTouch: onTouchNothing,\r\n                        title: this.consts.SHINO_SCROLL2_TITLE,\r\n                        message: this.consts.SHINO_SCROLL2_MESSAGE,\r\n                        fontSize: 3,\r\n                        speakerImg: imgShino,\r\n                    },\r\n\r\n                    door1: {\r\n                        size: 30,\r\n                        posX: 145,\r\n                        posY: 43,\r\n                        zIndex: 23,\r\n                        img: imgDoor,\r\n                        onTouch: onTouchLockedDoor,\r\n                        nextX: 60,\r\n                        nextY: 62,\r\n                        nextLeft: false,\r\n                        next: 1,\r\n                        changeStage: this.props.changeStage,\r\n                        keyName: this.consts.KEY_SCROLL_TITLE,\r\n                    },\r\n\r\n                    block1: {\r\n                        size: 33,\r\n                        posX: 145,\r\n                        posY: 13,\r\n                        zIndex: 22,\r\n                        img: imgWoodenBlock,\r\n                        onTouch: onTouchBlock,\r\n                    },\r\n                    block2: {\r\n                        size: 33,\r\n                        posX: 145,\r\n                        posY: -17,\r\n                        zIndex: 22,\r\n                        img: imgWoodenBlock,\r\n                        onTouch: onTouchBlock,\r\n                    },\r\n                    block3: {\r\n                        size: 33,\r\n                        posX: 145,\r\n                        posY: 73,\r\n                        zIndex: 22,\r\n                        img: imgWoodenBlock,\r\n                        onTouch: onTouchBlock,\r\n                    },\r\n                    block4: {\r\n                        size: 33,\r\n                        posX: 115,\r\n                        posY: 73,\r\n                        zIndex: 22,\r\n                        img: imgWoodenBlock,\r\n                        onTouch: onTouchBlock,\r\n                    },\r\n                    block5: {\r\n                        size: 33,\r\n                        posX: 85,\r\n                        posY: 73,\r\n                        zIndex: 22,\r\n                        img: imgWoodenBlock,\r\n                        onTouch: onTouchBlock,\r\n                    },\r\n                    block6: {\r\n                        size: 33,\r\n                        posX: 55,\r\n                        posY: 73,\r\n                        zIndex: 22,\r\n                        img: imgWoodenBlock,\r\n                        onTouch: onTouchBlock,\r\n                    },\r\n\r\n                    rightGateWall: {\r\n                        size: 300,\r\n                        posX: 160,\r\n                        posY: -200,\r\n                        zIndex: 30,\r\n                        next: 10,\r\n                        onTouch: onTouchGateWall,\r\n                        changeStage: this.props.changeStage,\r\n                    },\r\n                    bottomGate: {\r\n                        size: 300,\r\n                        posX: -70,\r\n                        posY: 80,\r\n                        zIndex: 30,\r\n                        next: 8,\r\n                        onTouch: onTouchStageChangeCommon,\r\n                        nextX: 10,\r\n                        nextY: 0,\r\n                        nextLeft: false,\r\n                        changeStage: this.props.changeStage,\r\n                    },\r\n                };\r\n                //ステージの背景画像を設定\r\n                this.bgImg = stage9;\r\n            } else if (this.props.stage === 10) {\r\n                // ------------------------------------------------------------\r\n                // ステージ10 (脱衣所)\r\n                // ------------------------------------------------------------\r\n                this.objs = {\r\n                    ...this.objOutOfScreen,\r\n                    ...this.objWalls,\r\n                    ...this.objFloor,\r\n                    //ブロック\r\n                    ...getBlocks(\r\n                        10,\r\n                        [\r\n                            [12, 2],\r\n                            [13, 2],\r\n                            [14, 2],\r\n                            [15, 2],\r\n                            [16, 2],\r\n                        ],\r\n                        onTouchBlock,\r\n                        imgWoodenBlock,\r\n                        23\r\n                    ),\r\n\r\n                    enemy1: {\r\n                        size: 13,\r\n                        posX: 104,\r\n                        xMax: 104,\r\n                        posY: 60,\r\n                        speedX: 2,\r\n                        speedY: 0,\r\n                        zIndex: 19,\r\n                        img: imgBadNinja,\r\n                        onTouch: onTouchEnemy,\r\n                        enemy: true,\r\n                        eachTime: eachTimeEnemy,\r\n                    },\r\n\r\n                    box1: {\r\n                        size: 11,\r\n                        posX: 85,\r\n                        posY: 64,\r\n                        speedX: 0,\r\n                        speedY: 0,\r\n                        zIndex: 22,\r\n                        img: imgBox1,\r\n                        onTouch: onTouchBlock,\r\n                        enemy: true,\r\n                        eachTime: eachTimeEnemy,\r\n                    },\r\n                    box2: {\r\n                        size: 11,\r\n                        posX: 95,\r\n                        posY: 64,\r\n                        speedX: 0,\r\n                        speedY: 0,\r\n                        zIndex: 22,\r\n                        img: imgBox1,\r\n                        onTouch: onTouchBlock,\r\n                        enemy: true,\r\n                        eachTime: eachTimeEnemy,\r\n                    },\r\n                    box3: {\r\n                        size: 11,\r\n                        posX: 95,\r\n                        posY: 54,\r\n                        speedX: 0,\r\n                        speedY: 0,\r\n                        zIndex: 22,\r\n                        img: imgBox1,\r\n                        onTouch: onTouchBlock,\r\n                        enemy: true,\r\n                        eachTime: eachTimeEnemy,\r\n                    },\r\n                    box4: {\r\n                        size: 11,\r\n                        posX: 105,\r\n                        posY: 64,\r\n                        speedX: 0,\r\n                        speedY: 0,\r\n                        zIndex: 22,\r\n                        img: imgBox1,\r\n                        onTouch: onTouchBlock,\r\n                        enemy: true,\r\n                        eachTime: eachTimeEnemy,\r\n                    },\r\n                    box5: {\r\n                        size: 11,\r\n                        posX: 105,\r\n                        posY: 54,\r\n                        speedX: 0,\r\n                        speedY: 0,\r\n                        zIndex: 22,\r\n                        img: imgBox1,\r\n                        onTouch: onTouchBlock,\r\n                        enemy: true,\r\n                        eachTime: eachTimeEnemy,\r\n                    },\r\n                    box6: {\r\n                        size: 11,\r\n                        posX: 105,\r\n                        posY: 44,\r\n                        speedX: 0,\r\n                        speedY: 0,\r\n                        zIndex: 22,\r\n                        img: imgBox1,\r\n                        onTouch: onTouchBlock,\r\n                        enemy: true,\r\n                        eachTime: eachTimeEnemy,\r\n                    },\r\n                    box7: {\r\n                        size: 11,\r\n                        posX: 115,\r\n                        posY: 64,\r\n                        speedX: 0,\r\n                        speedY: 0,\r\n                        zIndex: 22,\r\n                        img: imgBox1,\r\n                        onTouch: onTouchBlock,\r\n                        enemy: true,\r\n                        eachTime: eachTimeEnemy,\r\n                    },\r\n                    box8: {\r\n                        size: 11,\r\n                        posX: 115,\r\n                        posY: 54,\r\n                        speedX: 0,\r\n                        speedY: 0,\r\n                        zIndex: 22,\r\n                        img: imgBox1,\r\n                        onTouch: onTouchBlock,\r\n                        enemy: true,\r\n                        eachTime: eachTimeEnemy,\r\n                    },\r\n                    box9: {\r\n                        size: 11,\r\n                        posX: 125,\r\n                        posY: 64,\r\n                        speedX: 0,\r\n                        speedY: 0,\r\n                        zIndex: 22,\r\n                        img: imgBox1,\r\n                        onTouch: onTouchBlock,\r\n                        enemy: true,\r\n                        eachTime: eachTimeEnemy,\r\n                    },\r\n                    box10: {\r\n                        size: 31,\r\n                        posX: 95,\r\n                        posY: 54,\r\n                        speedX: 0,\r\n                        speedY: 0,\r\n                        zIndex: 21,\r\n                        img: imgBox1,\r\n                        onTouch: onTouchBlock,\r\n                        enemy: true,\r\n                        eachTime: eachTimeEnemy,\r\n                    },\r\n                    box11: {\r\n                        size: 51,\r\n                        posX: 85,\r\n                        posY: 64,\r\n                        speedX: 0,\r\n                        speedY: 0,\r\n                        zIndex: 21,\r\n                        img: imgBox1,\r\n                        onTouch: onTouchBlock,\r\n                        enemy: true,\r\n                        eachTime: eachTimeEnemy,\r\n                    },\r\n\r\n                    leftGateWall: {\r\n                        size: 300,\r\n                        posX: -300,\r\n                        posY: -200,\r\n                        zIndex: 30,\r\n                        next: 9,\r\n                        onTouch: onTouchGateWall,\r\n                        changeStage: this.props.changeStage,\r\n                    },\r\n                    rightGateWall: {\r\n                        size: 300,\r\n                        posX: 160,\r\n                        posY: -200,\r\n                        zIndex: 30,\r\n                        next: 11,\r\n                        onTouch: onTouchGateWall,\r\n                        changeStage: this.props.changeStage,\r\n                    },\r\n                };\r\n                //ステージの背景画像を設定\r\n                this.bgImg = stage10;\r\n            } else if (this.props.stage === 11) {\r\n                // ------------------------------------------------------------\r\n                // ステージ11 (2層　１)\r\n                // ------------------------------------------------------------\r\n                this.objs = {\r\n                    ...this.objOutOfScreen,\r\n                    ...this.objWalls,\r\n                    ...this.objFloor,\r\n                    //ブロック\r\n                    ...getBlocks(\r\n                        10,\r\n                        [\r\n                            [-2, -1],\r\n                            [-1, -1],\r\n                            [0, -1],\r\n                            [1, -1],\r\n                            [2, -1],\r\n                            [3, -1],\r\n                            [4, -1],\r\n                            [5, -1],\r\n                            [6, -1],\r\n                            [7, -1],\r\n                            [8, -1],\r\n                            [9, -1],\r\n                            [10, -1],\r\n                            [11, -1],\r\n                            [12, -1],\r\n                            [13, -1],\r\n                            [14, -1],\r\n                            [15, -1],\r\n                            [16, -1],\r\n                            [-2, 2],\r\n                            [-1, 2],\r\n                            [0, 2],\r\n                            [1, 2],\r\n                            [2, 2],\r\n                            [3, 2],\r\n                            [4, 2],\r\n                            [5, 2],\r\n                            [6, 2],\r\n                            [8, 2],\r\n                            [9, 2],\r\n                            [10, 2],\r\n                            [11, 2],\r\n                            [12, 2],\r\n                            [13, 2],\r\n                            [14, 2],\r\n                            [15, 2],\r\n                            [16, 2],\r\n                        ],\r\n                        onTouchBlock,\r\n                        imgWoodenBlock,\r\n                        23\r\n                    ),\r\n\r\n                    enemy1: {\r\n                        size: 13,\r\n                        posX: 75,\r\n                        posY: 60,\r\n                        speedX: 0.7,\r\n                        speedY: 0,\r\n                        zIndex: 19,\r\n                        img: imgBadNinja,\r\n                        onTouch: onTouchEnemy,\r\n                        enemy: true,\r\n                        eachTime: eachTimeEnemy,\r\n                    },\r\n\r\n                    bat1: {\r\n                        size: 13,\r\n                        posX: 75,\r\n                        posY: 0,\r\n                        speedX: 0.7,\r\n                        speedY: 1,\r\n                        zIndex: 31,\r\n                        img: imgBat,\r\n                        onTouch: onTouchEnemy,\r\n                        enemy: true,\r\n                        eachTime: eachTimeEnemy,\r\n                    },\r\n\r\n                    rightGateWall: {\r\n                        size: 300,\r\n                        posX: 160,\r\n                        posY: -200,\r\n                        zIndex: 30,\r\n                        next: 12,\r\n                        onTouch: onTouchGateWall,\r\n                        changeStage: this.props.changeStage,\r\n                    },\r\n                    leftGateWall: {\r\n                        size: 300,\r\n                        posX: -300,\r\n                        posY: -200,\r\n                        zIndex: 30,\r\n                        next: 10,\r\n                        onTouch: onTouchGateWall,\r\n                        changeStage: this.props.changeStage,\r\n                    },\r\n                };\r\n                //ステージの背景画像を設定\r\n                this.bgImg = twoLayer;\r\n            } else if (this.props.stage === 12) {\r\n                // ------------------------------------------------------------\r\n                // ステージ12 (2層　２)\r\n                // ------------------------------------------------------------\r\n                this.objs = {\r\n                    ...this.objOutOfScreen,\r\n                    ...this.objWalls,\r\n                    ...this.objFloor,\r\n                    //ブロック\r\n                    ...getBlocks(\r\n                        10,\r\n                        [\r\n                            [-2, -1],\r\n                            [-1, -1],\r\n                            [0, -1],\r\n                            [1, -1],\r\n                            [2, -1],\r\n                            [3, -1],\r\n                            [4, -1],\r\n                            [5, -1],\r\n                            [6, -1],\r\n                            [7, -1],\r\n                            [8, -1],\r\n                            [9, -1],\r\n                            [10, -1],\r\n                            [11, -1],\r\n                            [14, -1],\r\n                            [15, -1],\r\n                            [16, -1],\r\n                            [-2, 2],\r\n                            [-1, 2],\r\n                            [0, 2],\r\n                            [1, 2],\r\n                            [2, 2],\r\n                            [3, 2],\r\n                            [4, 2],\r\n                            [5, 2],\r\n                            [6, 2],\r\n                            [7, 2],\r\n                            [8, 2],\r\n                            [9, 2],\r\n                            [10, 2],\r\n                            [11, 2],\r\n                            [12, 2],\r\n                            [13, 2],\r\n                            [14, 2],\r\n                            [15, 2],\r\n                            [16, 2],\r\n                        ],\r\n                        onTouchBlock,\r\n                        imgWoodenBlock,\r\n                        23\r\n                    ),\r\n\r\n                    oni1: {\r\n                        size: 19,\r\n                        posX: 75,\r\n                        posY: 57,\r\n                        speedX: 0.7,\r\n                        speedY: 0,\r\n                        zIndex: 19,\r\n                        img: imgOni,\r\n                        onTouch: onTouchEnemy,\r\n                        enemy: true,\r\n                        eachTime: eachTimeEnemy,\r\n                    },\r\n\r\n                    rightGateWall: {\r\n                        size: 300,\r\n                        posX: 160,\r\n                        posY: -200,\r\n                        zIndex: 30,\r\n                        next: 13,\r\n                        onTouch: onTouchGateWall,\r\n                        changeStage: this.props.changeStage,\r\n                    },\r\n                    leftGateWall: {\r\n                        size: 300,\r\n                        posX: -300,\r\n                        posY: -200,\r\n                        zIndex: 30,\r\n                        next: 11,\r\n                        onTouch: onTouchGateWall,\r\n                        changeStage: this.props.changeStage,\r\n                    },\r\n                    topGate: {\r\n                        size: 300,\r\n                        posX: -70,\r\n                        posY: -310,\r\n                        zIndex: 30,\r\n                        onTouch: onTouchStageChangeCommon,\r\n                        nextX: 5,\r\n                        nextY: 62,\r\n                        nextLeft: false,\r\n                        next: 14,\r\n                        changeStage: this.props.changeStage,\r\n                    },\r\n                };\r\n                //ステージの背景画像を設定\r\n                this.bgImg = twoLayer;\r\n            } else if (this.props.stage === 13) {\r\n                // ------------------------------------------------------------\r\n                // ステージ13 (2層　３)\r\n                // ------------------------------------------------------------\r\n                this.objs = {\r\n                    ...this.objOutOfScreen,\r\n                    ...this.objWalls,\r\n                    ...this.objFloor,\r\n                    //ブロック\r\n                    ...getBlocks(\r\n                        10,\r\n                        [\r\n                            [-2, -1],\r\n                            [-1, -1],\r\n                            [0, -1],\r\n                            [1, -1],\r\n                            [2, -1],\r\n                            [3, -1],\r\n                            [4, -1],\r\n                            [5, -1],\r\n                            [6, -1],\r\n                            [9, -1],\r\n                            [10, -1],\r\n                            [11, -1],\r\n                            [12, -1],\r\n                            [13, -1],\r\n                            [14, -1],\r\n                            [15, -1],\r\n                            [16, -1],\r\n                            [-2, 2],\r\n                            [-1, 2],\r\n                            [0, 2],\r\n                            [1, 2],\r\n                            [2, 2],\r\n                            [3, 2],\r\n                            [4, 2],\r\n                            [6, 2],\r\n                            [7, 2],\r\n                            [8, 2],\r\n                            [9, 2],\r\n                            [10, 2],\r\n                            [11, 2],\r\n                            [12, 2],\r\n                            [13, 2],\r\n                            [14, 2],\r\n                            [15, 2],\r\n                            [16, 2],\r\n                            [13, 7],\r\n                            [14, 7],\r\n                            [15, 7],\r\n                            [16, 7],\r\n                            [17, 7],\r\n                        ],\r\n                        onTouchBlock,\r\n                        imgWoodenBlock,\r\n                        23\r\n                    ),\r\n\r\n                    hitotsume1: {\r\n                        size: 12,\r\n                        posX: 110,\r\n                        posY: 7,\r\n                        speedX: 2,\r\n                        speedY: 0,\r\n                        zIndex: 19,\r\n                        img: imgOneEye,\r\n                        onTouch: onTouchEnemy,\r\n                        enemy: true,\r\n                        eachTime: eachTimeOneEye,\r\n                    },\r\n\r\n                    rightGateWall: {\r\n                        size: 300,\r\n                        posX: 160,\r\n                        posY: -200,\r\n                        zIndex: 30,\r\n                        next: 16,\r\n                        onTouch: onTouchGateWall,\r\n                        changeStage: this.props.changeStage,\r\n                    },\r\n                    leftGateWall: {\r\n                        size: 300,\r\n                        posX: -300,\r\n                        posY: -200,\r\n                        zIndex: 30,\r\n                        next: 12,\r\n                        onTouch: onTouchGateWall,\r\n                        changeStage: this.props.changeStage,\r\n                    },\r\n                    topGate: {\r\n                        size: 300,\r\n                        posX: -70,\r\n                        posY: -310,\r\n                        zIndex: 30,\r\n                        onTouch: onTouchStageChangeCommon,\r\n                        nextX: 30,\r\n                        nextY: 62,\r\n                        nextLeft: false,\r\n                        next: 17,\r\n                        changeStage: this.props.changeStage,\r\n                    },\r\n                };\r\n                //ステージの背景画像を設定\r\n                this.bgImg = twoLayer;\r\n            } else if (this.props.stage === 14) {\r\n                // ------------------------------------------------------------\r\n                // ステージ14\r\n                // ------------------------------------------------------------\r\n                this.objs = {\r\n                    ...this.objOutOfScreen,\r\n                    ...this.objWalls,\r\n\r\n                    //ブロック\r\n                    ...getBlocks(\r\n                        10,\r\n                        [\r\n                            [1, -0.5],\r\n                            [2, -0.5],\r\n                            [3, -0.5],\r\n                            [4, -0.5],\r\n                            [5, -0.5],\r\n                            [6, -0.5],\r\n                            [7, -0.5],\r\n                            [8, -0.5],\r\n                            [9, -0.5],\r\n                            [10, -0.5],\r\n                            [13, -0.5],\r\n                            [14, -0.5],\r\n                            [-2, 0],\r\n                            [-1, 0],\r\n                            [0, 0],\r\n                            [15, 0],\r\n                            [16, 0],\r\n                            [-2, 0],\r\n                            [-1, 0],\r\n                            [0, 0],\r\n                            [15, 0],\r\n                            [16, 0],\r\n                            [-2, 1],\r\n                            [-1, 1],\r\n                            [0, 1],\r\n                            [15, 1],\r\n                            [16, 1],\r\n                            [-2, 2],\r\n                            [-1, 2],\r\n                            [0, 2],\r\n                            [15, 2],\r\n                            [16, 2],\r\n                            [-2, 3],\r\n                            [-1, 3],\r\n                            [0, 3],\r\n                            [15, 3],\r\n                            [16, 3],\r\n                            [-2, 4],\r\n                            [-1, 4],\r\n                            [0, 4],\r\n                            [15, 4],\r\n                            [16, 4],\r\n                            [15, 5],\r\n                            [16, 5],\r\n                            [15, 6],\r\n                            [16, 6],\r\n                            [-2, 7],\r\n                            [-1, 7],\r\n                            [0, 7],\r\n                            [1, 7],\r\n                            [2, 7],\r\n                            [3, 7],\r\n                            [4, 7],\r\n                            [5, 7],\r\n                            [6, 7],\r\n                            [7, 7],\r\n                            [8, 7],\r\n                            [9, 7],\r\n                            [10, 7],\r\n                            [11, 7],\r\n                            [12, 7],\r\n                            [13, 7],\r\n                            [14, 7],\r\n                            [15, 7],\r\n                            [16, 7],\r\n\r\n                            [11.5, 2],\r\n                            [6, 3],\r\n                            [9, 3],\r\n                            [3, 5],\r\n                        ],\r\n                        onTouchBlock,\r\n                        imgWoodenBlock,\r\n                        23\r\n                    ),\r\n\r\n                    hitotsume1: {\r\n                        size: 12,\r\n                        posX: 116,\r\n                        posY: 8,\r\n                        speedX: 2,\r\n                        speedY: 0,\r\n                        zIndex: 19,\r\n                        img: imgOneEye,\r\n                        onTouch: onTouchEnemy,\r\n                        enemy: true,\r\n                        eachTime: eachTimeOneEye,\r\n                    },\r\n\r\n                    topGate: {\r\n                        size: 300,\r\n                        posX: -70,\r\n                        posY: -310,\r\n                        zIndex: 30,\r\n                        onTouch: onTouchStageChangeCommon,\r\n                        nextX: 140,\r\n                        nextY: 62,\r\n                        nextLeft: true,\r\n                        next: 15,\r\n                        changeStage: this.props.changeStage,\r\n                    },\r\n                    leftGate: {\r\n                        size: 300,\r\n                        posX: -305,\r\n                        posY: -10,\r\n                        zIndex: 30,\r\n                        next: 12,\r\n                        onTouch: onTouchStageChangeCommon,\r\n                        nextX: 125,\r\n                        nextY: 0,\r\n                        nextLeft: true,\r\n                        changeStage: this.props.changeStage,\r\n                    },\r\n                };\r\n                //ステージの背景画像を設定\r\n                this.bgImg = stage14;\r\n            } else if (this.props.stage === 15) {\r\n                // ------------------------------------------------------------\r\n                // ステージ15\r\n                // ------------------------------------------------------------\r\n                this.objs = {\r\n                    ...this.objOutOfScreen,\r\n                    ...this.objWalls,\r\n\r\n                    box1: {\r\n                        size: 17,\r\n                        posX: 106,\r\n                        posY: 50,\r\n                        speedX: 0,\r\n                        speedY: 0,\r\n                        zIndex: 22,\r\n                        img: imgBox1,\r\n                        onTouch: onTouchBlock,\r\n                        enemy: true,\r\n                        eachTime: eachTimeEnemy,\r\n                    },\r\n\r\n                    ...getKeys(\r\n                        this.ninja,\r\n                        107,\r\n                        57,\r\n                        20,\r\n                        this.consts.KEY3_SCROLL_TITLE\r\n                    ),\r\n                    keyScroll: {\r\n                        size: 150,\r\n                        posX: 5,\r\n                        posY: 5,\r\n                        zIndex: 1000,\r\n                        img: imgScrollOpen,\r\n                        scroll: true,\r\n                        visible: false,\r\n                        onTouch: onTouchNothing,\r\n                        title: this.consts.KEY3_SCROLL_TITLE,\r\n                        message: this.consts.KEY3_SCROLL_MESSAGE,\r\n                        fontSize: 3,\r\n                        speakerImg: imgKey,\r\n                    },\r\n\r\n                    house1Pic: {\r\n                        size: 60,\r\n                        posX: 120,\r\n                        posY: 55,\r\n                        zIndex: 35,\r\n                        img: imgHouse1,\r\n                        onTouch: onTouchNothing,\r\n                    },\r\n                    house1Actual: {\r\n                        size: 60,\r\n                        posX: 120,\r\n                        posY: 67,\r\n                        onTouch: onTouchTree,\r\n                    },\r\n\r\n                    house2Pic: {\r\n                        size: 60,\r\n                        posX: 90,\r\n                        posY: 55,\r\n                        zIndex: 34,\r\n                        img: imgHouse1,\r\n                        onTouch: onTouchNothing,\r\n                    },\r\n                    houseActual: {\r\n                        size: 60,\r\n                        posX: 97,\r\n                        posY: 67,\r\n                        onTouch: onTouchTree,\r\n                    },\r\n\r\n                    bottomGate: {\r\n                        size: 300,\r\n                        posX: -70,\r\n                        posY: 80,\r\n                        zIndex: 30,\r\n                        next: 9,\r\n                        onTouch: onTouchStageChangeCommon,\r\n                        nextX: 125,\r\n                        nextY: 0,\r\n                        nextLeft: true,\r\n                        changeStage: this.props.changeStage,\r\n                    },\r\n                };\r\n                //ステージの背景画像を設定\r\n                this.bgImg = stage15;\r\n            } else if (this.props.stage === 16) {\r\n                // ------------------------------------------------------------\r\n                // ステージ16\r\n                // ------------------------------------------------------------\r\n                this.objs = {\r\n                    ...this.objOutOfScreen,\r\n                    ...this.objWalls,\r\n                    ...this.objFloor,\r\n                    //ブロック\r\n                    ...getBlocks(\r\n                        10,\r\n                        [\r\n                            [-2, -1],\r\n                            [-1, -1],\r\n                            [0, -1],\r\n                            [1, -1],\r\n                            [2, -1],\r\n                            [2, 0],\r\n                            [2, 1],\r\n                            [-2, 2],\r\n                            [-1, 2],\r\n                            [0, 2],\r\n                            [1, 2],\r\n                            [2, 2],\r\n\r\n                            [14, 2],\r\n                            [15, 2],\r\n                            [16, 2],\r\n                            [17, 2],\r\n                            [13, 3],\r\n                            [14, 3],\r\n                            [15, 3],\r\n                            [16, 3],\r\n                            [17, 3],\r\n                            [12, 4],\r\n                            [13, 4],\r\n                            [14, 4],\r\n                            [15, 4],\r\n                            [16, 4],\r\n                            [17, 4],\r\n                            [11, 5],\r\n                            [12, 5],\r\n                            [13, 5],\r\n                            [14, 5],\r\n                            [15, 5],\r\n                            [16, 5],\r\n                            [17, 5],\r\n                            [10, 6],\r\n                            [11, 6],\r\n                            [12, 6],\r\n                            [13, 6],\r\n                            [14, 6],\r\n                            [15, 6],\r\n                            [16, 6],\r\n                            [17, 6],\r\n                            [-2, 7],\r\n                            [-1, 7],\r\n                            [0, 7],\r\n                            [1, 7],\r\n                            [2, 7],\r\n                            [3, 7],\r\n                            [4, 7],\r\n                            [5, 7],\r\n                            [6, 7],\r\n                            [7, 7],\r\n                            [8, 7],\r\n                            [9, 7],\r\n                            [10, 7],\r\n                            [11, 7],\r\n                            [12, 7],\r\n                            [13, 7],\r\n                            [14, 7],\r\n                            [15, 7],\r\n                            [16, 7],\r\n                            [17, 7],\r\n                        ],\r\n                        onTouchBlock,\r\n                        imgWoodenBlock,\r\n                        23\r\n                    ),\r\n\r\n                    oni1: {\r\n                        size: 58,\r\n                        posX: 70,\r\n                        posY: 20,\r\n                        speedX: 1.2,\r\n                        speedY: 0,\r\n                        zIndex: 30,\r\n                        img: imgOni,\r\n                        onTouch: onTouchBlock,\r\n                        enemy: true,\r\n                        eachTime: eachTimeKimme,\r\n                    },\r\n\r\n                    ...getKeys(\r\n                        this.ninja,\r\n                        147,\r\n                        10,\r\n                        20,\r\n                        this.consts.KEY2_SCROLL_TITLE\r\n                    ),\r\n                    keyScroll: {\r\n                        size: 150,\r\n                        posX: 5,\r\n                        posY: 5,\r\n                        zIndex: 1000,\r\n                        img: imgScrollOpen,\r\n                        scroll: true,\r\n                        visible: false,\r\n                        onTouch: onTouchNothing,\r\n                        title: this.consts.KEY2_SCROLL_TITLE,\r\n                        message: this.consts.KEY2_SCROLL_MESSAGE,\r\n                        fontSize: 3,\r\n                        speakerImg: imgKey,\r\n                    },\r\n\r\n                    leftGateWall: {\r\n                        size: 300,\r\n                        posX: -300,\r\n                        posY: -200,\r\n                        zIndex: 30,\r\n                        next: 13,\r\n                        onTouch: onTouchGateWall,\r\n                        changeStage: this.props.changeStage,\r\n                    },\r\n                };\r\n                //ステージの背景画像を設定\r\n                this.bgImg = stage16;\r\n            } else if (this.props.stage === 17) {\r\n                // ------------------------------------------------------------\r\n                // ステージ17\r\n                // ------------------------------------------------------------\r\n                this.objs = {\r\n                    ...this.objOutOfScreen,\r\n                    ...this.objWalls,\r\n\r\n                    //ブロック\r\n                    ...getBlocks(\r\n                        10,\r\n                        [\r\n                            [1, -0.5],\r\n                            [2, -0.5],\r\n                            [3, -0.5],\r\n                            [4, -0.5],\r\n                            [5, -0.5],\r\n                            [6, -0.5],\r\n                            [7, -0.5],\r\n                            [8, -0.5],\r\n                            [9, -0.5],\r\n                            [10, -0.5],\r\n                            [1, 0.4],\r\n                            [2, 0.4],\r\n                            [3, 0.4],\r\n                            [4, 0.4],\r\n                            [5, 0.4],\r\n                            [6, 0.4],\r\n                            [7, 0.4],\r\n                            [-2, 0],\r\n                            [-1, 0],\r\n                            [0, 0],\r\n                            [15, 0],\r\n                            [16, 0],\r\n                            [10, 0],\r\n                            [-2, 1],\r\n                            [-1, 1],\r\n                            [0, 1],\r\n                            [15, 1],\r\n                            [16, 1],\r\n                            [10, 1],\r\n                            [-2, 2],\r\n                            [-1, 2],\r\n                            [0, 2],\r\n                            [15, 2],\r\n                            [16, 2],\r\n                            [10, 2],\r\n                            [-2, 3],\r\n                            [-1, 3],\r\n                            [0, 3],\r\n                            [15, 3],\r\n                            [16, 3],\r\n                            [10, 3],\r\n                            [-2, 4],\r\n                            [-1, 4],\r\n                            [0, 4],\r\n                            [15, 4],\r\n                            [16, 4],\r\n                            [-2, 5],\r\n                            [-1, 5],\r\n                            [0, 5],\r\n                            [15, 5],\r\n                            [16, 5],\r\n                            [-2, 6],\r\n                            [-1, 6],\r\n                            [0, 6],\r\n                            [15, 6],\r\n                            [16, 6],\r\n                            [-2, 7],\r\n                            [-1, 7],\r\n                            [0, 7],\r\n                            [3, 7],\r\n                            [4, 7],\r\n                            [5, 7],\r\n                            [6, 7],\r\n                            [7, 7],\r\n                            [8, 7],\r\n                            [9, 7],\r\n                            [10, 7],\r\n                            [11, 7],\r\n                            [12, 7],\r\n                            [13, 7],\r\n                            [14, 7],\r\n                            [15, 7],\r\n                            [16, 7],\r\n\r\n                            [-2, 3.7],\r\n                            [-1, 3.7],\r\n                            [0, 3.7],\r\n                            [1, 3.7],\r\n                            [2, 3.7],\r\n                            [5, 3.7],\r\n                            [6, 3.7],\r\n                            [7, 3.7],\r\n                            [8, 3.7],\r\n                            [9, 3.7],\r\n                            [10, 3.7],\r\n\r\n                            [4, 6],\r\n                        ],\r\n                        onTouchBlock,\r\n                        imgWoodenBlock,\r\n                        23\r\n                    ),\r\n\r\n                    shino: {\r\n                        size: 10,\r\n                        posX: 15,\r\n                        posY: 24,\r\n                        zIndex: 17,\r\n                        img: imgShino,\r\n                        onTouch: onTouchScrollOpener,\r\n                        openTargetTitle: this.consts.SHINO_SCROLL3_TITLE,\r\n                    },\r\n                    shinoScroll: {\r\n                        size: 150,\r\n                        posX: 5,\r\n                        posY: 5,\r\n                        zIndex: 1000,\r\n                        img: imgScrollOpen,\r\n                        scroll: true,\r\n                        visible: false,\r\n                        onTouch: onTouchNothing,\r\n                        title: this.consts.SHINO_SCROLL3_TITLE,\r\n                        message: this.consts.SHINO_SCROLL3_MESSAGE,\r\n                        fontSize: 3,\r\n                        speakerImg: imgShino,\r\n                    },\r\n\r\n                    //はしご\r\n                    hashigoPic: {\r\n                        size: 20,\r\n                        posX: 122,\r\n                        posY: 4,\r\n                        zIndex: 20,\r\n                        img: imgHashigo,\r\n                        onTouch: onTouchNothing,\r\n                    },\r\n                    hashigo0: {\r\n                        size: 10,\r\n                        posX: 126,\r\n                        posY: 9,\r\n                        speedX: 0,\r\n                        speedY: 0,\r\n                        zIndex: 22,\r\n                        onTouch: onTouchTree,\r\n                    },\r\n                    hashigo1: {\r\n                        size: 10,\r\n                        posX: 126,\r\n                        posY: 27,\r\n                        speedX: 0,\r\n                        speedY: 0,\r\n                        zIndex: 22,\r\n                        onTouch: onTouchTree,\r\n                    },\r\n                    hashigo2: {\r\n                        size: 10,\r\n                        posX: 126,\r\n                        posY: 45,\r\n                        speedX: 0,\r\n                        speedY: 0,\r\n                        zIndex: 22,\r\n                        onTouch: onTouchTree,\r\n                    },\r\n\r\n                    box1: {\r\n                        size: 37,\r\n                        posX: 113,\r\n                        posY: -22,\r\n                        speedX: 0,\r\n                        speedY: 0,\r\n                        zIndex: 22,\r\n                        img: imgBox1,\r\n                        onTouch: onTouchBlock,\r\n                        enemy: true,\r\n                        eachTime: eachTimeEnemy,\r\n                    },\r\n                    box2: {\r\n                        size: 37,\r\n                        posX: 113,\r\n                        posY: -4,\r\n                        speedX: 0,\r\n                        speedY: 0,\r\n                        zIndex: 22,\r\n                        img: imgBox1,\r\n                        onTouch: onTouchBlock,\r\n                        enemy: true,\r\n                        eachTime: eachTimeEnemy,\r\n                    },\r\n\r\n                    door1: {\r\n                        size: 22,\r\n                        posX: 80,\r\n                        posY: 49,\r\n                        zIndex: 22,\r\n                        img: imgDoor,\r\n                        onTouch: onTouchLockedDoor,\r\n                        nextX: 60,\r\n                        nextY: 62,\r\n                        nextLeft: false,\r\n                        next: 1,\r\n                        changeStage: this.props.changeStage,\r\n                        keyName: this.consts.KEY2_SCROLL_TITLE,\r\n                    },\r\n                    door2: {\r\n                        size: 22,\r\n                        posX: 60,\r\n                        posY: 16,\r\n                        zIndex: 22,\r\n                        img: imgDoor,\r\n                        onTouch: onTouchLockedDoor,\r\n                        nextX: 60,\r\n                        nextY: 62,\r\n                        nextLeft: false,\r\n                        next: 1,\r\n                        changeStage: this.props.changeStage,\r\n                        keyName: this.consts.KEY3_SCROLL_TITLE,\r\n                    },\r\n\r\n                    bottomGate: {\r\n                        size: 300,\r\n                        posX: -70,\r\n                        posY: 80,\r\n                        zIndex: 30,\r\n                        next: 13,\r\n                        onTouch: onTouchStageChangeCommon,\r\n                        nextX: 73,\r\n                        nextY: 0,\r\n                        nextLeft: true,\r\n                        changeStage: this.props.changeStage,\r\n                    },\r\n                    topGate: {\r\n                        size: 300,\r\n                        posX: -70,\r\n                        posY: -310,\r\n                        zIndex: 30,\r\n                        onTouch: onTouchStageChangeCommon,\r\n                        nextX: 20,\r\n                        nextY: 62,\r\n                        nextLeft: false,\r\n                        next: 18,\r\n                        changeStage: this.props.changeStage,\r\n                    },\r\n                };\r\n                //ステージの背景画像を設定\r\n                this.bgImg = stage17;\r\n            } else if (this.props.stage === 18) {\r\n                // ------------------------------------------------------------\r\n                // ステージ18\r\n                // ------------------------------------------------------------\r\n                this.objs = {\r\n                    ...this.objOutOfScreen,\r\n                    ...this.objWalls,\r\n                    ...this.objFloor,\r\n\r\n                    pochi: {\r\n                        size: 10,\r\n                        posX: 73,\r\n                        posY: 62,\r\n                        zIndex: 20,\r\n                        img: imgPochi,\r\n                        onTouch: onTouchScrollOpener,\r\n                        openTargetTitle: this.consts.POCHI_SCROLL3_TITLE,\r\n                    },\r\n                    pochiScroll: {\r\n                        size: 150,\r\n                        posX: 5,\r\n                        posY: 5,\r\n                        zIndex: 1000,\r\n                        img: imgScrollOpen,\r\n                        scroll: true,\r\n                        visible: false,\r\n                        onTouch: onTouchNothing,\r\n                        title: this.consts.POCHI_SCROLL3_TITLE,\r\n                        message: this.consts.POCHI_SCROLL3_MESSAGE,\r\n                        fontSize: 3,\r\n                        speakerImg: imgPochi,\r\n                    },\r\n\r\n                    kanban1Pic: {\r\n                        size: 20,\r\n                        posX: 130,\r\n                        posY: 60,\r\n                        zIndex: 10,\r\n                        img: imgKanban1,\r\n                        onTouch: onTouchNothing,\r\n                    },\r\n                    kanban1ArrowPic: {\r\n                        size: 10,\r\n                        posX: 135,\r\n                        posY: 63,\r\n                        boolLeft: false,\r\n                        zIndex: 11,\r\n                        img: imgArrow1,\r\n                        onTouch: onTouchNothing,\r\n                    },\r\n\r\n                    rightGateWall: {\r\n                        size: 300,\r\n                        posX: 160,\r\n                        posY: -200,\r\n                        zIndex: 30,\r\n                        next: 19,\r\n                        onTouch: onTouchGateWall,\r\n                        changeStage: this.props.changeStage,\r\n                    },\r\n                };\r\n                //ステージの背景画像を設定\r\n                this.bgImg = stage18;\r\n            } else if (this.props.stage === 19) {\r\n                // ------------------------------------------------------------\r\n                // ステージ19\r\n                // ------------------------------------------------------------\r\n                this.objs = {\r\n                    ...this.objOutOfScreen,\r\n                    ...this.objWalls,\r\n                    ...this.objFloor,\r\n\r\n                    boss: {\r\n                        size: 12,\r\n                        posX: 72,\r\n                        posY: 4,\r\n                        speedX: 2,\r\n                        speedY: 0,\r\n                        zIndex: 19,\r\n                        img: imgBoss,\r\n                        onTouch: onTouchEnemy,\r\n                        changeStage: this.props.changeStage,\r\n                        enemy: true,\r\n                        eachTime: eachTimeBoss,\r\n                    },\r\n\r\n                    toriiPic: {\r\n                        size: 120,\r\n                        posX: 17,\r\n                        posY: 3,\r\n                        zIndex: 0,\r\n                        img: imgTorii,\r\n                        onTouch: onTouchNothing,\r\n                    },\r\n                    toriiActual: {\r\n                        size: 120,\r\n                        posX: 35,\r\n                        posY: 9,\r\n                        zIndex: 10,\r\n                        onTouch: onTouchTree,\r\n                    },\r\n\r\n                    //バグで床が抜けたとき用\r\n                    bottomGate1: {\r\n                        size: 300,\r\n                        posX: -70,\r\n                        posY: 90,\r\n                        zIndex: 30,\r\n                        onTouch: onTouchEnemy,\r\n                    },\r\n                    bottomGate2: {\r\n                        size: 1160,\r\n                        posX: -500,\r\n                        posY: 150,\r\n                        zIndex: 30,\r\n                        onTouch: onTouchEnemy,\r\n                    },\r\n                };\r\n                //ステージの背景画像を設定\r\n                this.bgImg = stage19;\r\n            } else if (this.props.stage === 20) {\r\n                // ------------------------------------------------------------\r\n                // ステージ20\r\n                // ------------------------------------------------------------\r\n                this.objs = {\r\n                    ...this.objOutOfScreen,\r\n                    ...this.objWalls,\r\n                    ...this.objFloor,\r\n\r\n                    kosuke: {\r\n                        size: 10,\r\n                        posX: 85,\r\n                        posY: 65,\r\n                        zIndex: 17,\r\n                        img: imgScroll,\r\n                        onTouch: onTouchScrollOpener,\r\n                        openTargetTitle: this.consts.KOSUKE_SCROLL_TITLE,\r\n                    },\r\n                    kosukeScroll: {\r\n                        size: 150,\r\n                        posX: 5,\r\n                        posY: 5,\r\n                        zIndex: 1000,\r\n                        img: imgScrollOpen,\r\n                        scroll: true,\r\n                        visible: false,\r\n                        onTouch: onTouchNothing,\r\n                        title: this.consts.KOSUKE_SCROLL_TITLE,\r\n                        message: this.consts.KOSUKE_SCROLL_MESSAGE,\r\n                        fontSize: 3,\r\n                        finalMessage: true,\r\n                    },\r\n\r\n                    pochi: {\r\n                        size: 10,\r\n                        posX: 53,\r\n                        posY: 62,\r\n                        zIndex: 20,\r\n                        img: imgPochi,\r\n                        onTouch: onTouchScrollOpener,\r\n                        openTargetTitle: this.consts.POCHI_SCROLL4_TITLE,\r\n                    },\r\n                    pochiScroll: {\r\n                        size: 150,\r\n                        posX: 5,\r\n                        posY: 5,\r\n                        zIndex: 1000,\r\n                        img: imgScrollOpen,\r\n                        scroll: true,\r\n                        visible: false,\r\n                        onTouch: onTouchNothing,\r\n                        title: this.consts.POCHI_SCROLL4_TITLE,\r\n                        message: this.consts.POCHI_SCROLL4_MESSAGE,\r\n                        fontSize: 3,\r\n                        speakerImg: imgPochi,\r\n                    },\r\n                };\r\n                //ステージの背景画像を設定\r\n                this.bgImg = stage20;\r\n            }\r\n\r\n            this.prevStage = this.props.stage;\r\n\r\n            //localStorageに自動セーブ\r\n            const { game, ...rest } = this.ninja;\r\n            const saveData = { ninja: rest, stage: this.props.stage };\r\n            localStorage.setItem(\"saveData2\", JSON.stringify(saveData));\r\n\r\n            //背景画像の変更\r\n            this.backgroundSetting.backgroundImage = `url(${this.bgImg})`;\r\n        }\r\n\r\n        return (\r\n            <div id=\"Page2\" style={this.pageStyle}>\r\n                <div id=\"gameScreen\" style={this.state.screenStyle}>\r\n                    <NinjaChar\r\n                        imgAlt=\"Running Ninja\"\r\n                        width={this.ninja.size * (this?.UL || 0)}\r\n                        x={this.state.ninjaStat.ninjaX}\r\n                        y={this.state.ninjaStat.ninjaY}\r\n                        boolLeft={this.state.ninjaStat.left}\r\n                    />\r\n                    <RenderObjs game={this} />\r\n                </div>\r\n                <b>\r\n                    <RenderScreenBottom\r\n                        onClickButton={this.onClickButton.bind(this)}\r\n                        onMouseUp={this.onMouseUp.bind(this)}\r\n                        terminalPC={this.terminalPC}\r\n                        UL={this.UL}\r\n                        lang={this.props.language}\r\n                    />\r\n                </b>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction RenderObjs(props: any) {\r\n    let objList = [];\r\n    for (let key in props.game.objs) {\r\n        objList.push(\r\n            <Obj\r\n                key={key}\r\n                obj={props.game.objs[key]}\r\n                UL={props.game.UL}\r\n                game={props.game}\r\n            />\r\n        );\r\n    }\r\n    return <span>{objList}</span>;\r\n}\r\n\r\nfunction RenderScreenBottom(props: any) {\r\n    //画面下部のボタンなどの表示の出し分け\r\n\r\n    const UL = props.UL;\r\n\r\n    if (props.terminalPC) {\r\n        let styleDivPcMessage: any = {\r\n            position: \"absolute\",\r\n            top: 75 * UL,\r\n            width: 160 * UL,\r\n            height: 15 * UL,\r\n            zIndex: \"99999999\",\r\n            backgroundColor: \"black\",\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n        };\r\n        let styleTextPcMessage: any = {\r\n            fontSize: \"xx-large\",\r\n            color: \"white\",\r\n        };\r\n        if (props.lang === \"Japanese\") {\r\n            return (\r\n                <div style={styleDivPcMessage}>\r\n                    <span style={styleTextPcMessage}>\r\n                        PCでは、キーボードの「←」「↑」「→」キーで操作をしてください。\r\n                    </span>\r\n                </div>\r\n            );\r\n        } else {\r\n            return (\r\n                <div style={styleDivPcMessage}>\r\n                    <span style={styleTextPcMessage}>\r\n                        Please use [←], [↑], and [→] keys to play!\r\n                    </span>\r\n                </div>\r\n            );\r\n        }\r\n    } else {\r\n        //スマホ・タブレットの場合、画面下部にボタンを表示\r\n        return (\r\n            <RenderButtons\r\n                onClickButton={props.onClickButton}\r\n                onMouseUp={props.onMouseUp}\r\n                UL={props.UL}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nfunction RenderButtons(props: any) {\r\n    const UL = props.UL;\r\n\r\n    //ボタンがあるテーブルのスタイル\r\n    let controllerStyle: any = {\r\n        position: \"absolute\",\r\n        top: 75 * UL,\r\n        width: 160 * UL,\r\n        zIndex: \"99999999\",\r\n        backgroundColor: \"black\",\r\n    };\r\n    //左右のボタンのスタイル\r\n    let sideButtonStyle: any = {\r\n        width: 30 * UL,\r\n        height: 15 * UL,\r\n        fontSize: 4 * UL + \"px\",\r\n        margin: \"1px\",\r\n    };\r\n    //ジャンプボタンのスタイル\r\n    let jumpButtonStyle: any = {\r\n        width: 100 * UL,\r\n        height: 15 * UL,\r\n        fontSize: 4 * UL,\r\n        margin: \"1px\",\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <table id=\"controller\" style={controllerStyle}>\r\n                <tbody>\r\n                    <tr>\r\n                        <td align=\"right\">\r\n                            <button\r\n                                style={sideButtonStyle}\r\n                                className={\"btn btn-info btn-lg btn-block\"}\r\n                                onMouseDown={() => {\r\n                                    props.onClickButton(\"left\");\r\n                                }}\r\n                                onTouchStart={() => {\r\n                                    props.onClickButton(\"left\");\r\n                                }}\r\n                                onMouseUp={() => {\r\n                                    props.onMouseUp(\"left\");\r\n                                }}\r\n                                onMouseOut={() => {\r\n                                    props.onMouseUp(\"left\");\r\n                                }}\r\n                                onTouchEnd={() => {\r\n                                    props.onMouseUp(\"left\");\r\n                                }}\r\n                            >\r\n                                {\"＜\"}\r\n                            </button>\r\n                        </td>\r\n                        <td align=\"center\">\r\n                            <button\r\n                                style={jumpButtonStyle}\r\n                                className={\"btn btn-info btn-lg btn-block\"}\r\n                                onMouseDown={() => {\r\n                                    props.onClickButton(\"jump\");\r\n                                }}\r\n                                onTouchStart={() => {\r\n                                    props.onClickButton(\"jump\");\r\n                                }}\r\n                                onMouseUp={() => {\r\n                                    props.onMouseUp(\"jump\");\r\n                                }}\r\n                                onMouseOut={() => {\r\n                                    props.onMouseUp(\"jump\");\r\n                                }}\r\n                                onTouchEnd={() => {\r\n                                    props.onMouseUp(\"jump\");\r\n                                }}\r\n                            >\r\n                                {\"↑　jump　↑\"}\r\n                            </button>\r\n                        </td>\r\n                        <td align=\"left\">\r\n                            <button\r\n                                style={sideButtonStyle}\r\n                                className={\"btn btn-info btn-lg btn-block\"}\r\n                                onMouseDown={() => {\r\n                                    props.onClickButton(\"right\");\r\n                                }}\r\n                                onTouchStart={() => {\r\n                                    props.onClickButton(\"right\");\r\n                                }}\r\n                                onMouseUp={() => {\r\n                                    props.onMouseUp(\"right\");\r\n                                }}\r\n                                onMouseOut={() => {\r\n                                    props.onMouseUp(\"right\");\r\n                                }}\r\n                                onTouchEnd={() => {\r\n                                    props.onMouseUp(\"right\");\r\n                                }}\r\n                            >\r\n                                {\"＞\"}\r\n                            </button>\r\n                        </td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n            <table\r\n                id=\"controller\"\r\n                style={{ ...controllerStyle, top: 60 * UL, opacity: 0 }}\r\n            >\r\n                <tbody>\r\n                    <tr>\r\n                        <td align=\"right\">\r\n                            <button\r\n                                style={{ ...sideButtonStyle, height: 30 * UL }}\r\n                                className={\"btn btn-info btn-lg btn-block\"}\r\n                                onMouseDown={() => {\r\n                                    props.onClickButton(\"left\");\r\n                                }}\r\n                                onTouchStart={() => {\r\n                                    props.onClickButton(\"left\");\r\n                                }}\r\n                                onMouseUp={() => {\r\n                                    props.onMouseUp(\"left\");\r\n                                }}\r\n                                onMouseOut={() => {\r\n                                    props.onMouseUp(\"left\");\r\n                                }}\r\n                                onTouchEnd={() => {\r\n                                    props.onMouseUp(\"left\");\r\n                                }}\r\n                            >\r\n                                {\"＜\"}\r\n                            </button>\r\n                        </td>\r\n                        <td align=\"center\">\r\n                            <button\r\n                                style={{ ...jumpButtonStyle, height: 30 * UL }}\r\n                                className={\"btn btn-info btn-lg btn-block\"}\r\n                                onMouseDown={() => {\r\n                                    props.onClickButton(\"jump\");\r\n                                }}\r\n                                onTouchStart={() => {\r\n                                    props.onClickButton(\"jump\");\r\n                                }}\r\n                                onMouseUp={() => {\r\n                                    props.onMouseUp(\"jump\");\r\n                                }}\r\n                                onMouseOut={() => {\r\n                                    props.onMouseUp(\"jump\");\r\n                                }}\r\n                                onTouchEnd={() => {\r\n                                    props.onMouseUp(\"jump\");\r\n                                }}\r\n                            >\r\n                                {\"↑　jump　↑\"}\r\n                            </button>\r\n                        </td>\r\n                        <td align=\"left\">\r\n                            <button\r\n                                style={{ ...sideButtonStyle, height: 30 * UL }}\r\n                                className={\"btn btn-info btn-lg btn-block\"}\r\n                                onMouseDown={() => {\r\n                                    props.onClickButton(\"right\");\r\n                                }}\r\n                                onTouchStart={() => {\r\n                                    props.onClickButton(\"right\");\r\n                                }}\r\n                                onMouseUp={() => {\r\n                                    props.onMouseUp(\"right\");\r\n                                }}\r\n                                onMouseOut={() => {\r\n                                    props.onMouseUp(\"right\");\r\n                                }}\r\n                                onTouchEnd={() => {\r\n                                    props.onMouseUp(\"right\");\r\n                                }}\r\n                            >\r\n                                {\"＞\"}\r\n                            </button>\r\n                        </td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n        </>\r\n    );\r\n}\r\n\r\nfunction checkRelativityRightAndFoot(\r\n    objRight: number,\r\n    ninjaRight: number,\r\n    objTop: number,\r\n    objFoot: number,\r\n    ninjaLeft: number,\r\n    ninjaTop: number,\r\n    ninjaFoot: number,\r\n    ninjaSize: number\r\n) {\r\n    //コメントは忍者が右から来た想定\r\n    if (objRight > ninjaLeft) {\r\n        //忍者が右から\r\n        if (objRight < ninjaRight) {\r\n            //忍者の右端がオブジェクトの右端を左向きに超えてはいない\r\n            if (objTop < ninjaFoot - (ninjaSize * 7) / 12) {\r\n                //オブジェクトの上をまたいでいない\r\n                if (objFoot > ninjaTop + (ninjaSize * 7) / 12) {\r\n                    //オブジェクトの下をくぐっていない\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}\r\nfunction checkRelativityLeftAndTop(\r\n    ninjaLeft: number,\r\n    objLeft: number,\r\n    objTop: number,\r\n    objFoot: number,\r\n    ninjaRight: number,\r\n    ninjaTop: number,\r\n    ninjaFoot: number,\r\n    ninjaSize: number\r\n) {\r\n    //コメントは忍者が左から来た想定\r\n    if (objLeft < ninjaRight) {\r\n        //忍者が左から\r\n        if (objLeft > ninjaLeft) {\r\n            //忍者の左端がオブジェクトの左端を右向きに超えてはいない\r\n            if (objTop < ninjaFoot - (ninjaSize * 7) / 12) {\r\n                //オブジェクトの上をまたいでいない\r\n                if (objFoot > ninjaTop + (ninjaSize * 7) / 12) {\r\n                    //オブジェクトの下をくぐっていない\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n//当たり判定\r\nfunction checkTouch(obj1: any, obj2: any) {\r\n    if (obj1 && obj2) {\r\n        //オブジェクトが存在する場合\r\n\r\n        //かすっていたらtrue\r\n        if (obj1.posX + obj1.size > obj2.posX) {\r\n            if (obj1.posX < obj2.posX + obj2.size) {\r\n                if (obj1.posY + obj1.size > obj2.posY) {\r\n                    if (obj1.posY < obj2.posY + obj2.size) {\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\n//ブロック生成関数\r\nfunction getBlocks(\r\n    size: number,\r\n    arrPos: any,\r\n    onTouch: any,\r\n    imgBlock: any,\r\n    zIndex: number\r\n) {\r\n    let objResult: any = {};\r\n\r\n    for (let index in arrPos) {\r\n        objResult[\"objBlock\" + index] = {\r\n            size: size + 3,\r\n            posX: arrPos[index][0] * size,\r\n            posY: arrPos[index][1] * size,\r\n            zIndex: zIndex,\r\n            img: imgBlock,\r\n            onTouch: onTouch,\r\n        };\r\n    }\r\n    return objResult;\r\n}\r\n\r\n//鍵　生成関数\r\nfunction getKeys(\r\n    ninja: Ninja,\r\n    posX: number,\r\n    posY: number,\r\n    zIndex: number,\r\n    openTargetTitle: string\r\n) {\r\n    let objResult: any = {};\r\n\r\n    if (ninja.readScroll.indexOf(openTargetTitle) < 0) {\r\n        //まだ鍵を見付けていない場合のみ表示\r\n        objResult[\"key\"] = {\r\n            size: 10,\r\n            posX: posX,\r\n            posY: posY,\r\n            zIndex: zIndex,\r\n            img: imgKey,\r\n            onTouch: onTouchScrollOpener,\r\n            openTargetTitle: openTargetTitle,\r\n            boolLeft: true,\r\n        };\r\n    }\r\n    return objResult;\r\n}\r\n\r\n//穴が開いた床　生成関数\r\nfunction getHoleFloor(holeStart: number, holeEnd: number) {\r\n    let objResult: any = {};\r\n\r\n    for (let i = 0; i < 5; i++) {\r\n        objResult[\"floorL\" + i] = {\r\n            size: 200,\r\n            posX: holeStart - 200,\r\n            posY: 79 - i,\r\n            zIndex: 30,\r\n            onTouch: onTouchBlock,\r\n        };\r\n\r\n        objResult[\"floorR\" + i] = {\r\n            size: 200,\r\n            posX: holeEnd,\r\n            posY: 79 - i,\r\n            zIndex: 30,\r\n            onTouch: onTouchBlock,\r\n        };\r\n    }\r\n    return objResult;\r\n}\r\n\r\n//------------------------------------------------------------\r\n//\r\n//　　　　　オブジェクトタッチ時の関数\r\n//\r\n//------------------------------------------------------------\r\n\r\n//=======================================\r\n// 巻物を開くためのトリガーに触った際のタッチ関数\r\n//=======================================\r\nfunction onTouchScrollOpener(ninja: Ninja) {\r\n    //@ts-ignore\r\n    if (ninja.game.props.readElementScroll.indexOf(this.openTargetTitle) < 0) {\r\n        //まだターゲットの巻物が読まれていない（ステージ遷移の度にリセット）\r\n\r\n        let objs = ninja.game.objs;\r\n        for (let key in objs) {\r\n            //@ts-ignore\r\n            if (objs[key].title !== this.openTargetTitle && objs[key].scroll) {\r\n                //表示が被らないように、他の巻物を消す\r\n                objs[key].visible = false;\r\n                //@ts-ignore\r\n            } else if (objs[key].title === this.openTargetTitle) {\r\n                //該当の巻物を表示する\r\n                objs[key].visible = true;\r\n            }\r\n        }\r\n    }\r\n    //読み終えたリストの中に該当の巻物を追加\r\n    //@ts-ignore\r\n    ninja.readScroll.push(this.openTargetTitle);\r\n    //@ts-ignore\r\n    ninja.game.props.readElementScroll.push(this.openTargetTitle);\r\n}\r\n\r\n//=======================================\r\n// 貫通不可能ブロック用のタッチ関数\r\n//=======================================\r\nfunction onTouchBlock(ninja: Ninja, from: string) {\r\n    if (from === \"upper\") {\r\n        //上から\r\n        //@ts-ignore\r\n        ninja.posY = this.posY - ninja.size;\r\n        ninja.speedY = 0;\r\n    } else if (from === \"right\") {\r\n        //右から\r\n        //@ts-ignore\r\n        ninja.posX = this.posX + this.size;\r\n        ninja.speedX = 0;\r\n    } else if (from === \"lower\") {\r\n        //下から\r\n        //@ts-ignore\r\n        ninja.posY = this.posY + this.size;\r\n        ninja.speedY = 0;\r\n    } else if (from === \"left\") {\r\n        //左から\r\n        //@ts-ignore\r\n        ninja.posX = this.posX - ninja.size;\r\n        ninja.speedX = 0;\r\n    }\r\n}\r\n\r\n//=======================================\r\n// 上から乗れる木などのタッチ関数\r\n//=======================================\r\nfunction onTouchTree(ninja: Ninja, from: string) {\r\n    if (from === \"upper\") {\r\n        //上から\r\n        //@ts-ignore\r\n        ninja.posY = this.posY - ninja.size;\r\n        ninja.speedY = 0;\r\n    }\r\n}\r\n\r\n//=======================================\r\n// 風呂場の鍵がかかったドアのタッチ関数\r\n//=======================================\r\n//@ts-ignore\r\nfunction onTouchLockedDoor(ninja: Ninja, from: string) {\r\n    //@ts-ignore\r\n    if (ninja.readScroll.indexOf(this.keyName) < 0) {\r\n        //鍵を持っていなければブロック\r\n        if (from === \"upper\") {\r\n            //上から\r\n            //@ts-ignore\r\n            ninja.posY = this.posY - ninja.size;\r\n            ninja.speedY = 0;\r\n        } else if (from === \"right\") {\r\n            //右から\r\n            //@ts-ignore\r\n            ninja.posX = this.posX + this.size;\r\n            ninja.speedX = 0;\r\n        } else if (from === \"lower\") {\r\n            //下から\r\n            //@ts-ignore\r\n            ninja.posY = this.posY + this.size;\r\n            ninja.speedY = 0;\r\n        } else if (from === \"left\") {\r\n            //左から\r\n            //@ts-ignore\r\n            ninja.posX = this.posX - ninja.size;\r\n            ninja.speedX = 0;\r\n        }\r\n    } else {\r\n        //鍵を持っていれば何もしない\r\n    }\r\n}\r\n\r\n//=======================================\r\n// 何も起こらないタッチ関数\r\n//=======================================\r\nfunction onTouchNothing() {}\r\n\r\n//=======================================\r\n// 別ステージへのゲートのタッチ関数（左右）\r\n//=======================================\r\nfunction onTouchGateWall(ninja: Ninja, from: string) {\r\n    if (from === \"right\") {\r\n        //右から\r\n        ninja.posX += 160 - ninja.size;\r\n        ninja.speedX = 0;\r\n        ninja.speedY = 0;\r\n    } else {\r\n        //左から\r\n        ninja.posX = 0;\r\n        ninja.speedX = 0;\r\n        ninja.speedY = 0;\r\n    }\r\n    //@ts-ignore\r\n    this.changeStage(this.next, ninja);\r\n\r\n    return \"changed\";\r\n}\r\n\r\n//=======================================\r\n// 別ステージへのゲートのタッチ関数（stage1から下へ落ちる）\r\n//=======================================\r\nfunction onTouchGateTop1(ninja: Ninja, from: string) {\r\n    if (from === \"upper\") {\r\n        //上から\r\n        ninja.posX = 145;\r\n        ninja.posY = 0;\r\n        ninja.speedY = 0;\r\n        ninja.speedX = 0;\r\n    }\r\n    //@ts-ignore\r\n    this.changeStage(this.next, ninja);\r\n\r\n    return \"changed\";\r\n}\r\n\r\n//=======================================\r\n// 別ステージへのゲートのタッチ関数（stage2等から上へ飛ばされる）\r\n//=======================================\r\nfunction onTouchGateTop2(ninja: Ninja, from: string) {\r\n    //下から\r\n    ninja.posX = 145;\r\n    ninja.posY = -100;\r\n    ninja.speedX = 0;\r\n    ninja.speedY = 0;\r\n\r\n    //@ts-ignore\r\n    this.changeStage(this.next, ninja);\r\n\r\n    return \"changed\";\r\n}\r\n\r\n//=======================================\r\n// 別ステージへのゲートのタッチ関数（汎用化したもの）\r\n//=======================================\r\nfunction onTouchStageChangeCommon(ninja: Ninja, from: string) {\r\n    //@ts-ignore\r\n    ninja.posX = this.nextX;\r\n    //@ts-ignore\r\n    ninja.posY = this.nextY;\r\n    //@ts-ignore\r\n    ninja.boolLeft = this.nextLeft;\r\n    //@ts-ignore\r\n    this.changeStage(this.next, ninja);\r\n\r\n    return \"changed\";\r\n}\r\n\r\n//=======================================\r\n// 敵に触ってゲームオーバー\r\n//=======================================\r\nfunction onTouchEnemy(ninja: Ninja) {\r\n    if (!!ninja && !!ninja.game) {\r\n        //ゲームを停止\r\n        clearInterval(ninja.game.timerId);\r\n        //ゲームオーバー画面へリダイレクト\r\n        const url = \"/game-over?g=ninja2&l=\" + ninja.game.lang;\r\n        setTimeout(() => {\r\n            if (ninja.push) {\r\n                ninja.push(url);\r\n            } else {\r\n                window.location.href = url;\r\n            }\r\n        }, 1000);\r\n    }\r\n}\r\n\r\n//------------------------------------------------------------\r\n//\r\n//　　　　　タイムステップごとの関数\r\n//\r\n//------------------------------------------------------------\r\n\r\n//=======================================\r\n// 通常敵キャラ　タイムステップ毎\r\n//=======================================\r\nfunction eachTimeEnemy(ninja: Ninja, key: any) {\r\n    //@ts-ignore\r\n    if (this && this.enemy) {\r\n        //敵の行動可能域計算\r\n        //@ts-ignore\r\n        if (this.xMax && this.posX > this.xMax) {\r\n            //x最大値を超えている場合\r\n            //@ts-ignore\r\n            this.posX = this.xMax;\r\n            return;\r\n            //@ts-ignore\r\n        } else if (this.xMin && this.posX < this.xMin) {\r\n            //x最小値を超えている場合\r\n            //@ts-ignore\r\n            this.posX = this.xMin;\r\n            return;\r\n        }\r\n        //@ts-ignore\r\n        if (this.yMax && this.posY > this.yMax) {\r\n            //y最大値を超えている場合\r\n            //@ts-ignore\r\n            this.posY = this.yMax;\r\n            return;\r\n            //@ts-ignore\r\n        } else if (this.yMin && this.posY < this.yMin) {\r\n            //y最小値を超えている場合\r\n            //@ts-ignore\r\n            this.posY = this.yMin;\r\n            return;\r\n        }\r\n\r\n        //X軸について、忍者を追いかける\r\n        //@ts-ignore\r\n        if (this.speedX !== 0) {\r\n            //@ts-ignore\r\n            if (ninja.posX >= this.posX + this.size - ninja.size / 2) {\r\n                //@ts-ignore\r\n                this.posX += this.speedX;\r\n                //@ts-ignore\r\n                this.boolLeft = false;\r\n                //@ts-ignore\r\n            } else if (ninja.posX + ninja.size / 2 <= this.posX) {\r\n                //@ts-ignore\r\n                this.posX += this.speedX * -1;\r\n                //@ts-ignore\r\n                this.boolLeft = true;\r\n            } else {\r\n                //@ts-ignore\r\n                this.posX += ninja.posX < this.posX ? -1 : 0;\r\n                //@ts-ignore\r\n                this.posX += ninja.posX > this.posX ? 1 : 0;\r\n            }\r\n        }\r\n        //Y軸について、忍者を追いかける\r\n        //@ts-ignore\r\n        if (ninja.posY >= this.posY + this.size - ninja.size / 2) {\r\n            //@ts-ignore\r\n            this.posY += this.speedY;\r\n            //@ts-ignore\r\n        } else if (ninja.posY + ninja.size / 2 <= this.posY) {\r\n            //@ts-ignore\r\n            this.posY += this.speedY * -1;\r\n        }\r\n\r\n        for (let i = 0; i <= ninja.fireBallCount; i++) {\r\n            if (ninja.game.objs[\"fireBall\" + i]) {\r\n                //まだ消えていないFireBallについて\r\n\r\n                //@ts-ignore\r\n                if (checkTouch(this, ninja.game.objs[\"fireBall\" + i])) {\r\n                    //敵がFireBallに触れた場合\r\n                    delete ninja.game.objs[key];\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n//=======================================\r\n// 一つ目小僧　タイムステップ毎\r\n//=======================================\r\nfunction eachTimeOneEye(ninja: Ninja, key: any) {\r\n    //@ts-ignore\r\n    if (this && this.enemy) {\r\n        //重複を防ぐために現在時刻をプロパティ名に\r\n        let day = new Date().getTime();\r\n\r\n        //5回に1回火の玉生成\r\n        var random1 = Math.floor(Math.random() * 6);\r\n        var random2 = Math.floor(Math.random() * 6);\r\n        var random3 = Math.floor(Math.random() * 6);\r\n        if (random1 === 0) {\r\n            if (random2 !== 0 && random3 !== 0) {\r\n                ninja.game.objs[\"oneEye\" + day] = {\r\n                    size: 13,\r\n                    //@ts-ignore\r\n                    posX: this.posX,\r\n                    //@ts-ignore\r\n                    posY: this.posY,\r\n                    speedX: random2 / 5,\r\n                    speedY: random3 / 5,\r\n                    zIndex: 5,\r\n                    img: imgBlueFire,\r\n                    onTouch: onTouchEnemy,\r\n                    enemy: true,\r\n                    eachTime: eachTimeEnemy,\r\n                };\r\n            }\r\n        }\r\n\r\n        //Y軸について、忍者を追いかける\r\n        //@ts-ignore\r\n        if (ninja.posY >= this.posY + this.size - ninja.size / 2) {\r\n            //@ts-ignore\r\n            this.posY += this.speedY;\r\n            //@ts-ignore\r\n        } else if (ninja.posY + ninja.size / 2 <= this.posY) {\r\n            //@ts-ignore\r\n            this.posY += this.speedY * -1;\r\n        }\r\n\r\n        for (let i = 0; i <= ninja.fireBallCount; i++) {\r\n            if (ninja.game.objs[\"fireBall\" + i]) {\r\n                //まだ消えていないFireBallについて\r\n\r\n                //@ts-ignore\r\n                if (checkTouch(this, ninja.game.objs[\"fireBall\" + i])) {\r\n                    //敵がFireBallに触れた場合\r\n                    delete ninja.game.objs[key];\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n//=======================================\r\n// ボス　タイムステップ毎\r\n//=======================================\r\nfunction eachTimeBoss(ninja: Ninja, key: any) {\r\n    //@ts-ignore\r\n    if (this && this.enemy) {\r\n        //重複を防ぐために現在時刻をプロパティ名に\r\n        let day = new Date().getTime();\r\n\r\n        //5回に1回コウモリ生成\r\n        let random1 = Math.floor(Math.random() * 6);\r\n        let random2 = Math.floor(Math.random() * 6);\r\n        let random3 = Math.floor(Math.random() * 6);\r\n        let randomHalf = Math.floor(Math.random() * 3);\r\n\r\n        if (random1 * random2 === 9 && randomHalf === 2) {\r\n            ninja.game.objs[\"bat\" + day] = {\r\n                size: 13,\r\n                //@ts-ignore\r\n                posX: this.posX,\r\n                //@ts-ignore\r\n                posY: this.posY,\r\n                speedX: random3 / 3,\r\n                speedY: random2 / 3,\r\n                zIndex: 5,\r\n                img: imgBat,\r\n                onTouch: onTouchEnemy,\r\n                enemy: true,\r\n                eachTime: eachTimeEnemy,\r\n            };\r\n        }\r\n\r\n        let random4 = Math.floor(Math.random() * 6);\r\n\r\n        //一つ目生成\r\n        if (random1 * random2 * random3 * random4 === 27 && randomHalf === 2) {\r\n            //3が3つと1ひとつ　⇒　右から\r\n            ninja.game.objs[\"hitotsumeR\" + day] = {\r\n                size: 12,\r\n                posX: 147,\r\n                xMin: 147,\r\n                posY: -12,\r\n                speedX: 0,\r\n                speedY: 0.5,\r\n                zIndex: 5,\r\n                img: imgOneEye,\r\n                onTouch: onTouchEnemy,\r\n                enemy: true,\r\n                eachTime: eachTimeOneEye,\r\n            };\r\n        }\r\n        if (random1 * random2 * random3 * random4 === 625 && randomHalf === 2) {\r\n            //全部5　⇒　左から\r\n            ninja.game.objs[\"hitotsumeL\" + day] = {\r\n                size: 12,\r\n                posX: 1,\r\n                xMax: 1,\r\n                posY: -12,\r\n                speedX: 0,\r\n                speedY: 0.5,\r\n                zIndex: 5,\r\n                img: imgOneEye,\r\n                onTouch: onTouchEnemy,\r\n                enemy: true,\r\n                eachTime: eachTimeOneEye,\r\n            };\r\n        }\r\n\r\n        let random5 = Math.floor(Math.random() * 6);\r\n\r\n        if (\r\n            random4 * random5 === 4 ||\r\n            random4 * random5 === 9 ||\r\n            random4 * random5 === 25\r\n        ) {\r\n            //ボックス\r\n            ninja.game.objs[\"box\" + day] = {\r\n                size: 5 * random1,\r\n                posX: 32 * random2 - 5 * random1,\r\n                posY: 11 * random3 - 5 * random1 + 40,\r\n                speedX: 0,\r\n                speedY: 0,\r\n                zIndex: 22,\r\n                img: imgBox1,\r\n                onTouch: onTouchBlock,\r\n                enemy: true,\r\n                eachTime: eachTimeEnemy,\r\n            };\r\n        }\r\n\r\n        for (let i = 0; i <= ninja.fireBallCount; i++) {\r\n            if (ninja.game.objs[\"fireBall\" + i]) {\r\n                //まだ消えていないFireBallについて\r\n\r\n                //@ts-ignore\r\n                if (checkTouch(this, ninja.game.objs[\"fireBall\" + i])) {\r\n                    ninja.game.objs[\"rightGateWall\"] = {\r\n                        size: 300,\r\n                        posX: 160,\r\n                        posY: -200,\r\n                        zIndex: 30,\r\n                        next: 20,\r\n                        onTouch: onTouchGateWall,\r\n                        //@ts-ignore\r\n                        changeStage: this.changeStage,\r\n                    };\r\n\r\n                    ninja.game.objs[\"kanban1Pic\"] = {\r\n                        size: 20,\r\n                        posX: 130,\r\n                        posY: 60,\r\n                        zIndex: 24,\r\n                        img: imgKanban1,\r\n                        onTouch: onTouchNothing,\r\n                    };\r\n\r\n                    ninja.game.objs[\"kanban1ArrowPic\"] = {\r\n                        size: 10,\r\n                        posX: 135,\r\n                        posY: 63,\r\n                        boolLeft: false,\r\n                        zIndex: 24,\r\n                        img: imgArrow1,\r\n                        onTouch: onTouchNothing,\r\n                    };\r\n\r\n                    //背景変更\r\n                    ninja.game.backgroundSetting.backgroundImage = `url(${stage19a})`;\r\n\r\n                    //敵がFireBallに触れた場合\r\n                    delete ninja.game.objs[key];\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n//=======================================\r\n// ファイヤーボール　タイムステップ毎\r\n//=======================================\r\nfunction eachTimeFireBall(ninja: Ninja, key: any) {\r\n    //fireBall\r\n    //@ts-ignore\r\n    if (this && this.fireBall) {\r\n        //@ts-ignore\r\n        if (this.posX + this.size < 0 || this.posX > 160) {\r\n            //fireBallが画面からはみ出した場合、消す\r\n            delete ninja.game.objs[key];\r\n        } else {\r\n            //fireBallが画面内にある場合\r\n            //@ts-ignore\r\n            if (this.boolLeft) {\r\n                //左向き\r\n                //@ts-ignore\r\n                this.posX -= 10;\r\n            } else {\r\n                //右向き\r\n                //@ts-ignore\r\n                this.posX += 10;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n//=======================================\r\n// デカい魚　タイムステップ毎\r\n//=======================================\r\nfunction eachTimeKimme(ninja: Ninja, key: any) {\r\n    //@ts-ignore\r\n    if (this && this.enemy) {\r\n        //X軸について、忍者を追いかける\r\n        //@ts-ignore\r\n        if (this.speedX !== 0) {\r\n            //@ts-ignore\r\n            if (ninja.posX >= this.posX + this.size - ninja.size / 2) {\r\n                //@ts-ignore\r\n                this.posX += this.speedX;\r\n                //@ts-ignore\r\n                this.boolLeft = false;\r\n                //@ts-ignore\r\n            } else if (ninja.posX + ninja.size / 2 <= this.posX) {\r\n                //@ts-ignore\r\n                this.posX += this.speedX * -1;\r\n                //@ts-ignore\r\n                this.boolLeft = true;\r\n            } else {\r\n                //@ts-ignore\r\n                this.posX += ninja.posX < this.posX ? -1 : 0;\r\n                //@ts-ignore\r\n                this.posX += ninja.posX > this.posX ? 1 : 0;\r\n            }\r\n        }\r\n\r\n        //敵の行動可能域計算\r\n        //@ts-ignore\r\n        if (this.xMax && this.posX > this.xMax) {\r\n            //x最大値を超えている場合\r\n            //@ts-ignore\r\n            this.posX = this.xMax;\r\n            //@ts-ignore\r\n        } else if (this.xMin && this.posX < this.xMin) {\r\n            //x最小値を超えている場合\r\n            //@ts-ignore\r\n            this.posX = this.xMin;\r\n        }\r\n\r\n        for (let i = 0; i <= ninja.fireBallCount; i++) {\r\n            if (ninja.game.objs[\"fireBall\" + i]) {\r\n                //まだ消えていないFireBallについて\r\n\r\n                //@ts-ignore\r\n                if (checkTouch(this, ninja.game.objs[\"fireBall\" + i])) {\r\n                    //敵がFireBallに触れた場合\r\n                    //@ts-ignore\r\n                    this.posX += 0.5;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport { Page2 };\r\n","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\Ninja2\\Page1.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\common\\util\\VideoRecorder.ts",["932"],"export class VideoRecorder {\r\n    mediaRecorder?: MediaRecorder;\r\n    videoName: string = \"\";\r\n    recordingState = { isRecording: false };\r\n\r\n    prepareRecordingAsync = async (videoName?: string) => {\r\n        if (videoName) {\r\n            this.videoName = videoName;\r\n        }\r\n        if (!this.mediaRecorder) {\r\n            this.mediaRecorder = await this.getMediaRecorder();\r\n        }\r\n\r\n        alert(\"Hide the bar below!\");\r\n    };\r\n\r\n    startRecording = () => {\r\n        if (!this.mediaRecorder) {\r\n            alert(\"Not prepared yet!!!!!!!!!!!!!\");\r\n            return;\r\n        }\r\n\r\n        this.beforeRecording();\r\n\r\n        this.recordingState.isRecording = true;\r\n        this.mediaRecorder?.start();\r\n\r\n        const checkStop = () => {\r\n            if (this.recordingState.isRecording) {\r\n                setTimeout(checkStop, 500);\r\n            } else {\r\n                this.mediaRecorder?.stop();\r\n                setTimeout(this.afterRecording, 1000);\r\n            }\r\n        };\r\n        checkStop();\r\n    };\r\n\r\n    stopRecording = () => {\r\n        this.recordingState.isRecording = false;\r\n    };\r\n\r\n    private getHandleStop = (blobData: Blob) => {\r\n        return async () => {\r\n            const blob = new Blob([blobData], {\r\n                type: \"video/webm;codecs=vp9\",\r\n            });\r\n\r\n            var url = window.URL.createObjectURL(blob);\r\n\r\n            const a = document.createElement(\"a\");\r\n            document.body.appendChild(a);\r\n            a.style.display = \"none\";\r\n\r\n            a.href = url;\r\n            a.download = this.videoName || \"recordedVideo\";\r\n            a.click();\r\n            window.URL.revokeObjectURL(url);\r\n\r\n            a.remove();\r\n        };\r\n    };\r\n\r\n    private getMediaRecorder = async () => {\r\n        const displayOptions = {\r\n            video: {\r\n                cursor: \"never\",\r\n            } as MediaTrackConstraints,\r\n            audio: {\r\n                echoCancellation: true,\r\n                noiseSuppression: true,\r\n                sampleRate: 192000,\r\n            },\r\n        };\r\n\r\n        // @ts-ignore\r\n        const stream = await navigator.mediaDevices.getDisplayMedia(\r\n            displayOptions\r\n        );\r\n        const options = { mimeType: \"video/webm;codecs=vp9\" };\r\n\r\n        const mediaRecorder = new MediaRecorder(stream, options);\r\n\r\n        mediaRecorder.ondataavailable = (e: BlobEvent) => {\r\n            console.log(\"The video data is available\");\r\n            mediaRecorder.onstop = this.getHandleStop(e.data);\r\n        };\r\n\r\n        return mediaRecorder;\r\n    };\r\n\r\n    private beforeRecording = () => {\r\n        hideMouseCursor();\r\n    };\r\n\r\n    private afterRecording = () => {\r\n        console.log(\"after recording\");\r\n        showMouseCursor();\r\n    };\r\n}\r\n\r\nexport function hideMouseCursor() {\r\n    const html = document.querySelector(\"html\");\r\n    if (html) {\r\n        html.style.cursor = \"none\";\r\n    }\r\n}\r\n\r\nexport function showMouseCursor() {\r\n    const html = document.querySelector(\"html\");\r\n    if (html) {\r\n        html.style.cursor = \"auto\";\r\n    }\r\n}\r\n","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\shared\\Animations\\SeasonAnimation\\index.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\shared\\CharacterComment\\index.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\shared\\ScrollBox\\index.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\Stories\\StoriesTop\\StoriesList.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\Game\\NinjaAdventure\\Items\\Ninja.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\shared\\YouTubeVideo\\VocabVideo.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\shared\\HideHeaderAndFooter\\index.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\Vocab\\VocabVideo\\Thumbnail.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\Vocab\\VocabVideo\\TitlePage.tsx",["933"],"import React, { useEffect, useMemo, useRef, useState } from \"react\";\r\nimport { ChangePage, Page } from \".\";\r\nimport { StopAnimation } from \"../../../../../common/animation\";\r\nimport { sleepAsync } from \"../../../../../common/functions\";\r\nimport { sound, vocab } from \"../../../../../types/vocab\";\r\nimport CharacterComment from \"../../../../shared/CharacterComment\";\r\nimport { ScrollBox } from \"../../../../shared/ScrollBox\";\r\n\r\nexport function TitlePage({\r\n    titleToShowUpper,\r\n    screenWidth,\r\n    changePage,\r\n    vocabList,\r\n    music,\r\n    startingVoice,\r\n    isAutoRecord,\r\n}: {\r\n    titleToShowUpper: string;\r\n    screenWidth: number;\r\n    changePage: ChangePage;\r\n    vocabList: vocab[];\r\n    music: sound;\r\n    startingVoice: sound;\r\n    isAutoRecord: boolean;\r\n}) {\r\n    const scrollTextRef = useRef<HTMLSpanElement>(null);\r\n    const characterCommentRef = useRef<HTMLDivElement>(null);\r\n\r\n    const [isInitial, setIsInitial] = useState(true);\r\n\r\n    const [isOmitted, setIsOmitted] = useState(false);\r\n    const initialHiraganaList = useMemo(\r\n        () =>\r\n            vocabList.reduce((acc, val) => {\r\n                const nextArr = [...acc, val.hiragana];\r\n                if (nextArr.join(\"\").length > 18) {\r\n                    setIsOmitted(true);\r\n                    return acc;\r\n                }\r\n                return nextArr;\r\n            }, [] as string[]),\r\n        []\r\n    );\r\n    const [hiraganaList, setHiraganaList] = useState<string[]>(\r\n        initialHiraganaList\r\n    );\r\n    const [isCommentTwoLines, setIsCommentTwoLines] = useState(false);\r\n    const [isAnimationStopped, setIsAnimationStopped] = useState(true);\r\n\r\n    useEffect(() => {\r\n        const musicPlay = async () => {\r\n            const { audio } = music;\r\n            music.audio.volume = 0;\r\n            audio.onended = musicPlay;\r\n            audio.play();\r\n            while (music.audio.volume < 0.002) {\r\n                music.audio.volume += 0.0002;\r\n                await sleepAsync(30);\r\n            }\r\n        };\r\n        musicPlay();\r\n\r\n        startingVoice.audio.play();\r\n\r\n        setTimeout(() => {\r\n            setIsAnimationStopped(false);\r\n        }, 2000);\r\n\r\n        setTimeout(() => {\r\n            setIsInitial(false);\r\n        }, 5000);\r\n        setTimeout(() => {\r\n            changePage(Page.list);\r\n        }, 10000);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const l = [...hiraganaList];\r\n        const rect = scrollTextRef.current?.getBoundingClientRect();\r\n        if (rect && rect.height > 100) {\r\n            l.length = l.length - 1;\r\n        }\r\n\r\n        if (l.length !== hiraganaList.length) {\r\n            setIsOmitted(true);\r\n            setHiraganaList(l);\r\n        }\r\n    }, [hiraganaList, vocabList, scrollTextRef.current]);\r\n\r\n    useEffect(() => {\r\n        const rect = characterCommentRef.current?.getBoundingClientRect();\r\n        const isTwoLines = !!rect && rect.height > 230;\r\n        setIsCommentTwoLines(isTwoLines);\r\n    }, [titleToShowUpper]);\r\n\r\n    let comment: React.ReactNode;\r\n    if (isInitial) {\r\n        comment = titleToShowUpper.split(\" \").map((t, i) => {\r\n            const str = i ? \" \" + t : t;\r\n            return t.includes(\"-\") ? (\r\n                <span style={{ display: \"inline-block\" }}>{str}</span>\r\n            ) : (\r\n                str\r\n            );\r\n        });\r\n    } else {\r\n        comment = (\r\n            <p style={{ fontSize: 60 }}>\r\n                {\"Let's check all the words\"}\r\n                <br />\r\n                {\"before starting the quiz!\"}\r\n            </p>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div\r\n            style={\r\n                isInitial\r\n                    ? {\r\n                          display: \"flex\",\r\n                          flexDirection: \"column\",\r\n                          alignItems: \"center\",\r\n                          justifyContent: \"space-around\",\r\n                          height: \"100%\",\r\n                          padding: isCommentTwoLines ? undefined : 20,\r\n                      }\r\n                    : {}\r\n            }\r\n        >\r\n            {isAnimationStopped && <StopAnimation />}\r\n            {isInitial && (\r\n                <h1\r\n                    id=\"h1title\"\r\n                    style={{\r\n                        marginTop: 10,\r\n                        marginBottom: isInitial ? 20 : 100,\r\n                        fontWeight: \"bold\",\r\n                        fontSize: 100,\r\n                    }}\r\n                >\r\n                    {\"Japanese Vocabulary Quiz\"}\r\n                </h1>\r\n            )}\r\n            <CharacterComment\r\n                containerRef={characterCommentRef}\r\n                imgNumber={1}\r\n                screenWidth={screenWidth}\r\n                comment={comment}\r\n                style={{\r\n                    maxWidth: 1000,\r\n                    position: \"relative\",\r\n                    left: -40,\r\n                }}\r\n                commentStyle={{\r\n                    fontSize: 100,\r\n                    fontWeight: \"bold\",\r\n                    maxWidth: 1000,\r\n                    marginLeft: 40,\r\n                    textAlign: \"center\",\r\n                    marginBottom: -20,\r\n                    lineHeight: 1.3,\r\n                    paddingBottom: 30,\r\n                }}\r\n                imgStyle={{ maxWidth: 150 }}\r\n            />\r\n            {isInitial && (\r\n                <ScrollBox>\r\n                    <div\r\n                        style={{\r\n                            fontSize: 50,\r\n                            textOverflow: \"hidden\",\r\n                            width: 1100,\r\n                            fontWeight: \"bold\",\r\n                        }}\r\n                    >\r\n                        <span ref={scrollTextRef}>\r\n                            {hiraganaList.join(\", \")}\r\n                            {isOmitted && \"..., etc\"}\r\n                        </span>\r\n                    </div>\r\n                </ScrollBox>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\Vocab\\VocabVideo\\QuizPage.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\Vocab\\VocabVideo\\MenuPage.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\Vocab\\VocabVideo\\ListPage.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\VocabExplorer\\GameItems\\Ninja.tsx",["934"],"import React, { useMemo } from \"react\";\r\nimport { VocabExplorerState } from \"..\";\r\nimport { appsPublicImg } from \"../../../../../common/consts\";\r\nimport { absoluteStyle } from \"../../../../../common/util/Game/absoluteStyle\";\r\nimport {\r\n    GameItem,\r\n    GameItemState,\r\n} from \"../../../../../common/util/Game/GameItem\";\r\n\r\nconst id = \"running_ninja\";\r\nconst ninja_src = `${appsPublicImg}ninja_hashiru.png`;\r\n\r\nexport class Ninja extends GameItem<VocabExplorerState> {\r\n    constructor(initialState: Omit<GameItemState<VocabExplorerState>, \"id\">) {\r\n        super({ ...initialState, id });\r\n    }\r\n\r\n    eachTime = (gameState: VocabExplorerState) => {\r\n        this.y++;\r\n    };\r\n\r\n    renderItem = ({ gameState }: { gameState: VocabExplorerState }) => {\r\n        const { UL, timeStep } = gameState;\r\n        const { x, y, width } = this;\r\n\r\n        const ninjaStyle = useMemo(\r\n            () =>\r\n                ({\r\n                    ...absoluteStyle,\r\n                    width: width * UL,\r\n                    transform: `translate3d(${x * UL}px,${y * UL}px,0px)`,\r\n                    transitionProperty: \"transform\",\r\n                    transitionDuration: `${timeStep}ms`,\r\n                    transitionTimingFunction: \"linear\",\r\n                } as const),\r\n            [UL, x, y, width]\r\n        );\r\n        return <img alt=\"running ninja\" src={ninja_src} style={ninjaStyle} />;\r\n    };\r\n}\r\n","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\Vocab\\VocabVideo\\LastPage.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\shared\\YouTubeVideo\\StorageVideo.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\shared\\FolktaleMenu\\index.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\Ninja3\\stages\\Stage20.ts",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\Ninja3\\stages\\Stage22.ts",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\Ninja3\\stages\\Stage21.ts",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\Ninja3\\stages\\Stage19.ts",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\Ninja3\\stages\\Stage18.ts",["935"],"//各オブジェクト用画像の読み込み\r\nimport { gameStorage } from \"../../../../../../common/consts\";\r\nimport Imgs from \"../ImportImgs\";\r\n//タッチ関数の読み込み\r\nimport * as OnTouch from \"../OnTouch\";\r\n//ステージの部品作成用関数群の読み込み\r\nimport * as StageParts from \"./StagePartsGenerator\";\r\n//背景画像\r\nconst bgImg = `${gameStorage}ninja3/background/grave2.jpg`;\r\n\r\nconst Stage: any = {};\r\n\r\n//英雄の墓２\r\nStage.getObjs = (ninja: any) => {\r\n    Stage.bgImg = bgImg;\r\n\r\n    let returnObjs = {\r\n        ...StageParts.getObjOutOfScreen(),\r\n        ...StageParts.getObjWalls(),\r\n\r\n        ...StageParts.getFlyingRockRight(\"toRight\", 17, 77, 21, 50),\r\n\r\n        downArrow: StageParts.getOnePic(\r\n            15,\r\n            9,\r\n            52,\r\n            Imgs.DownArrow,\r\n            10,\r\n            OnTouch.toNothing\r\n        ),\r\n\r\n        ...StageParts.getBlocks(\r\n            10,\r\n            [\r\n                [5, 2],\r\n                [6, 2],\r\n                [7, 2],\r\n                [-2, 3],\r\n                [-1, 3],\r\n                [0, 3],\r\n                [1, 3],\r\n                [2, 3],\r\n                [3, 3],\r\n                [4, 3],\r\n                [5, 3],\r\n                [6, 3],\r\n                [7, 3],\r\n                [-2, 3.7],\r\n                [-1, 3.7],\r\n                [0, 3.7],\r\n                [1, 3.7],\r\n                [2, 3.7],\r\n                [3, 3.7],\r\n                [4, 3.7],\r\n                [5, 3.7],\r\n                [6, 3.7],\r\n                [7, 3.7],\r\n                [-2, 4],\r\n                [-1, 4],\r\n                [0, 4],\r\n                [-2, 5],\r\n                [-1, 5],\r\n                [0, 5],\r\n                [-2, 6],\r\n                [-1, 6],\r\n                [0, 6],\r\n                [3, 6],\r\n                [4, 6],\r\n                [-2, 7],\r\n                [-1, 7],\r\n                [0, 7],\r\n                [3, 7],\r\n                [4, 7],\r\n            ],\r\n            OnTouch.toBlock,\r\n            Imgs.StoneBlock,\r\n            50\r\n        ),\r\n\r\n        rightGate: StageParts.getRightGate(17, -8, null, 9),\r\n        leftGate: StageParts.getLeftGate(19),\r\n        gateToLastRoom: StageParts.getDoor(\r\n            22,\r\n            9,\r\n            80,\r\n            null,\r\n            10,\r\n            21,\r\n            145,\r\n            -10,\r\n            true\r\n        ),\r\n        bottomGate: null,\r\n    };\r\n\r\n    if (ninja.posX > 80) {\r\n        //左から来た時\r\n        returnObjs = {\r\n            ...returnObjs,\r\n            ...StageParts.getFlyingRockLeft(1, 17, 160, 21, 30, 55),\r\n            ...StageParts.getFlyingRockLeft(2, 17, 160, 52, 30),\r\n            bottomGate: StageParts.getBottomGate(17, 90, 115, -12, true) as any,\r\n        };\r\n    } else {\r\n        returnObjs = {\r\n            ...returnObjs,\r\n            bottomGate: StageParts.getBottomGate(18, 90, 0, 0) as any,\r\n        };\r\n    }\r\n    return returnObjs;\r\n};\r\nexport default Stage;\r\n","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\Ninja3\\stages\\Stage17.ts",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\Ninja3\\stages\\Stage16.ts",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\Ninja3\\stages\\Stage15.ts",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\Ninja3\\stages\\Stage14.ts",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\Ninja3\\stages\\Stage13.ts",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\Ninja3\\stages\\Stage12.ts",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\Ninja3\\stages\\Stage11.ts",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\shared\\Markdown\\CodeRender\\PointBox.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\Ninja\\objs\\obj.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\Ninja\\objs\\ninja\\ninja.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\shared\\Link\\ATargetBlank.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\Ninja2\\objs\\obj.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\Ninja2\\objs\\ninja\\ninja.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\Game\\NinjaAdventure\\GameState.ts",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\common\\util\\getHoverClass.ts",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\common\\util\\Audio\\audioPlayAsync.ts",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\Game\\GameBase\\Menu\\index.tsx",["936"],"import Button from \"@material-ui/core/Button/Button\";\r\nimport Collapse from \"@material-ui/core/Collapse/Collapse\";\r\nimport Slide from \"@material-ui/core/Slide/Slide\";\r\nimport React, {\r\n    CSSProperties,\r\n    useCallback,\r\n    useEffect,\r\n    useMemo,\r\n    useState,\r\n} from \"react\";\r\nimport { gameOpenAnimationTime } from \"../GameFrame\";\r\nimport { MenuContent } from \"./Contents/MenuContent\";\r\n\r\nexport type SubMenu = \"Game\" | \"About\";\r\n\r\nexport const menuLabels: { [key in SubMenu]: { name: string }[] } = {\r\n    Game: [{ name: \"status\" }, { name: \"skills\" }],\r\n    About: [{ name: \"test1\" }, { name: \"test2\" }, { name: \"test3\" }],\r\n};\r\n\r\nexport const menuStyle = {\r\n    screenMargin: 1,\r\n    buttonWidth: 28,\r\n    buttonHeight: 8,\r\n    buttonMargin: 1,\r\n    sectionMargin: 2,\r\n    buttonFontSize: 3,\r\n    smallButtonFontSize: 2,\r\n};\r\n\r\nexport interface MenuState {\r\n    isMenuOpen: boolean;\r\n    subMenu: SubMenu;\r\n}\r\n\r\nclass MenuStateManager {\r\n    private _menuState: MenuState;\r\n    private _setMenuState: (state: MenuState) => void;\r\n\r\n    constructor(\r\n        menuState: MenuState,\r\n        setMenuState: (state: MenuState) => void\r\n    ) {\r\n        this._menuState = menuState;\r\n        this._setMenuState = setMenuState;\r\n    }\r\n\r\n    getState() {\r\n        return this._menuState;\r\n    }\r\n\r\n    setState(newState: Partial<MenuState>) {\r\n        this._menuState = { ...this._menuState, ...newState };\r\n        this._setMenuState(this._menuState);\r\n    }\r\n}\r\nexport let menuStateManager: MenuStateManager;\r\n\r\nfunction useMenuStateManager() {\r\n    const [menuState, setMenuState] = useState<MenuState>({\r\n        isMenuOpen: true,\r\n        subMenu: \"Game\",\r\n    });\r\n\r\n    useEffect(() => {\r\n        menuStateManager = new MenuStateManager(menuState, setMenuState);\r\n    }, []);\r\n\r\n    return menuState;\r\n}\r\n\r\nexport function GameMenu({ UL }: { UL: number }) {\r\n    const { isMenuOpen, subMenu } = useMenuStateManager();\r\n\r\n    const setOpen = useCallback((open: boolean) => {\r\n        menuStateManager.setState({ isMenuOpen: open });\r\n    }, []);\r\n    const onClickMenuButton = useCallback(() => setOpen(!isMenuOpen), [\r\n        isMenuOpen,\r\n    ]);\r\n    const onClickBlackLayer = useCallback(() => setOpen(false), []);\r\n\r\n    return (\r\n        <>\r\n            <MenuButton UL={UL} open={isMenuOpen} onClick={onClickMenuButton} />\r\n            <SideBar UL={UL} open={isMenuOpen} chosenSubMenu={subMenu} />\r\n            <MenuScreen UL={UL} open={isMenuOpen} />\r\n            <BlackLayer open={isMenuOpen} UL={UL} onClick={onClickBlackLayer} />\r\n        </>\r\n    );\r\n}\r\n\r\nfunction MenuButton({\r\n    UL,\r\n    open,\r\n    onClick,\r\n}: {\r\n    UL: number;\r\n    open: boolean;\r\n    onClick: () => void;\r\n}) {\r\n    const style = useMemo<CSSProperties>(\r\n        () => ({\r\n            zIndex: 20005,\r\n            position: \"absolute\",\r\n            top: menuStyle.screenMargin * UL,\r\n            right: (menuStyle.screenMargin + menuStyle.buttonMargin) * UL,\r\n            width: menuStyle.buttonWidth * UL,\r\n            height: menuStyle.buttonHeight * UL,\r\n            fontSize: menuStyle.buttonFontSize * UL,\r\n            fontWeight: \"bold\",\r\n            opacity: UL ? (open ? 1 : 0.9) : 0,\r\n            transition: gameOpenAnimationTime,\r\n        }),\r\n        [UL, open]\r\n    );\r\n\r\n    return (\r\n        <Button\r\n            variant=\"contained\"\r\n            color={open ? \"secondary\" : \"primary\"}\r\n            style={style}\r\n            onClick={onClick}\r\n        >\r\n            {open ? \"Close\" : \"Menu\"}\r\n        </Button>\r\n    );\r\n}\r\n\r\nfunction SideBar({\r\n    UL,\r\n    open,\r\n    chosenSubMenu,\r\n}: {\r\n    UL: number;\r\n    open: boolean;\r\n    chosenSubMenu: SubMenu;\r\n}) {\r\n    const OutsideCollapseStyle = useMemo<CSSProperties>(\r\n        () => ({\r\n            position: \"absolute\",\r\n            top:\r\n                (menuStyle.screenMargin +\r\n                    menuStyle.buttonHeight +\r\n                    menuStyle.sectionMargin +\r\n                    (chosenSubMenu === \"Game\" ? menuStyle.buttonMargin : 0)) *\r\n                UL,\r\n            transition: \"500ms\",\r\n            right: menuStyle.screenMargin * UL,\r\n            width: (menuStyle.buttonWidth + 2 * menuStyle.buttonMargin) * UL,\r\n            zIndex: 20004,\r\n        }),\r\n        [chosenSubMenu, UL]\r\n    );\r\n\r\n    return (\r\n        <Collapse in={open} style={OutsideCollapseStyle} timeout={500}>\r\n            {(Object.keys(menuLabels) as (keyof typeof menuLabels)[]).map(\r\n                subMenu => (\r\n                    <EachMenu\r\n                        key={subMenu}\r\n                        UL={UL}\r\n                        chosenSubMenu={chosenSubMenu}\r\n                        subMenu={subMenu}\r\n                    />\r\n                )\r\n            )}\r\n        </Collapse>\r\n    );\r\n}\r\n\r\nfunction EachMenu({\r\n    UL,\r\n    chosenSubMenu,\r\n    subMenu,\r\n}: {\r\n    UL: number;\r\n    chosenSubMenu: SubMenu;\r\n    subMenu: SubMenu;\r\n}) {\r\n    const EachMenuDivStyle = useMemo<CSSProperties>(\r\n        () => ({\r\n            width: \"100%\",\r\n            backgroundColor:\r\n                chosenSubMenu === subMenu ? \"rgba(255,255,255,0.7)\" : undefined,\r\n            transition: \"500ms\",\r\n            borderTopRightRadius: UL,\r\n            borderBottomRightRadius: UL,\r\n        }),\r\n        [chosenSubMenu, subMenu, UL]\r\n    );\r\n\r\n    const ButtonStyle = useMemo<CSSProperties>(\r\n        () => ({\r\n            margin: menuStyle.buttonMargin * UL,\r\n            width: menuStyle.buttonWidth * UL,\r\n            height: menuStyle.buttonHeight * UL,\r\n            fontSize: menuStyle.buttonFontSize * UL,\r\n            zIndex: 20004,\r\n            fontWeight: \"bold\",\r\n            transition: \"500ms\",\r\n        }),\r\n        [UL]\r\n    );\r\n\r\n    const onClickButton = useCallback(() => {\r\n        menuStateManager.setState({ subMenu });\r\n    }, [subMenu]);\r\n\r\n    return (\r\n        <div style={EachMenuDivStyle}>\r\n            <Button\r\n                variant=\"contained\"\r\n                color={chosenSubMenu === subMenu ? \"primary\" : \"default\"}\r\n                style={ButtonStyle}\r\n                onClick={onClickButton}\r\n            >\r\n                {subMenu}\r\n            </Button>\r\n            <Collapse in={chosenSubMenu === subMenu}>\r\n                {menuLabels[subMenu].map(c => (\r\n                    <LowestLayerButton key={c.name} name={c.name} UL={UL} />\r\n                ))}\r\n            </Collapse>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction LowestLayerButton({ name, UL }: { name: string; UL: number }) {\r\n    const ButtonStyle = useMemo<CSSProperties>(\r\n        () => ({\r\n            margin: menuStyle.buttonMargin * UL,\r\n            width: menuStyle.buttonWidth * UL,\r\n            height: menuStyle.buttonHeight * UL,\r\n            fontSize: menuStyle.smallButtonFontSize * UL,\r\n            fontWeight: \"bold\",\r\n            zIndex: 20004,\r\n        }),\r\n        [UL]\r\n    );\r\n\r\n    return (\r\n        <Button\r\n            key={name}\r\n            variant=\"outlined\"\r\n            color=\"default\"\r\n            style={ButtonStyle}\r\n        >\r\n            {name}\r\n        </Button>\r\n    );\r\n}\r\n\r\nfunction MenuScreen({ UL, open }: { UL: number; open: boolean }) {\r\n    return (\r\n        <div\r\n            style={{\r\n                position: \"absolute\",\r\n                top: menuStyle.screenMargin * UL,\r\n                right: open\r\n                    ? (menuStyle.screenMargin +\r\n                          2 * menuStyle.buttonMargin +\r\n                          menuStyle.buttonWidth) *\r\n                      UL\r\n                    : menuStyle.screenMargin,\r\n                width: open\r\n                    ? (160 -\r\n                          (2 * menuStyle.screenMargin +\r\n                              2 * menuStyle.buttonMargin +\r\n                              menuStyle.buttonWidth)) *\r\n                      UL\r\n                    : 0,\r\n                height: open ? (90 - 2 * menuStyle.screenMargin) * UL : 0,\r\n                transition: gameOpenAnimationTime,\r\n                zIndex: 20002,\r\n                backgroundColor: \"white\",\r\n                borderRadius: 1 * UL,\r\n                overflow: \"hidden\",\r\n            }}\r\n        >\r\n            <MenuContent open={open} UL={UL} />\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction BlackLayer({\r\n    UL,\r\n    open,\r\n    onClick,\r\n}: {\r\n    UL: number;\r\n    open: boolean;\r\n    onClick: () => void;\r\n}) {\r\n    const BlackLayerStyle = useMemo<CSSProperties>(\r\n        () => ({\r\n            position: \"absolute\",\r\n            top: 0,\r\n            left: 0,\r\n            width: 160 * UL,\r\n            height: 90 * UL,\r\n            zIndex: 20001,\r\n            backgroundColor: \"black\",\r\n            opacity: 0.5,\r\n        }),\r\n        [UL]\r\n    );\r\n\r\n    return (\r\n        <Slide in={open} direction=\"down\">\r\n            <div style={BlackLayerStyle} onClick={onClick} />\r\n        </Slide>\r\n    );\r\n}\r\n","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\Game\\NinjaAdventure\\Items\\StageItems\\index.tsx",["937"],"import React, { CSSProperties, useMemo } from \"react\";\r\nimport { BackgroundSrc, ImgSrc } from \"../../../StorageItems\";\r\nimport { Direction } from \"../../../types/Direction\";\r\nimport { Ninja } from \"../Ninja\";\r\n\r\nexport const itemTypes = {\r\n    block: \"block\",\r\n    floor: \"floor\",\r\n    stageChanger: \"stageChanger\",\r\n    backgroundImg: \"backgroundImg\",\r\n    speakingCharacter: \"speakingCharacter\",\r\n    enemy: \"enemy\",\r\n} as const;\r\nexport type ItemType = typeof itemTypes[keyof typeof itemTypes];\r\n\r\nexport class Renderable {\r\n    renderItem(UL: number) {\r\n        throw new Error(\"Please override getItem in the child class\");\r\n    }\r\n}\r\n\r\ntype StageItemProps = {\r\n    key: string;\r\n    type: ItemType;\r\n    x: number;\r\n    y: number;\r\n    width: number;\r\n    zIndex?: number;\r\n    isUntouchable?: boolean;\r\n    imgSrc?: ImgSrc | BackgroundSrc;\r\n};\r\nexport class StageItem extends Renderable {\r\n    key: StageItemProps[\"key\"];\r\n    type: StageItemProps[\"type\"];\r\n    x: StageItemProps[\"x\"];\r\n    y: StageItemProps[\"y\"];\r\n    width: StageItemProps[\"width\"];\r\n    zIndex?: StageItemProps[\"zIndex\"];\r\n    isUntouchable: StageItemProps[\"isUntouchable\"]; // 巻物など、当たり判定常にfalseのもの\r\n    imgSrc?: StageItemProps[\"imgSrc\"];\r\n\r\n    constructor(props: StageItemProps) {\r\n        super();\r\n\r\n        this.key = props.key;\r\n        this.type = props.type;\r\n        this.x = props.x;\r\n        this.y = props.y;\r\n        this.width = props.width;\r\n        this.zIndex = props.zIndex;\r\n        this.isUntouchable = !!props.isUntouchable;\r\n        this.imgSrc = props.imgSrc;\r\n    }\r\n\r\n    checkIfTouched(target: { x: number; y: number; width: number }): boolean {\r\n        if (this.isUntouchable) {\r\n            return false;\r\n        }\r\n\r\n        //かすっていたらtrue\r\n        if (target.x + target.width > this.x) {\r\n            if (target.x < this.x + this.width) {\r\n                if (target.y + target.width > this.y) {\r\n                    if (target.y < this.y + this.width) {\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    protected getTargetDirection(target: {\r\n        x: number;\r\n        y: number;\r\n        width: number;\r\n    }): Direction {\r\n        //Itemから見た忍者の位置を返す関数\r\n\r\n        //中心座標計算\r\n        const ninja_center = [\r\n            target.x + target.width / 2,\r\n            target.y + target.width / 2,\r\n        ];\r\n        const item_center = [this.x + this.width / 2, this.y + this.width / 2];\r\n\r\n        //2オブジェクトの中心間の差を計算\r\n        const dX = item_center[0] - ninja_center[0];\r\n        const dY = item_center[1] - ninja_center[1];\r\n\r\n        //0除算除外\r\n        if (dX === 0) {\r\n            //2つの物体のx座標が一致\r\n            return dY > 0 ? Direction.top : Direction.bottom;\r\n        }\r\n\r\n        //傾き\r\n        const a = dY / dX;\r\n\r\n        //傾きから相対位置判定\r\n        if (1 > a && a > -1) {\r\n            return dX > 0 ? Direction.left : Direction.right;\r\n        } else {\r\n            return dY > 0 ? Direction.top : Direction.bottom;\r\n        }\r\n    }\r\n\r\n    onTouchNinja(ninja: Ninja) {\r\n        throw new Error(\r\n            \"onTouchNinjaが子クラスに実装されていません。オーバーライドしてください。\"\r\n        );\r\n    }\r\n\r\n    onEachTime(ninja: Ninja) {\r\n        throw new Error(\r\n            \"onEachTimeが子クラスに実装されていません。オーバーライドしてください。\"\r\n        );\r\n    }\r\n\r\n    renderItem(UL: number) {\r\n        return (\r\n            <StageItemsComponent\r\n                key={this.key}\r\n                alt={this.key}\r\n                imgSrc={this.imgSrc}\r\n                x={this.x}\r\n                y={this.y}\r\n                width={this.width}\r\n                zIndex={this.zIndex}\r\n                UL={UL}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nfunction StageItemsComponent({\r\n    imgSrc,\r\n    alt,\r\n    x,\r\n    y,\r\n    width,\r\n    zIndex,\r\n    UL,\r\n}: Pick<StageItem, \"imgSrc\" | \"x\" | \"y\" | \"width\" | \"zIndex\"> & {\r\n    alt: StageItem[\"key\"];\r\n    UL: number;\r\n}) {\r\n    const style = useMemo<CSSProperties>(\r\n        () => ({\r\n            position: \"absolute\",\r\n            top: y * UL,\r\n            left: x * UL,\r\n            width: width * UL,\r\n            zIndex: zIndex || 10,\r\n        }),\r\n        [x, y, width, zIndex, UL]\r\n    );\r\n\r\n    return imgSrc ? (\r\n        <img alt={alt} src={imgSrc} style={style} />\r\n    ) : (\r\n        <div style={style} />\r\n    );\r\n}\r\n\r\nexport function Items({ items, UL }: { items: Renderable[]; UL: number }) {\r\n    return <>{items.map(item => item.renderItem(UL))}</>;\r\n}\r\n","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\common\\util\\Game\\absoluteStyle.ts",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\common\\util\\Game\\GameItem.ts",["938"],"import { Direction } from \"../../../components/Game/types/Direction\";\r\nimport { GameState } from \"./GameStateManager\";\r\n\r\nexport type GameItemState<GS extends GameState<GS>> = Pick<\r\n    GameItem<GS>,\r\n    \"id\" | \"x\" | \"y\" | \"width\"\r\n>;\r\n\r\nexport abstract class GameItem<GS extends GameState<GS>> {\r\n    id: string;\r\n    x: number;\r\n    y: number;\r\n    width: number;\r\n\r\n    constructor(initialState: GameItemState<GS>) {\r\n        this.id = initialState.id;\r\n        this.x = initialState.x;\r\n        this.y = initialState.y;\r\n        this.width = initialState.width;\r\n    }\r\n\r\n    getCenter = () => ({\r\n        x: this.x + this.width / 2,\r\n        y: this.y + this.width / 2,\r\n    });\r\n\r\n    getTargetDirection = (targetItem: GameItem<GS>): Direction => {\r\n        const targetCenter = targetItem.getCenter();\r\n        const ownCenter = this.getCenter();\r\n\r\n        const dX = targetCenter.x - ownCenter.x;\r\n        const dY = targetCenter.y - ownCenter.y;\r\n\r\n        const a = dY / dX;\r\n\r\n        if (dX === 0) {\r\n            return dY > 0 ? Direction.bottom : Direction.top;\r\n        }\r\n\r\n        if (1 > a && a > -1) {\r\n            return dX > 0 ? Direction.right : Direction.left;\r\n        } else {\r\n            return dY > 0 ? Direction.bottom : Direction.top;\r\n        }\r\n    };\r\n\r\n    checkIfTouched(target: { x: number; y: number; width: number }): boolean {\r\n        if (target.x + target.width > this.x) {\r\n            if (target.x < this.x + this.width) {\r\n                if (target.y + target.width > this.y) {\r\n                    if (target.y < this.y + this.width) {\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    abstract eachTime: (gameState: GS) => void;\r\n\r\n    abstract renderItem: ({\r\n        gameState,\r\n    }: {\r\n        gameState: GS;\r\n    }) => JSX.Element | null;\r\n}\r\n","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\shared\\YouTubeVideo\\index.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\shared\\YouTubeAd\\index.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\shared\\Animations\\SeasonAnimation\\FallingImageEdit.tsx",["939"],"import React, { useEffect, useState } from \"react\";\r\nimport { getFallingImages } from \".\";\r\nimport { sendPost } from \"../../../../common/functions\";\r\nimport { areSameObjects } from \"../../../../common/util/compareObjects\";\r\nimport { getCurrentToken, InputRegisterToken } from \"../../InputRegisterToken\";\r\nimport { fallingImage } from \"./type\";\r\n\r\nexport function FallingImageEdit() {\r\n    const [isShown, setIsShown] = useState(false);\r\n\r\n    return (\r\n        <div style={{ margin: 50 }}>\r\n            <button\r\n                onClick={() => {\r\n                    setIsShown(!isShown);\r\n                }}\r\n            >\r\n                画像マスタ編集\r\n            </button>\r\n\r\n            {isShown && (\r\n                <Edit\r\n                    close={() => {\r\n                        setIsShown(false);\r\n                    }}\r\n                />\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction Edit({ close }: { close: () => void }) {\r\n    const [fallingImages, setFallingImages] = useState<fallingImage[]>([]);\r\n    const [initialFallingImages, setInitialFallingImages] = useState<\r\n        fallingImage[]\r\n    >([]);\r\n\r\n    useEffect(() => {\r\n        const load = async () => {\r\n            const loadedImages = await getFallingImages();\r\n            setFallingImages(loadedImages);\r\n            setInitialFallingImages(loadedImages);\r\n        };\r\n        load();\r\n    }, []);\r\n\r\n    const changeValue = (\r\n        targetFallingImage: fallingImage,\r\n        propName: keyof fallingImage,\r\n        newVal: fallingImage[keyof fallingImage]\r\n    ) => {\r\n        setFallingImages(\r\n            fallingImages.map(image => {\r\n                if (targetFallingImage === image) {\r\n                    return {\r\n                        ...image,\r\n                        [propName]: newVal,\r\n                    };\r\n                }\r\n                return image;\r\n            })\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div\r\n            style={{\r\n                border: \"solid\",\r\n                padding: 30,\r\n                maxHeight: 600,\r\n                overflowY: \"scroll\",\r\n                position: \"fixed\",\r\n                top: 100,\r\n                left: 300,\r\n                backgroundColor: \"ivory\",\r\n            }}\r\n        >\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>name</th>\r\n                        <th>alt</th>\r\n                        <th>fileName</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {fallingImages.map((fi, i) => (\r\n                        <tr\r\n                            style={{\r\n                                backgroundColor: areSameObjects(\r\n                                    fi,\r\n                                    initialFallingImages[i]\r\n                                )\r\n                                    ? undefined\r\n                                    : \"red\",\r\n                            }}\r\n                        >\r\n                            <td>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    value={fi.name}\r\n                                    onChange={ev => {\r\n                                        const newVal = ev.target.value;\r\n                                        changeValue(fi, \"name\", newVal);\r\n                                    }}\r\n                                />\r\n                            </td>\r\n                            <td>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    value={fi.alt}\r\n                                    onChange={ev => {\r\n                                        const newVal = ev.target.value;\r\n                                        changeValue(fi, \"alt\", newVal);\r\n                                    }}\r\n                                />\r\n                            </td>\r\n                            <td>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    value={fi.fileName}\r\n                                    onChange={ev => {\r\n                                        const newVal = ev.target.value;\r\n                                        changeValue(fi, \"fileName\", newVal);\r\n                                    }}\r\n                                />\r\n                            </td>\r\n                            <td>\r\n                                <button\r\n                                    onClick={() => {\r\n                                        if (\r\n                                            !window.confirm(\r\n                                                \"Do you really want to delete?\"\r\n                                            )\r\n                                        ) {\r\n                                            return;\r\n                                        }\r\n                                        setFallingImages(\r\n                                            fallingImages.filter(\r\n                                                im => im !== fi\r\n                                            )\r\n                                        );\r\n                                    }}\r\n                                >\r\n                                    {\"ー\"}\r\n                                </button>\r\n                            </td>\r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n            </table>\r\n            <button\r\n                onClick={() => {\r\n                    setFallingImages([\r\n                        ...fallingImages,\r\n                        { name: \"\", alt: \"\", fileName: \"\" },\r\n                    ]);\r\n                }}\r\n            >\r\n                {\"＋\"}\r\n            </button>\r\n            <div style={{ marginTop: 40 }}>\r\n                <button\r\n                    style={{ width: 200 }}\r\n                    onClick={() => {\r\n                        saveFallingImages(fallingImages, () => {\r\n                            document.location.reload();\r\n                        });\r\n                    }}\r\n                >\r\n                    {\"Save\"}\r\n                </button>\r\n                <InputRegisterToken style={{ marginLeft: 60, width: 100 }} />\r\n                <button\r\n                    style={{ marginLeft: 60, width: 200 }}\r\n                    onClick={() => {\r\n                        close();\r\n                    }}\r\n                >\r\n                    close\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nasync function saveFallingImages(\r\n    fallingImages: fallingImage[],\r\n    fncAfterSaving: () => void\r\n) {\r\n    if (!fallingImages.every(v => v.name && v.alt && v.fileName)) {\r\n        window.alert(\"空欄があります\");\r\n        return;\r\n    }\r\n\r\n    const duplicatedValue = fallingImages.find(\r\n        v =>\r\n            fallingImages.filter(\r\n                va =>\r\n                    v.name === va.name ||\r\n                    v.alt === va.alt ||\r\n                    v.fileName === va.fileName\r\n            ).length > 1\r\n    );\r\n    if (duplicatedValue) {\r\n        alert(\r\n            `重複エラー：「${duplicatedValue.name}」の内容と重複したレコードがあります。`\r\n        );\r\n        return;\r\n    }\r\n\r\n    if (!window.confirm(\"Do you really want to save?\")) {\r\n        return;\r\n    }\r\n\r\n    try {\r\n        const result = await sendPost(\r\n            {\r\n                fallingImages,\r\n                token: getCurrentToken(),\r\n            },\r\n            \"/api/FallingImage/Save\"\r\n        );\r\n\r\n        if (result === true) {\r\n            alert(\"success!\");\r\n            if (typeof fncAfterSaving === \"function\") {\r\n                fncAfterSaving();\r\n            }\r\n            return;\r\n        }\r\n    } catch (ex) {}\r\n\r\n    alert(\"failed...\");\r\n}\r\n","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\Ninja3\\stages\\StagePartsGenerator.ts",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\shared\\Markdown\\index.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\Ninja3\\ImportImgs.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\common\\util\\getAphroditeClassName.ts",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\Ninja3\\OnTouch.ts",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\Ninja3\\EachTime.ts",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\Game\\types\\Direction.ts",["940"],"export const Direction = {\n    top: \"top\",\n    bottom: \"bottom\",\n    left: \"left\",\n    right: \"right\",\n} as const;\nexport type Direction = typeof Direction[keyof typeof Direction];\n","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\Game\\GameBase\\Menu\\Contents\\MenuContent.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\Video\\index.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\shared\\Animations\\ColorChangeButton\\index.tsx",["941"],"import * as React from \"react\";\r\nimport { useEffect, useState } from \"react\";\r\nimport Button from \"reactstrap/lib/Button\";\r\nimport \"./style.css\";\r\n\r\ninterface FolktaleMenuProps {\r\n    label: React.ReactNode;\r\n    initialColor?: typeof buttonColor[ButtonKey];\r\n    size?: string;\r\n    style?: React.CSSProperties;\r\n}\r\nconst buttonColor = { 1: \"secondary\", 2: \"success\", 3: \"primary\" } as const;\r\nconst arrColors = Object.values(buttonColor);\r\ntype ButtonKey = keyof typeof buttonColor;\r\nexport const ColorChangeButton = ({\r\n    label,\r\n    initialColor,\r\n    size,\r\n    style,\r\n}: FolktaleMenuProps) => {\r\n    const [buttonKey, setButtonKey] = useState<ButtonKey>(1);\r\n\r\n    useEffect(() => {\r\n        if (!initialColor || !arrColors.indexOf(initialColor)) {\r\n            return;\r\n        }\r\n        const initialColorKey = initialColor\r\n            ? ((arrColors.indexOf(initialColor) + 1) as ButtonKey)\r\n            : 1;\r\n        setButtonKey(initialColorKey);\r\n    }, [initialColor]);\r\n\r\n    useEffect(() => {\r\n        const timerId = window.setTimeout(() => {\r\n            const nextKey = (buttonKey - 1 || 3) as ButtonKey;\r\n            setButtonKey(nextKey);\r\n        }, 3000);\r\n        return () => clearTimeout(timerId);\r\n    }, [buttonKey]);\r\n\r\n    return (\r\n        <Button\r\n            size={size}\r\n            color={buttonColor[buttonKey]}\r\n            style={style}\r\n            className=\"colorChangeButton\"\r\n        >\r\n            {label}\r\n        </Button>\r\n    );\r\n};\r\n","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\shared\\Markdown\\Table\\TableRender.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\shared\\Markdown\\Table\\TableCellRender.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\Ninja3\\CommonFnc.ts",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\Ninja3\\Messages.ts",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\Ninja3\\Consts.ts",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\Game\\NinjaAdventure\\Stages\\index.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\shared\\Markdown\\CodeRender\\index.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\shared\\Markdown\\InlineCodeRender\\index.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\shared\\Markdown\\LinkBlockRender\\index.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\shared\\Markdown\\ImageRender\\index.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\shared\\Markdown\\HeadingRenderer\\index.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\Game\\StorageItems.ts",["942"],"import { gameStorage } from \"../../common/consts\";\r\n\r\nexport const imgSrc = {\r\n    pochi: `${gameStorage}ninja1/objs/pochi.png`,\r\n    rock: `${gameStorage}ninja1/objs/rock.png`,\r\n    fugu: `${gameStorage}ninja2/objs/fugu.png`,\r\n} as const;\r\nexport type ImgSrc = typeof imgSrc[keyof typeof imgSrc];\r\n\r\nexport const backgroundSrc = {\r\n    furuie: `${gameStorage}ninja1/background/furuie5.jpg`,\r\n    town1: `${gameStorage}ninja1/background/town1.jpg`,\r\n} as const;\r\nexport type BackgroundSrc = typeof backgroundSrc[keyof typeof backgroundSrc];\r\n","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\Game\\NinjaAdventure\\Items\\StageItems\\StageChanger.tsx",["943"],"import { StageItem } from \".\";\r\nimport { gameState } from \"../../GameState\";\r\nimport { Ninja } from \"../Ninja\";\r\n\r\ninterface Props {\r\n    key: string;\r\n    x: number;\r\n    y: number;\r\n    width: number;\r\n    nextStage: number;\r\n    nextX?: number;\r\n    nextY?: number;\r\n}\r\n\r\nexport class StageChanger extends StageItem {\r\n    nextStage: number;\r\n    nextX?: number;\r\n    nextY?: number;\r\n\r\n    constructor({ nextStage, nextX, nextY, ...rest }: Props) {\r\n        super({ type: \"stageChanger\", zIndex: 0, ...rest });\r\n        this.nextStage = nextStage;\r\n        this.nextX = nextX;\r\n        this.nextY = nextY;\r\n    }\r\n\r\n    onEachTime() {}\r\n\r\n    onTouchNinja(ninja: Ninja) {\r\n        changeStage(ninja, this.nextStage, this.nextX, this.nextY);\r\n    }\r\n}\r\n\r\nexport function changeStage(\r\n    ninja: Ninja,\r\n    nextStage: number,\r\n    nextX?: number,\r\n    nextY?: number\r\n) {\r\n    ninja.cssAnimation = false;\r\n    gameState.stageNumber = nextStage;\r\n\r\n    if (typeof nextX === \"number\") {\r\n        ninja.x = nextX;\r\n    }\r\n    if (typeof nextY === \"number\") {\r\n        ninja.y = nextY;\r\n    }\r\n}\r\n","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\Game\\NinjaAdventure\\Items\\StageItems\\SpeakingCharacter.tsx",["944"],"import Popover from \"@material-ui/core/Popover\";\r\nimport React, { CSSProperties, useMemo, useRef } from \"react\";\r\nimport { StageItem } from \".\";\r\nimport { ImgSrc } from \"../../../StorageItems\";\r\nimport { Ninja } from \"../Ninja\";\r\n\r\ninterface Props {\r\n    key: string;\r\n    x: number;\r\n    y: number;\r\n    width: number;\r\n    zIndex?: number;\r\n    imgSrc?: ImgSrc;\r\n    withoutIcon?: boolean;\r\n}\r\n\r\nexport class SpeakingCharacter extends StageItem {\r\n    isSpeaking: boolean;\r\n    withoutIcon?: boolean;\r\n    imgSrc?: ImgSrc;\r\n\r\n    constructor(props: Props) {\r\n        const { imgSrc, ...rest } = props;\r\n        super({ type: \"speakingCharacter\", ...rest });\r\n        this.isSpeaking = false;\r\n        this.withoutIcon = props.withoutIcon;\r\n        this.imgSrc = imgSrc;\r\n    }\r\n\r\n    onEachTime() {\r\n        if (this.isSpeaking) {\r\n            this.isSpeaking = false;\r\n        }\r\n    }\r\n\r\n    onTouchNinja(ninja: Ninja) {\r\n        if (!this.isSpeaking) {\r\n            this.isSpeaking = true;\r\n        }\r\n    }\r\n\r\n    renderItem(UL: number) {\r\n        return (\r\n            <SpeakingCharacterComponent\r\n                key={this.key}\r\n                alt={this.key}\r\n                imgSrc={this.imgSrc}\r\n                x={this.x}\r\n                y={this.y}\r\n                width={this.width}\r\n                zIndex={this.zIndex}\r\n                withoutIcon={this.withoutIcon}\r\n                isSpeaking={this.isSpeaking}\r\n                UL={UL}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nconst origins = {\r\n    anchor: { vertical: \"top\", horizontal: \"left\" },\r\n    transform: { vertical: \"bottom\", horizontal: \"left\" },\r\n} as const;\r\n\r\nfunction SpeakingCharacterComponent({\r\n    alt,\r\n    imgSrc,\r\n    x,\r\n    y,\r\n    width,\r\n    zIndex,\r\n    isSpeaking,\r\n    withoutIcon,\r\n    UL,\r\n}: Pick<\r\n    SpeakingCharacter,\r\n    \"imgSrc\" | \"x\" | \"y\" | \"width\" | \"zIndex\" | \"withoutIcon\" | \"isSpeaking\"\r\n> & {\r\n    alt: SpeakingCharacter[\"key\"];\r\n    UL: number;\r\n}) {\r\n    const ref = useRef(null);\r\n\r\n    const imgStyle = useMemo<CSSProperties>(\r\n        () => ({\r\n            position: \"absolute\",\r\n            top: y * UL,\r\n            left: x * UL,\r\n            width: width * UL,\r\n            zIndex: zIndex || 10,\r\n        }),\r\n        [x, y, width, zIndex, UL]\r\n    );\r\n\r\n    const dependingOnUl = useMemo(\r\n        () =>\r\n            ({\r\n                popoverPaperProps: {\r\n                    style: {\r\n                        padding: 1 * UL,\r\n                        fontSize: 5 * UL,\r\n                        margin: 1 * UL,\r\n                        maxWidth: 150 * UL,\r\n                    },\r\n                },\r\n                iconStyle: {\r\n                    width: 10 * UL,\r\n                    float: \"left\",\r\n                    margin: 3 * UL,\r\n                },\r\n                message: getMessages(UL, \"pochi1\"),\r\n            } as const),\r\n        [UL]\r\n    );\r\n\r\n    return (\r\n        <>\r\n            <img alt={alt} src={imgSrc} style={imgStyle} ref={ref} />\r\n            <Popover\r\n                anchorOrigin={origins.anchor}\r\n                transformOrigin={origins.transform}\r\n                PaperProps={dependingOnUl.popoverPaperProps}\r\n                anchorEl={ref.current}\r\n                open={isSpeaking}\r\n            >\r\n                {!withoutIcon && (\r\n                    <img\r\n                        alt={alt}\r\n                        src={imgSrc}\r\n                        style={dependingOnUl.iconStyle}\r\n                    />\r\n                )}\r\n                {dependingOnUl.message}\r\n            </Popover>\r\n        </>\r\n    );\r\n}\r\n\r\ntype messageKey = \"pochi1\" | \"hello\";\r\nfunction getMessages(UL: number, key: messageKey) {\r\n    return {\r\n        pochi1: (\r\n            <div>\r\n                Welcome!\r\n                <br />\r\n                If you want to be a good lingual ninja, you should collect\r\n                Kotodama souls!\r\n                <br />\r\n                あああああああああああああああああああああああああああああああ\r\n            </div>\r\n        ),\r\n        hello: <div>hello</div>,\r\n    }[key];\r\n}\r\n","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\Game\\NinjaAdventure\\Items\\StageItems\\Floor.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\Game\\NinjaAdventure\\Items\\StageItems\\Enemy.tsx",["945"],"import React, { CSSProperties, useMemo } from \"react\";\r\nimport { StageItem } from \".\";\r\nimport { timeStep } from \"../..\";\r\nimport { css } from \"../../../../../common/util/getAphroditeClassName\";\r\nimport { gameOpenAnimationTime } from \"../../../GameBase/GameFrame\";\r\nimport { ImgSrc } from \"../../../StorageItems\";\r\nimport { Direction } from \"../../../types/Direction\";\r\nimport { Ninja } from \"../Ninja\";\r\n\r\nconst damageAnimationDuration = 500; //ms\r\n\r\nconst opacityKeyframes = {\r\n    \"0%\": {\r\n        opacity: 1,\r\n    },\r\n    \"25%\": {\r\n        opacity: 0,\r\n    },\r\n    \"50%\": {\r\n        opacity: 1,\r\n    },\r\n    \"75%\": {\r\n        opacity: 0,\r\n    },\r\n    \"100%\": {\r\n        opacity: 1,\r\n    },\r\n};\r\n\r\ninterface Props {\r\n    key: string;\r\n    x: number;\r\n    y: number;\r\n    width: number;\r\n    zIndex?: number;\r\n    imgSrc: ImgSrc;\r\n    life: number;\r\n}\r\n\r\nexport class Enemy extends StageItem {\r\n    isGoingRight: boolean;\r\n    currentLife: number;\r\n    initialLife: number;\r\n    isDamaged: boolean;\r\n    speedY: number;\r\n    isDead: boolean;\r\n    imgSrc: Props[\"imgSrc\"];\r\n\r\n    constructor(props: Props) {\r\n        const { imgSrc, ...rest } = props;\r\n        super({ type: \"enemy\", ...rest });\r\n        this.isGoingRight = false;\r\n        this.isDamaged = false;\r\n        this.speedY = 0;\r\n        this.isDead = false;\r\n        this.currentLife = props.life;\r\n        this.initialLife = props.life;\r\n        this.imgSrc = imgSrc;\r\n    }\r\n\r\n    onEachTime(ninja: Ninja) {\r\n        if (this.y > 90) {\r\n            return;\r\n        }\r\n\r\n        if (!this.isDead) {\r\n            // 敵キャラ生存時の位置更新\r\n            this.calcNextPosition(ninja);\r\n        } else {\r\n            // 速度から位置更新（死亡時の落下）\r\n            this.speedY += 2;\r\n            this.y += this.speedY;\r\n        }\r\n    }\r\n\r\n    private calcNextPosition(ninja: Ninja) {\r\n        // 忍者に向かって近づいてくる\r\n        const ninjaCenter = [\r\n            ninja.x + ninja.width / 2,\r\n            ninja.y + ninja.width / 2,\r\n        ];\r\n        const enemyCenter = [this.x + this.width / 2, this.y + this.width / 2];\r\n\r\n        const dX = ninjaCenter[0] - enemyCenter[0];\r\n        const dY = ninjaCenter[1] - enemyCenter[1];\r\n\r\n        const d = Math.sqrt(dX ** 2 + dY ** 2);\r\n\r\n        this.x += dX / d;\r\n        this.y += dY / d;\r\n\r\n        // 左右の向きの判定\r\n        this.isGoingRight = dX > 0;\r\n    }\r\n\r\n    onTouchNinja(ninja: Ninja) {\r\n        const ninjaDirection = this.getTargetDirection(ninja);\r\n        if (ninjaDirection === Direction.top) {\r\n            ninja.speedY = -8;\r\n            ninja.y = this.y - ninja.width;\r\n\r\n            // ダメージ時の点滅制御\r\n            this.isDamaged = true;\r\n            setTimeout(() => {\r\n                this.isDamaged = false;\r\n            }, damageAnimationDuration);\r\n\r\n            if (--this.currentLife <= 0) {\r\n                this.isDead = true;\r\n            }\r\n        }\r\n        console.log(\"touched!\");\r\n    }\r\n\r\n    renderItem(UL: number) {\r\n        return (\r\n            <EnemyComponent\r\n                key={this.key}\r\n                alt={this.key}\r\n                zIndex={this.zIndex}\r\n                currentLife={this.currentLife}\r\n                initialLife={this.initialLife}\r\n                isGoingRight={this.isGoingRight}\r\n                isDamaged={this.isDamaged}\r\n                isDead={this.isDead}\r\n                imgSrc={this.imgSrc}\r\n                x={this.x}\r\n                y={this.y}\r\n                width={this.width}\r\n                UL={UL}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nfunction EnemyComponent({\r\n    alt,\r\n    x,\r\n    y,\r\n    zIndex,\r\n    currentLife,\r\n    initialLife,\r\n    imgSrc,\r\n    isDamaged,\r\n    isDead,\r\n    width,\r\n    isGoingRight,\r\n    UL,\r\n}: Pick<\r\n    Enemy,\r\n    | \"x\"\r\n    | \"y\"\r\n    | \"zIndex\"\r\n    | \"width\"\r\n    | \"imgSrc\"\r\n    | \"currentLife\"\r\n    | \"initialLife\"\r\n    | \"isDamaged\"\r\n    | \"isDead\"\r\n    | \"isGoingRight\"\r\n> & {\r\n    alt: Enemy[\"key\"];\r\n    UL: number;\r\n}) {\r\n    const outsideDivStyle = useMemo<CSSProperties>(\r\n        () => ({\r\n            willChange: \"top, left\",\r\n            opacity: UL ? 1 : 0,\r\n            position: \"absolute\",\r\n            top: y * UL,\r\n            left: x * UL,\r\n            transition:\r\n                `top ${timeStep}ms, ` +\r\n                `left ${timeStep}ms, ` +\r\n                `opacity ${gameOpenAnimationTime}`,\r\n            transitionTimingFunction: \"linear\",\r\n            zIndex: zIndex || 10,\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            alignItems: \"center\",\r\n        }),\r\n        [UL, x, y, zIndex]\r\n    );\r\n    const meterStyle = useMemo<CSSProperties>(() => ({ margin: 2 * UL }), [UL]);\r\n    const imgStyle = useMemo<CSSProperties>(\r\n        () => ({\r\n            width: width * UL,\r\n            transform: `scale(${isGoingRight ? 1 : -1}, ${isDead ? -1 : 1})`,\r\n        }),\r\n        [UL, width, isGoingRight, isDead]\r\n    );\r\n    const imgClassName = useMemo<string | undefined>(\r\n        () =>\r\n            isDamaged\r\n                ? css({\r\n                      animationName: opacityKeyframes,\r\n                      animationDuration: `${damageAnimationDuration}ms`,\r\n                  })\r\n                : undefined,\r\n        [isDamaged]\r\n    );\r\n\r\n    return (\r\n        <div style={outsideDivStyle}>\r\n            <meter value={currentLife / initialLife} style={meterStyle} />\r\n            <img\r\n                alt={alt}\r\n                src={imgSrc}\r\n                style={imgStyle}\r\n                className={imgClassName}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\Game\\NinjaAdventure\\Items\\StageItems\\Block.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\Game\\NinjaAdventure\\Items\\StageItems\\BackgroundImg.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\shared\\Markdown\\LinkBlockRender\\linkShadowStyle.ts",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\shared\\Markdown\\CodeRender\\ExampleSentence\\Folktale.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\shared\\Markdown\\ImageRender\\Speaker.tsx",["946"],"import React from \"react\";\r\nimport Button from \"reactstrap/lib/Button\";\r\nimport { BLOB_URL } from \"../../../../common/consts\";\r\nimport ShurikenProgress from \"../../Animations/ShurikenProgress\";\r\n\r\ninterface SpeakerProps {\r\n    src: string;\r\n    alt: string;\r\n}\r\nexport class Speaker extends React.Component<\r\n    SpeakerProps,\r\n    {\r\n        showImg: boolean;\r\n    }\r\n> {\r\n    vocabSound?: HTMLAudioElement;\r\n    didUnmount: boolean;\r\n\r\n    constructor(props: SpeakerProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            showImg: false,\r\n        };\r\n\r\n        this.didUnmount = false;\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.loadSound();\r\n    };\r\n\r\n    loadSound = () => {\r\n        const { src } = this.props;\r\n\r\n        this.vocabSound = new Audio();\r\n        this.vocabSound.preload = \"none\";\r\n        this.vocabSound.autoplay = false;\r\n        this.vocabSound.src = src;\r\n\r\n        this.vocabSound.oncanplaythrough = () => {\r\n            if (!this.didUnmount) this.setState({ showImg: true });\r\n        };\r\n        this.vocabSound.load();\r\n    };\r\n\r\n    componentWillUnmount() {\r\n        this.didUnmount = true;\r\n    }\r\n\r\n    render() {\r\n        const { alt } = this.props;\r\n        const { showImg } = this.state;\r\n        const { vocabSound } = this;\r\n        return showImg ? (\r\n            <Button color=\"success\" active>\r\n                <img\r\n                    alt={alt}\r\n                    src={BLOB_URL + \"/articles/img/speaker.png\"}\r\n                    style={{\r\n                        width: \"60%\",\r\n                        maxWidth: 60,\r\n                        cursor: \"pointer\",\r\n                        zIndex: 900,\r\n                    }}\r\n                    onClick={() => {\r\n                        vocabSound && vocabSound.play();\r\n                    }}\r\n                />\r\n            </Button>\r\n        ) : (\r\n            <ShurikenProgress\r\n                key=\"circle\"\r\n                size=\"100%\"\r\n                style={{ width: \"60%\", maxWidth: 30 }}\r\n            />\r\n        );\r\n    }\r\n}\r\n","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\shared\\Markdown\\CodeRender\\ExampleSentence\\index.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\shared\\Markdown\\ImageRender\\VocabList\\index.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\shared\\Markdown\\CodeRender\\ExampleSentence\\WordList.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\shared\\Markdown\\CodeRender\\ExampleSentence\\AudioControl.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\shared\\Markdown\\ImageRender\\VocabList\\List.tsx",["947"],"import Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport React from \"react\";\r\nimport LazyLoad from \"react-lazyload\";\r\nimport { BLOB_URL } from \"../../../../../common/consts\";\r\nimport { vocab, vocabGenre } from \"../../../../../types/vocab\";\r\nimport ShurikenProgress from \"../../../Animations/ShurikenProgress\";\r\n\r\nconst tableHeadStyle: React.CSSProperties = {\r\n    fontSize: \"medium\",\r\n    fontWeight: \"bold\",\r\n};\r\nconst tableElementStyle: React.CSSProperties = {\r\n    fontSize: \"medium\",\r\n};\r\n\r\ntype TVListProps = {\r\n    g: vocabGenre;\r\n    vocabList: vocab[];\r\n    noLazyLoad?: boolean;\r\n    style?: React.CSSProperties;\r\n    vocabIncorrectIds?: number[];\r\n    kanjiIncorrectIds?: number[];\r\n};\r\nexport function VList({\r\n    g,\r\n    vocabList,\r\n    noLazyLoad,\r\n    style,\r\n    vocabIncorrectIds,\r\n    kanjiIncorrectIds,\r\n}: TVListProps) {\r\n    return vocabList && vocabList.length > 0 ? (\r\n        <Table aria-label=\"simple table\" style={style}>\r\n            <TableHead>\r\n                <TableRow style={{ backgroundColor: \"papayawhip\" }}>\r\n                    <TableCell style={tableHeadStyle} align=\"center\">\r\n                        Kanji\r\n                    </TableCell>\r\n                    <TableCell style={tableHeadStyle} align=\"center\">\r\n                        Hiragana\r\n                    </TableCell>\r\n                    <TableCell style={tableHeadStyle} align=\"center\">\r\n                        Meaning\r\n                    </TableCell>\r\n                    <TableCell style={tableHeadStyle} align=\"center\">\r\n                        Sound\r\n                    </TableCell>\r\n                </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n                {vocabList.map((v: vocab) => (\r\n                    <TableRow key={v.vocabId}>\r\n                        <TableCell\r\n                            style={\r\n                                kanjiIncorrectIds?.includes(v.vocabId)\r\n                                    ? {\r\n                                          ...tableElementStyle,\r\n                                          color: \"red\",\r\n                                          fontWeight: \"bold\",\r\n                                      }\r\n                                    : tableElementStyle\r\n                            }\r\n                            align=\"center\"\r\n                        >\r\n                            {v.kanji}\r\n                        </TableCell>\r\n                        <TableCell\r\n                            style={\r\n                                vocabIncorrectIds?.includes(v.vocabId)\r\n                                    ? {\r\n                                          ...tableElementStyle,\r\n                                          color: \"red\",\r\n                                          fontWeight: \"bold\",\r\n                                      }\r\n                                    : tableElementStyle\r\n                            }\r\n                            align=\"center\"\r\n                        >\r\n                            {v.hiragana}\r\n                        </TableCell>\r\n                        <TableCell style={tableElementStyle} align=\"center\">\r\n                            {v.english}\r\n                        </TableCell>\r\n                        <TableCell style={tableElementStyle} align=\"center\">\r\n                            {noLazyLoad ? (\r\n                                <Speaker v={v} g={g} />\r\n                            ) : (\r\n                                <LazyLoad>\r\n                                    <Speaker v={v} g={g} />\r\n                                </LazyLoad>\r\n                            )}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                ))}\r\n            </TableBody>\r\n        </Table>\r\n    ) : (\r\n        <ShurikenProgress key=\"circle\" size=\"20%\" />\r\n    );\r\n}\r\n\r\ninterface SpeakerProps {\r\n    v: vocab;\r\n    g: vocabGenre;\r\n}\r\nclass Speaker extends React.Component<\r\n    SpeakerProps,\r\n    {\r\n        showImg: boolean;\r\n    }\r\n> {\r\n    vocabSound?: HTMLAudioElement;\r\n    didUnmount: boolean;\r\n\r\n    constructor(props: SpeakerProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            showImg: false,\r\n        };\r\n\r\n        this.didUnmount = false;\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.loadSound();\r\n    };\r\n\r\n    loadSound = () => {\r\n        const { v, g } = this.props;\r\n\r\n        this.vocabSound = new Audio();\r\n        this.vocabSound.preload = \"none\";\r\n        this.vocabSound.autoplay = false;\r\n        this.vocabSound.src = `${BLOB_URL}/vocabulary-quiz/audio/${g.genreName}/Japanese-vocabulary${v.vocabId}.m4a`;\r\n\r\n        this.vocabSound.oncanplaythrough = () => {\r\n            if (!this.didUnmount) this.setState({ showImg: true });\r\n        };\r\n        this.vocabSound.load();\r\n    };\r\n\r\n    componentWillUnmount() {\r\n        this.didUnmount = true;\r\n    }\r\n\r\n    render() {\r\n        const { showImg } = this.state;\r\n        const { vocabSound } = this;\r\n        return showImg ? (\r\n            <img\r\n                alt=\"vocab speaker\"\r\n                src={BLOB_URL + \"/vocabulary-quiz/img/speaker.png\"}\r\n                style={{ width: \"60%\", maxWidth: 30, cursor: \"pointer\" }}\r\n                onClick={() => {\r\n                    vocabSound && vocabSound.play();\r\n                }}\r\n            />\r\n        ) : (\r\n            <ShurikenProgress\r\n                key=\"circle\"\r\n                size=\"100%\"\r\n                style={{ width: \"60%\", maxWidth: 30 }}\r\n            />\r\n        );\r\n    }\r\n}\r\n","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\Ninja3\\stages\\Stage10.ts",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\Ninja3\\stages\\Stage09.ts",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\Ninja3\\stages\\Stage08.ts",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\Ninja3\\stages\\Stage07.ts",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\Ninja3\\stages\\Stage06.ts",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\Ninja3\\stages\\Stage05.ts",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\Ninja3\\stages\\Stage04.ts",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\Ninja3\\stages\\Stage03.ts",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\Ninja3\\stages\\Stage02.ts",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\Ninja3\\stages\\Stage01.ts",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\Ninja3\\GameCore.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\Articles\\Articles\\RightPanel.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\Ninja3\\objs\\ninja\\ninja.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\Ninja3\\objs\\obj.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\common\\util\\Game\\useGameState.ts",["948"],"import { useEffect, useState } from \"react\";\r\nimport { useUnitLength } from \"../../hooks/useUnitLength\";\r\nimport { GameState, GameStateManager } from \"./GameStateManager\";\r\n\r\nexport function useGameState<GS extends GameState<GS>>(\r\n    gameStateManager: GameStateManager<GS>,\r\n    eachTimeProc: (state: GS) => void\r\n): GS {\r\n    useUlInGame(gameStateManager);\r\n\r\n    return useGameInterval(\r\n        gameStateManager.getState().timeStep,\r\n        gameStateManager,\r\n        eachTimeProc\r\n    );\r\n}\r\n\r\nfunction useUlInGame<GS extends GameState<GS>>(\r\n    gameStateManager: GameStateManager<GS>\r\n) {\r\n    const UL = useUnitLength();\r\n    useEffect(() => {\r\n        gameStateManager.setUL(UL);\r\n    }, [UL]);\r\n}\r\n\r\nfunction useGameInterval<GS extends GameState<GS>>(\r\n    timeStep: number,\r\n    gameStateManager: GameStateManager<GS>,\r\n    eachTimeProc: (state: GS) => void\r\n) {\r\n    const [gameState, setGameState] = useState(gameStateManager.getState());\r\n    useEffect(() => {\r\n        setInterval(() => {\r\n            eachTimeProc(gameStateManager.getState());\r\n            setGameState(gameStateManager.renewState());\r\n        }, timeStep);\r\n    }, []);\r\n\r\n    return gameState;\r\n}\r\n","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\common\\util\\Game\\GameStateManager.ts",["949"],"import { GameItem } from \"./GameItem\";\r\n\r\nexport interface GameState<GS extends GameState<GS>> {\r\n    readonly timeStep: number;\r\n    UL: number;\r\n    items: GameItem<GS>[];\r\n}\r\n\r\nexport type GetInitialStateType<S> = Omit<S, \"UL\">;\r\n\r\nexport class GameStateManager<GS extends GameState<GS>> {\r\n    private gameState: GS;\r\n    private stateDifferences: Partial<GS>[] = [];\r\n\r\n    constructor(initialState: GetInitialStateType<GS>) {\r\n        this.gameState = {\r\n            ...initialState,\r\n            UL: 0,\r\n        } as GS;\r\n    }\r\n\r\n    setState(partialState: Partial<GS>) {\r\n        this.stateDifferences.push(partialState);\r\n    }\r\n\r\n    setUL(UL: number) {\r\n        this.stateDifferences.push({ UL } as Partial<GS>);\r\n    }\r\n\r\n    renewState() {\r\n        this.gameState = this.stateDifferences.reduce<GS>(\r\n            (acc, val) => ({ ...acc, ...val }),\r\n            this.gameState\r\n        );\r\n        return this.gameState;\r\n    }\r\n\r\n    getState() {\r\n        return this.gameState;\r\n    }\r\n}\r\n","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\VocabExplorer\\GameItems\\Floor.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\Game\\hooks\\useUnmounted.ts",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\shared\\PleaseScrollDown.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\Articles\\Articles\\Top.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\Vocab\\Layout\\NavMenu.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\Layout\\NavMenu.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\Layout\\Footer.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\Ninja3\\Page1.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\common\\hooks\\useHashScroll.ts",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\common\\util\\checkThumbnailExistence.ts",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\shared\\HashScroll\\index.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\KanaQuiz\\KanaQuizCore.tsx",["950"],"import * as React from \"react\";\r\nimport { useMemo, useState } from \"react\";\r\nimport { BLOB_URL } from \"../../../../../common/consts\";\r\nimport { EasyAudioPlayer } from \"../../../../../common/util/Audio/EasyAudioPlayer\";\r\nimport { useScreenSize } from \"../../hooks/useScreenSize\";\r\nimport { Quiz1 } from \"./KanaQuiz1\";\r\nimport { Quiz2 } from \"./KanaQuiz2\";\r\nimport {\r\n    FontClassName,\r\n    KanaQuizConsts,\r\n    KanaSounds,\r\n    KanaStatus,\r\n    KanaType,\r\n    PageNum,\r\n    Romaji,\r\n} from \"./types\";\r\n\r\nexport const BUTTON_PRIMARY = \"btn btn-primary btn-lg btn-block\";\r\nexport const BUTTON_SUCCESS = \"btn btn-success btn-lg btn-block\";\r\nexport const BUTTON_DANGER = \"btn btn-danger btn-lg btn-block\";\r\nexport const BUTTON_DARK = \"btn btn-dark btn-lg btn-block\";\r\n\r\ninterface Props {\r\n    consts: KanaQuizConsts;\r\n}\r\nexport default function QuizCore({ consts }: Props) {\r\n    const { screenWidth } = useScreenSize();\r\n\r\n    const [pageNum, setPageNum] = useState<PageNum>(1);\r\n    const [maxChar, setMaxChar] = useState(0);\r\n    const [font, setFont] = useState<FontClassName>(() =>\r\n        window.localStorage.getItem(\"kana-font\") === \"ming-font\"\r\n            ? \"ming-font\"\r\n            : \"gothic-font\"\r\n    );\r\n\r\n    const { kanaStatus, changeKanaStatus } = useKanaStatus(consts.KANA_TYPE);\r\n\r\n    const kanaSounds = useMemo(\r\n        () =>\r\n            (Object.keys(consts.KANA_LIST) as Romaji[]).reduce(\r\n                (acc, romaji) => ({\r\n                    ...acc,\r\n                    [romaji]: new EasyAudioPlayer(\r\n                        `${BLOB_URL}/kanaQuiz/sound/${romaji.replace(\r\n                            \"_\",\r\n                            \"\"\r\n                        )}.m4a`\r\n                    ),\r\n                }),\r\n                {}\r\n            ) as KanaSounds,\r\n        [consts]\r\n    );\r\n\r\n    switch (pageNum) {\r\n        case 1:\r\n        case 3: {\r\n            return (\r\n                <Quiz1\r\n                    consts={consts}\r\n                    changePage={i => setPageNum(i)}\r\n                    setMaxChar={i => setMaxChar(i)}\r\n                    kanaStatus={kanaStatus}\r\n                    kanaSounds={kanaSounds}\r\n                    isQuizResult={pageNum === 3}\r\n                    font={font}\r\n                    setFont={setFont}\r\n                    screenWidth={screenWidth}\r\n                />\r\n            );\r\n        }\r\n        case 2: {\r\n            return (\r\n                <Quiz2\r\n                    consts={consts}\r\n                    maxChar={maxChar}\r\n                    changePage={i => setPageNum(i)}\r\n                    kanaSounds={kanaSounds}\r\n                    kanaStatus={kanaStatus}\r\n                    changeKanaStatus={changeKanaStatus}\r\n                    font={font}\r\n                    screenWidth={screenWidth}\r\n                />\r\n            );\r\n        }\r\n        default: {\r\n            const neverCheck: never = pageNum;\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\nexport { QuizCore };\r\n\r\nconst getKanaStatusFunctions = (kanaType: KanaType) => {\r\n    const key = `KanaQuizStatus-${kanaType}`;\r\n    const getSavedKanaStatus = (): KanaStatus => {\r\n        const json = localStorage.getItem(key);\r\n        if (!json) {\r\n            return {};\r\n        }\r\n        return JSON.parse(json);\r\n    };\r\n    const changeSavedKanaStatus = (newKanaStatus: KanaStatus) => {\r\n        localStorage.setItem(key, JSON.stringify(newKanaStatus));\r\n    };\r\n    return {\r\n        getSavedKanaStatus,\r\n        changeSavedKanaStatus,\r\n    } as const;\r\n};\r\n\r\nfunction useKanaStatus(kanaType: KanaType) {\r\n    const { changeSavedKanaStatus, getSavedKanaStatus } = useMemo(\r\n        () => getKanaStatusFunctions(kanaType),\r\n        [kanaType]\r\n    );\r\n    const [kanaStatus, setKanaStatus] =\r\n        useState<KanaStatus>(getSavedKanaStatus);\r\n    const changeKanaStatus = (romaji: Romaji, result: boolean) => {\r\n        const newKanaStatus = { ...kanaStatus, [romaji]: result };\r\n        setKanaStatus(newKanaStatus);\r\n        changeSavedKanaStatus(newKanaStatus);\r\n    };\r\n    return { kanaStatus, changeKanaStatus };\r\n}\r\n","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\Articles\\Articles\\AuthorEditor.tsx",["951"],"import { Card, Input, InputLabel } from \"@material-ui/core\";\r\nimport * as React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { Author, AuthorArea } from \"../../shared/Author\";\r\n\r\nexport function AuthorEditor({\r\n    initialAuthor,\r\n    onClose,\r\n    token,\r\n}: {\r\n    initialAuthor: Author;\r\n    onClose: () => void;\r\n    token: string;\r\n}) {\r\n    const [author, setAuthor] = useState<Author>(initialAuthor);\r\n    const [preview, setPreview] = useState<\"pc\" | \"sp\">(\"pc\");\r\n    const [file, setFile] = useState<File>();\r\n    const [submitting, setSubmitting] = useState(false);\r\n\r\n    const previewWidth = preview === \"pc\" ? 900 : 354;\r\n\r\n    const save = async () => {\r\n        try {\r\n            setSubmitting(true);\r\n            const formData = new FormData();\r\n            formData.append(\"authorId\", author.authorId.toString());\r\n            formData.append(\"authorName\", author.authorName);\r\n            formData.append(\"initialGreeting\", author.initialGreeting);\r\n            formData.append(\"selfIntroduction\", author.selfIntroduction);\r\n            formData.append(\"isAdmin\", author.isAdmin.toString());\r\n            formData.append(\"imgExtension\", author.imgExtension);\r\n            if (file) {\r\n                formData.append(\"file\", file);\r\n            }\r\n            formData.append(\"token\", token);\r\n\r\n            const res = await fetch(\"/api/Articles/UpdateAuthorInfo\", {\r\n                method: \"POST\",\r\n                body: formData,\r\n            });\r\n            const result = await res.json();\r\n\r\n            setSubmitting(false);\r\n            return result.result;\r\n        } catch (e) {\r\n            setSubmitting(false);\r\n            return \"Failed to save...\";\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Card\r\n            style={{\r\n                margin: 5,\r\n                padding: 15,\r\n                height: \"calc(100% - 15px)\",\r\n            }}\r\n        >\r\n            <h2>Edit Author Info</h2>\r\n            <div style={{ display: \"flex\", height: \"100%\" }}>\r\n                <div\r\n                    style={{\r\n                        width: 320,\r\n                        height: \"calc(100% - 25px)\",\r\n                        paddingRight: 10,\r\n                        paddingBottom: 70,\r\n                    }}\r\n                >\r\n                    <div\r\n                        style={{\r\n                            overflowY: \"auto\",\r\n                            overflowX: \"hidden\",\r\n                            width: \"100%\",\r\n                            height: \"100%\",\r\n                        }}\r\n                    >\r\n                        <div style={{ margin: \"20px 0\" }}>\r\n                            <InputLabel>{\"Author Name\"}</InputLabel>\r\n                            <Input\r\n                                type=\"text\"\r\n                                value={author.authorName}\r\n                                onChange={ev => {\r\n                                    if (ev.target.value.length > 50) {\r\n                                        alert(\r\n                                            \"Author Name needs to be less than 50 characters!\"\r\n                                        );\r\n                                        return;\r\n                                    }\r\n                                    setAuthor({\r\n                                        ...author,\r\n                                        authorName: ev.target.value,\r\n                                    });\r\n                                }}\r\n                                style={{\r\n                                    width: \"100%\",\r\n                                }}\r\n                            />\r\n                        </div>\r\n                        <div style={{ margin: \"20px 0\" }}>\r\n                            <InputLabel>{\"Initial Greeting\"}</InputLabel>\r\n                            <Input\r\n                                type=\"text\"\r\n                                value={author.initialGreeting}\r\n                                onChange={ev => {\r\n                                    if (ev.target.value.length > 300) {\r\n                                        alert(\r\n                                            \"Initial Greeting needs to be less than 300 characters!\"\r\n                                        );\r\n                                        return;\r\n                                    }\r\n                                    setAuthor({\r\n                                        ...author,\r\n                                        initialGreeting: ev.target.value,\r\n                                    });\r\n                                }}\r\n                                style={{\r\n                                    width: \"100%\",\r\n                                }}\r\n                            />\r\n                        </div>\r\n                        <div style={{ margin: \"20px 0\" }}>\r\n                            <InputLabel>{\"Self Introduction\"}</InputLabel>\r\n                            <Input\r\n                                type=\"text\"\r\n                                value={author.selfIntroduction}\r\n                                onChange={ev => {\r\n                                    const selfIntroduction = ev.target.value\r\n                                        .split(\"#\")\r\n                                        .join(\"\");\r\n\r\n                                    if (selfIntroduction.length > 1000) {\r\n                                        alert(\r\n                                            \"Self introduction needs to be less than 1000 characters!\"\r\n                                        );\r\n                                        return;\r\n                                    }\r\n                                    setAuthor({\r\n                                        ...author,\r\n                                        selfIntroduction,\r\n                                    });\r\n                                }}\r\n                                style={{\r\n                                    width: \"100%\",\r\n                                }}\r\n                                multiline\r\n                            />\r\n                            <div\r\n                                style={{\r\n                                    margin: \"20px 0\",\r\n                                    borderBottom:\r\n                                        \"solid 1px rgba(0, 0, 0, 0.42)\",\r\n                                    paddingBottom: 5,\r\n                                }}\r\n                            >\r\n                                <InputLabel>{\"Profile Image\"}</InputLabel>\r\n                                <input\r\n                                    type=\"file\"\r\n                                    name=\"file\"\r\n                                    onChange={e => {\r\n                                        const target = e.target;\r\n                                        const file = target.files?.item(0);\r\n                                        if (file) {\r\n                                            setFile(file);\r\n                                        }\r\n                                    }}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div\r\n                        style={{\r\n                            backgroundColor: \"white\",\r\n                            width: \"100%\",\r\n                            paddingTop: 10,\r\n                            height: 50,\r\n                        }}\r\n                    >\r\n                        <button\r\n                            className=\"btn btn-primary\"\r\n                            style={{\r\n                                height: 40,\r\n                                marginRight: 20,\r\n                                width: 95,\r\n                            }}\r\n                            onClick={async () => {\r\n                                const confirmationResult = window.confirm(\r\n                                    \"Do you really want to save?\"\r\n                                );\r\n                                if (!confirmationResult) {\r\n                                    return;\r\n                                }\r\n\r\n                                const result = await save();\r\n                                alert(result);\r\n\r\n                                if (result === \"success\") {\r\n                                    onClose();\r\n                                }\r\n                            }}\r\n                            disabled={submitting}\r\n                        >\r\n                            {\"Save\"}\r\n                        </button>\r\n                        <button\r\n                            className=\"btn btn-secondary\"\r\n                            style={{ height: 40, width: 95 }}\r\n                            onClick={onClose}\r\n                        >\r\n                            {\"Close\"}\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div\r\n                    style={{\r\n                        width: \"100%\",\r\n                        height: \"100%\",\r\n                        marginLeft: 30,\r\n                    }}\r\n                >\r\n                    <div\r\n                        style={{\r\n                            width: \"100%\",\r\n                            textAlign: \"center\",\r\n                            position: \"relative\",\r\n                            bottom: 15,\r\n                        }}\r\n                    >\r\n                        <button\r\n                            className={`btn btn-${\r\n                                preview === \"pc\" ? \"secondary\" : \"primary\"\r\n                            }`}\r\n                            style={{\r\n                                margin: \"0 10px\",\r\n                                cursor:\r\n                                    preview === \"pc\"\r\n                                        ? \"not-allowed\"\r\n                                        : \"pointer\",\r\n                            }}\r\n                            onClick={() => {\r\n                                setPreview(\"pc\");\r\n                            }}\r\n                        >\r\n                            PC Preview\r\n                        </button>\r\n                        <button\r\n                            className={`btn btn-${\r\n                                preview === \"sp\" ? \"secondary\" : \"primary\"\r\n                            }`}\r\n                            style={{\r\n                                margin: \"0 10px\",\r\n                                cursor:\r\n                                    preview === \"sp\"\r\n                                        ? \"not-allowed\"\r\n                                        : \"pointer\",\r\n                            }}\r\n                            onClick={() => {\r\n                                setPreview(\"sp\");\r\n                            }}\r\n                        >\r\n                            Smartphone Preview\r\n                        </button>\r\n                    </div>\r\n                    <div\r\n                        style={{\r\n                            height: \"calc(100% - 100px)\",\r\n                            overflow: \"auto\",\r\n                            width: \"100%\",\r\n                        }}\r\n                    >\r\n                        <AuthorArea\r\n                            style={{\r\n                                marginTop: 45,\r\n                                width: \"100%\",\r\n                                maxWidth: previewWidth,\r\n                            }}\r\n                            screenWidth={previewWidth}\r\n                            author={author}\r\n                            filePath={file ? createObjectURL(file) : undefined}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </Card>\r\n    );\r\n}\r\n\r\nconst createObjectURL: (file: File) => string =\r\n    (window.URL || window.webkitURL).createObjectURL ||\r\n    (\r\n        window as typeof window & {\r\n            createObjectURL: (file: File) => string;\r\n        }\r\n    ).createObjectURL;\r\n","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\common\\hooks\\useUnitLength.ts",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\Game\\NinjaAdventure\\Items\\FixedItems\\index.ts",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\appState.ts",["952"],"import { useEffect, useState } from \"react\";\r\n\r\ntype AppState = {\r\n    headerHeight: number;\r\n};\r\nconst appState: AppState = { headerHeight: 60 };\r\n\r\nexport function getAppState() {\r\n    return { ...appState };\r\n}\r\n\r\nconst setValues: {\r\n    [key in keyof AppState]?: ((value: AppState[keyof AppState]) => void)[];\r\n} = {};\r\n\r\nexport function changeAppState<T extends keyof AppState>(\r\n    name: T,\r\n    value: AppState[T]\r\n) {\r\n    appState[name] = value;\r\n    setValues[name]?.forEach(f => f(value));\r\n}\r\n\r\nexport function useAppState<T extends keyof AppState>(stateName: T) {\r\n    const [value, setValue] = useState<AppState[T]>(appState[stateName]);\r\n\r\n    useEffect(() => {\r\n        const arrFnc: ((value: AppState[keyof AppState]) => void)[] =\r\n            setValues[stateName] || [];\r\n\r\n        setValues[stateName] = [...arrFnc, setValue];\r\n\r\n        return () => {\r\n            setValues[stateName] = setValues[stateName]?.filter(\r\n                f => f !== setValue\r\n            );\r\n        };\r\n    }, [stateName]);\r\n\r\n    return { [stateName]: value } as { [key in T]: AppState[T] };\r\n}\r\n","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\common\\util\\LazyLoad.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\shared\\Link\\LinkOrA.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\common\\util\\Audio\\EasyAudioPlayer.ts",["953"],"/**\n * インスタンス化時点ではロードしない。\n * loadメソッドを呼び出したタイミングで明示的にロードすることもできる。\n * 事前にロードしなくても、playを呼べば再生前にロードも一緒に行われるが、\n * 再生のタイミングが少し遅れる。\n *\n * 一気に大量の音声をロードしようとすると、iOSで音声再生出来なくなる事象あり。\n * （sleepAsyncやsetTimeoutで時間差ロードしても上手くいかず。）\n * そのため、一気に複数ファイルをロードするというよりは、個別の音声ごとに、\n * 再生前の適切なイベントを見繕ってロードしておくのが良さそう。\n *\n * 音声が沢山ある場合は、全ての音声に対してあらかじめインスタンス化はしておいて、\n * 別のトリガーで、個別の音声ごとにロードしておく。\n */\nexport class EasyAudioPlayer extends Audio {\n    constructor(private path: string) {\n        super();\n    }\n\n    load = () => {\n        if (this.src !== this.path) {\n            this.src = this.path; // set src here because loading is stated automatically when src is set\n            super.load();\n        }\n    };\n\n    // enable to wait until the end of the sound\n    play = () =>\n        new Promise<void>((resolve, reject) => {\n            try {\n                this.load(); // load if it's still not loaded\n                this.onended = () => {\n                    resolve();\n                };\n                super.play();\n            } catch (err) {\n                reject(err);\n            }\n        });\n}\n\n","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\Articles\\Articles\\index.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\KanaQuiz\\KanaQuiz1.tsx",["954"],"import { Card, MenuItem, Select } from \"@material-ui/core\";\r\nimport * as React from \"react\";\r\nimport { CSSProperties, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { BLOB_URL } from \"../../../../../common/consts\";\r\nimport { LazyExecutor } from \"../../../../../common/util/LazyLoad\";\r\nimport { AuthorArea } from \"../../../../shared/Author\";\r\nimport { AnchorLink } from \"../../../../shared/HashScroll\";\r\nimport { Markdown } from \"../../../../shared/Markdown\";\r\nimport { scrollToElement } from \"../../../Layout/NavMenu\";\r\nimport {\r\n    BUTTON_DANGER,\r\n    BUTTON_DARK,\r\n    BUTTON_PRIMARY,\r\n    BUTTON_SUCCESS,\r\n} from \"./KanaQuizCore\";\r\nimport {\r\n    FontClassName,\r\n    KanaList,\r\n    KanaQuizConsts,\r\n    KanaSounds,\r\n    KanaStatus,\r\n    KanaType,\r\n    PageNum,\r\n    Romaji,\r\n} from \"./types\";\r\n\r\ninterface Props {\r\n    consts: KanaQuizConsts;\r\n    changePage: (i: PageNum) => void;\r\n    setMaxChar: (i: number) => void;\r\n    kanaStatus: KanaStatus;\r\n    kanaSounds: KanaSounds;\r\n    isQuizResult: boolean;\r\n    setFont: (font: FontClassName) => void;\r\n    font: FontClassName;\r\n    screenWidth: number;\r\n}\r\nexport default function Quiz1({\r\n    consts,\r\n    changePage,\r\n    setMaxChar,\r\n    kanaStatus,\r\n    kanaSounds,\r\n    isQuizResult,\r\n    setFont,\r\n    font,\r\n    screenWidth,\r\n}: Props) {\r\n    useEffect(() => {\r\n        if (isQuizResult) {\r\n            const replacedHash = `${consts.KANA_TYPE}-chart`;\r\n            scrollToElement(document.getElementById(replacedHash));\r\n        }\r\n    }, [isQuizResult, consts]);\r\n\r\n    const startGame = (maxChar: number) => {\r\n        setMaxChar(maxChar);\r\n        changePage(2);\r\n    };\r\n\r\n    const allKanaNumber = Object.keys(consts.KANA_LIST).length;\r\n    const rememberedCharactersNumber = Object.values(kanaStatus).filter(\r\n        k => k\r\n    ).length;\r\n    const percentage = Math.floor(\r\n        (100 * rememberedCharactersNumber) / allKanaNumber\r\n    );\r\n\r\n    return (\r\n        <div id=\"disp1\">\r\n            <h1 id={`kana-quiz`}>{consts.KANA_TYPE} Quiz</h1>\r\n            <p style={{ marginBottom: 20 }}>\r\n                {`Please bookmark this page to remember all ${consts.KANA_TYPE} characters!`}\r\n            </p>\r\n            <div style={{ fontSize: \"x-large\", marginBottom: 30 }}>\r\n                {\"Your progress:\"}\r\n                <wbr />\r\n                <AnchorLink\r\n                    targetHash={`#${consts.KANA_TYPE}-chart`}\r\n                    style={{ fontWeight: \"bold\", paddingLeft: 7 }}\r\n                    isSmooth\r\n                >\r\n                    {percentage}\r\n                    {\"%\"}\r\n                </AnchorLink>\r\n            </div>\r\n            <button onClick={() => startGame(10)} className={BUTTON_PRIMARY}>\r\n                Random 10 characters\r\n            </button>\r\n            <br />\r\n            <button onClick={() => startGame(30)} className={BUTTON_SUCCESS}>\r\n                Random 30 characters\r\n            </button>\r\n            <br />\r\n            <button\r\n                onClick={() => startGame(Object.keys(consts.KANA_LIST).length)}\r\n                className={BUTTON_DANGER}\r\n            >\r\n                All {consts.KANA_TYPE} characters\r\n            </button>\r\n            <hr style={{ margin: \"20px 0\" }} />\r\n            <Card\r\n                id={`${consts.KANA_TYPE}-chart`}\r\n                style={{\r\n                    padding: 10,\r\n                    backgroundColor: \"#eeeeee\",\r\n                    marginBottom: 20,\r\n                }}\r\n            >\r\n                <h2 style={{ marginTop: 5, marginBottom: 15 }}>\r\n                    {consts.KANA_TYPE} Chart\r\n                </h2>\r\n\r\n                <ChartMessage\r\n                    percentage={percentage}\r\n                    kanaType={consts.KANA_TYPE}\r\n                />\r\n\r\n                <div\r\n                    style={{\r\n                        display: \"flex\",\r\n                        justifyContent: \"flex-end\",\r\n                        alignItems: \"center\",\r\n                    }}\r\n                    className=\"cancelCenter\"\r\n                >\r\n                    <span\r\n                        style={{\r\n                            marginRight: 10,\r\n                            paddingBottom: 2,\r\n                        }}\r\n                    >\r\n                        Font:\r\n                    </span>\r\n                    <Select\r\n                        value={font}\r\n                        onChange={ev => {\r\n                            const value = ev.target.value as FontClassName;\r\n                            setFont(value);\r\n                            window.localStorage.setItem(\"kana-font\", value);\r\n                        }}\r\n                    >\r\n                        <MenuItem value={\"gothic-font\"}>Gothic</MenuItem>\r\n                        <MenuItem value={\"ming-font\"}>Ming</MenuItem>\r\n                    </Select>\r\n                </div>\r\n\r\n                <KanaChart\r\n                    kanaList={consts.KANA_LIST}\r\n                    kanaSounds={kanaSounds}\r\n                    kanaStatus={kanaStatus}\r\n                    chartRomaji={normalChartRomaji}\r\n                    style={{ marginBottom: 10 }}\r\n                    font={font}\r\n                />\r\n\r\n                <AnchorLink targetHash={`#kana-quiz`} isSmooth>\r\n                    <button className={BUTTON_PRIMARY}>\r\n                        Try the {consts.KANA_TYPE} Quiz!\r\n                    </button>\r\n                </AnchorLink>\r\n\r\n                <KanaChart\r\n                    kanaList={consts.KANA_LIST}\r\n                    kanaSounds={kanaSounds}\r\n                    kanaStatus={kanaStatus}\r\n                    chartRomaji={dullChartRomaji}\r\n                    font={font}\r\n                />\r\n                <KanaChart\r\n                    kanaList={consts.KANA_LIST}\r\n                    kanaSounds={kanaSounds}\r\n                    kanaStatus={kanaStatus}\r\n                    chartRomaji={pChartRomaji}\r\n                    style={{ marginBottom: 10 }}\r\n                    font={font}\r\n                />\r\n\r\n                <AnchorLink targetHash={`#kana-quiz`} isSmooth>\r\n                    <button className={BUTTON_PRIMARY}>\r\n                        Try the {consts.KANA_TYPE} Quiz!\r\n                    </button>\r\n                </AnchorLink>\r\n\r\n                <KanaChart\r\n                    kanaList={consts.KANA_LIST}\r\n                    kanaSounds={kanaSounds}\r\n                    kanaStatus={kanaStatus}\r\n                    chartRomaji={contractedChartRomaji}\r\n                    font={font}\r\n                />\r\n            </Card>\r\n            <AnchorLink targetHash={`#kana-quiz`} isSmooth>\r\n                <button className={BUTTON_PRIMARY}>\r\n                    Try the {consts.KANA_TYPE} Quiz!\r\n                </button>\r\n            </AnchorLink>\r\n            <hr style={{ marginTop: 20 }} />\r\n            <AuthorArea\r\n                title=\"Developer\"\r\n                screenWidth={Math.min(screenWidth, 600)}\r\n            />\r\n            <hr style={{ position: \"relative\", top: 20 }} />\r\n            <Markdown style={{ textAlign: \"left\" }} source={consts.MARK_DOWN} />\r\n            <br />\r\n            <Link to={\"/\" + consts.OTHER_KANA_TYPE.toLowerCase() + \"-quiz\"}>\r\n                <button className={BUTTON_DARK}>\r\n                    {consts.OTHER_KANA_TYPE} Quiz\r\n                </button>\r\n            </Link>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction ChartMessage({\r\n    percentage,\r\n    kanaType,\r\n}: {\r\n    percentage: number;\r\n    kanaType: KanaType;\r\n}) {\r\n    return (\r\n        <div\r\n            style={{\r\n                display: \"flex\",\r\n                flexDirection: \"column\",\r\n                marginBottom: 20,\r\n                lineHeight: 1.5,\r\n            }}\r\n        >\r\n            {percentage === 100 && (\r\n                <Card\r\n                    style={{\r\n                        color: \"green\",\r\n                        fontWeight: \"bold\",\r\n                        marginTop: 5,\r\n                        marginBottom: 20,\r\n                        padding: \"10px 20px\",\r\n                    }}\r\n                    className=\"responsive-congratulations\"\r\n                >\r\n                    Congratulations!\r\n                </Card>\r\n            )}\r\n            <div style={{ textAlign: \"left\", fontSize: \"large\" }}>\r\n                {percentage === 0 ? (\r\n                    <>\r\n                        {\"Your current progress is \"}\r\n                        <span\r\n                            style={{\r\n                                fontWeight: \"bold\",\r\n                                fontSize: \"x-large\",\r\n                                margin: \"0 2px\",\r\n                            }}\r\n                        >\r\n                            {percentage}%\r\n                        </span>\r\n                        {\"!\"}\r\n                        <br />\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                        {\"You have remembered \"}\r\n                        <span\r\n                            style={{\r\n                                fontWeight: \"bold\",\r\n                                color: percentage === 100 ? \"green\" : undefined,\r\n                                fontSize: \"x-large\",\r\n                                margin: \"0 2px\",\r\n                            }}\r\n                        >\r\n                            {percentage}%\r\n                        </span>\r\n                        {\" of \"}\r\n                        {kanaType}\r\n                        {\" characters!\"}\r\n                        <br />\r\n                    </>\r\n                )}\r\n                {percentage === 100 ? (\r\n                    <>\r\n                        {\"Next, please try the \"}\r\n                        {kanaType === \"Hiragana\" ? (\r\n                            <Link\r\n                                to={\"/katakana-quiz\"}\r\n                                style={{ fontWeight: \"bold\" }}\r\n                            >\r\n                                Katakana Quiz\r\n                            </Link>\r\n                        ) : (\r\n                            <Link\r\n                                to={\"/vocabulary-quiz\"}\r\n                                style={{ fontWeight: \"bold\" }}\r\n                            >\r\n                                Vocabulary Quiz\r\n                            </Link>\r\n                        )}\r\n                        {\"!\"}\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                        {\"You still need to remember the \"}\r\n                        <span style={{ color: \"red\", fontWeight: \"bold\" }}>\r\n                            red characters\r\n                        </span>\r\n                        {\" below!\"}\r\n                        <br />\r\n                        {\"After glancing at the chart, please try the \"}\r\n                        <AnchorLink\r\n                            targetHash={\"#kana-quiz\"}\r\n                            style={{ fontWeight: \"bold\" }}\r\n                            isSmooth\r\n                        >\r\n                            {kanaType} Quiz\r\n                        </AnchorLink>\r\n                        {percentage === 0\r\n                            ? \" to change the color of the characters\"\r\n                            : \" again\"}\r\n                        {\"!\"}\r\n                        {percentage !== 0 && (\r\n                            <>\r\n                                <br />\r\n                                {\r\n                                    \"The questions you couldn't answer correctly will be asked frequently!\"\r\n                                }\r\n                            </>\r\n                        )}\r\n                    </>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction KanaChart({\r\n    kanaList,\r\n    kanaSounds,\r\n    kanaStatus,\r\n    chartRomaji,\r\n    style,\r\n    font,\r\n}: {\r\n    kanaList: KanaList;\r\n    kanaSounds: KanaSounds;\r\n    kanaStatus: KanaStatus;\r\n    chartRomaji: (Romaji | \"\")[][];\r\n    style?: CSSProperties;\r\n    font: FontClassName;\r\n}) {\r\n    return (\r\n        <div className={\"roundedTable\"} style={{ marginTop: 10, ...style }}>\r\n            <table>\r\n                <tbody>\r\n                    {chartRomaji.map(line => (\r\n                        <tr key={\"line-\" + line[0]}>\r\n                            {line.map((romaji, i) =>\r\n                                !romaji ? (\r\n                                    <td\r\n                                        key={i}\r\n                                        style={{\r\n                                            overflow: \"visible\",\r\n                                            backgroundColor: \"#eeeeee\",\r\n                                            boxShadow: \"none\",\r\n                                        }}\r\n                                    />\r\n                                ) : (\r\n                                    <td\r\n                                        key={romaji}\r\n                                        onClick={() => {\r\n                                            kanaSounds[romaji].play();\r\n                                        }}\r\n                                        style={{\r\n                                            cursor: \"pointer\",\r\n                                            color: kanaStatus[romaji]\r\n                                                ? undefined\r\n                                                : \"red\",\r\n                                        }}\r\n                                    >\r\n                                        <LazyExecutor\r\n                                            fnc={() => {\r\n                                                kanaSounds[romaji].load();\r\n                                            }}\r\n                                            offset={0}\r\n                                        />\r\n                                        <div\r\n                                            style={{\r\n                                                display: \"flex\",\r\n                                                flexDirection: \"column\",\r\n                                            }}\r\n                                        >\r\n                                            <span\r\n                                                style={{\r\n                                                    fontWeight: \"bold\",\r\n                                                }}\r\n                                                className={\r\n                                                    \"font-kana-in-chart \" + font\r\n                                                }\r\n                                            >\r\n                                                {kanaList[romaji]}\r\n                                            </span>\r\n                                            <span\r\n                                                style={{\r\n                                                    marginBottom: 10,\r\n                                                }}\r\n                                                className=\"font-romaji-in-chart\"\r\n                                            >\r\n                                                {romaji.replace(\"_\", \"\")}\r\n                                            </span>\r\n                                            <button\r\n                                                className=\"btn btn-dark\"\r\n                                                style={{\r\n                                                    display: \"flex\",\r\n                                                    alignItems: \"center\",\r\n                                                }}\r\n                                            >\r\n                                                <img\r\n                                                    alt=\"speaker\"\r\n                                                    src={\r\n                                                        BLOB_URL +\r\n                                                        \"/articles/img/speaker.png\"\r\n                                                    }\r\n                                                    style={{\r\n                                                        width: 15,\r\n                                                    }}\r\n                                                />\r\n                                            </button>\r\n                                        </div>\r\n                                    </td>\r\n                                )\r\n                            )}\r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst normalChartRomaji: (Romaji | \"\")[][] = [\r\n    [\"a\", \"i\", \"u\", \"e\", \"o\"],\r\n    [\"ka\", \"ki\", \"ku\", \"ke\", \"ko\"],\r\n    [\"sa\", \"shi\", \"su\", \"se\", \"so\"],\r\n    [\"ta\", \"chi\", \"tsu\", \"te\", \"to\"],\r\n    [\"na\", \"ni\", \"nu\", \"ne\", \"no\"],\r\n    [\"ha\", \"hi\", \"fu\", \"he\", \"ho\"],\r\n    [\"ma\", \"mi\", \"mu\", \"me\", \"mo\"],\r\n    [\"ya\", \"\", \"yu\", \"\", \"yo\"],\r\n    [\"ra\", \"ri\", \"ru\", \"re\", \"ro\"],\r\n    [\"wa\", \"\", \"\", \"\", \"_wo\"],\r\n    [\"n\", \"\", \"\", \"\", \"\"],\r\n];\r\n\r\nconst dullChartRomaji: (Romaji | \"\")[][] = [\r\n    [\"ga\", \"gi\", \"gu\", \"ge\", \"go\"],\r\n    [\"za\", \"ji\", \"zu\", \"ze\", \"zo\"],\r\n    [\"da\", \"_ji\", \"_zu\", \"de\", \"do\"],\r\n    [\"ba\", \"bi\", \"bu\", \"be\", \"bo\"],\r\n];\r\n\r\nconst pChartRomaji: (Romaji | \"\")[][] = [[\"pa\", \"pi\", \"pu\", \"pe\", \"po\"]];\r\n\r\nconst contractedChartRomaji: (Romaji | \"\")[][] = [\r\n    [\"kya\", \"\", \"kyu\", \"\", \"kyo\"],\r\n    [\"sha\", \"\", \"shu\", \"\", \"sho\"],\r\n    [\"cha\", \"\", \"chu\", \"\", \"cho\"],\r\n    [\"nya\", \"\", \"nyu\", \"\", \"nyo\"],\r\n    [\"hya\", \"\", \"hyu\", \"\", \"hyo\"],\r\n    [\"mya\", \"\", \"myu\", \"\", \"myo\"],\r\n    [\"rya\", \"\", \"ryu\", \"\", \"ryo\"],\r\n    [\"gya\", \"\", \"gyu\", \"\", \"gyo\"],\r\n    [\"ja\", \"\", \"ju\", \"\", \"jo\"],\r\n    [\"bya\", \"\", \"byu\", \"\", \"byo\"],\r\n    [\"pya\", \"\", \"pyu\", \"\", \"pyo\"],\r\n];\r\n\r\nexport { Quiz1 };\r\n","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\zApps\\zApps\\parts\\KanaQuiz\\KanaQuiz2.tsx",["955"],"import { Card } from \"@material-ui/core\";\r\nimport ArrowForward from \"@material-ui/icons/ArrowForward\";\r\nimport * as React from \"react\";\r\nimport { RefObject, useEffect, useRef } from \"react\";\r\nimport { BLOB_URL } from \"../../../../../common/consts\";\r\nimport { sleepAsync } from \"../../../../../common/functions\";\r\nimport { getRandomItem } from \"../../../../../common/util/Array/getRandomItem\";\r\nimport { EasyAudioPlayer } from \"../../../../../common/util/Audio/EasyAudioPlayer\";\r\nimport { AuthorArea } from \"../../../../shared/Author\";\r\nimport { scrollToElement } from \"../../../Layout/NavMenu\";\r\nimport {\r\n    FontClassName,\r\n    KanaList,\r\n    KanaQuizConsts,\r\n    KanaSounds,\r\n    KanaStatus,\r\n    PageNum,\r\n    Romaji,\r\n} from \"./types\";\r\n\r\ntype DialogState =\r\n    | { type: \"correct\" | \"incorrect\"; question: string; answer?: Romaji }\r\n    | \"closed\";\r\n\r\ntype ButtonIndex = 0 | 1 | 2 | 3;\r\ntype ButtonLabels = { [key in ButtonIndex]?: Romaji };\r\n\r\nconst ANSWER_BUTTON_PRIMARY = \"btn btn-primary btn-lg btn-block active\";\r\n\r\nconst playingRomajiContainer = {\r\n    // Stop to play the Kana sound if the dialog was closed\r\n    playingRomaji: \"\",\r\n};\r\n\r\ninterface Props {\r\n    consts: KanaQuizConsts;\r\n    maxChar: number;\r\n    changePage: (i: PageNum) => void;\r\n    kanaSounds: KanaSounds;\r\n    kanaStatus: KanaStatus;\r\n    changeKanaStatus: (romaji: keyof KanaList, result: boolean) => void;\r\n    font: FontClassName;\r\n    screenWidth: number;\r\n}\r\ninterface State {\r\n    dialogState: DialogState;\r\n    availableKanaList: Partial<KanaList>;\r\n    correct: number;\r\n    incorrectList: Partial<KanaList>;\r\n    question: string;\r\n    buttonLabels: ButtonLabels;\r\n    romajiToAsk?: Romaji;\r\n}\r\nexport default class Quiz2 extends React.Component<Props, State> {\r\n    correctSound: EasyAudioPlayer;\r\n    incorrectSound: EasyAudioPlayer;\r\n    ref: RefObject<HTMLDivElement>;\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        const { romajiToAsk, question, buttonLabels } = getStateToUpdate(\r\n            props.consts.KANA_LIST,\r\n            props.kanaStatus,\r\n            props.consts.KANA_LIST\r\n        );\r\n        this.state = {\r\n            correct: 0,\r\n            incorrectList: {},\r\n            dialogState: \"closed\",\r\n            availableKanaList: props.consts.KANA_LIST,\r\n            romajiToAsk,\r\n            question,\r\n            buttonLabels,\r\n        };\r\n\r\n        props.kanaSounds[romajiToAsk].load();\r\n\r\n        this.correctSound = new EasyAudioPlayer(\r\n            `${BLOB_URL}/appsPublic/sound/correctSound.mp3`\r\n        );\r\n        this.correctSound.load();\r\n\r\n        this.incorrectSound = new EasyAudioPlayer(\r\n            `${BLOB_URL}/appsPublic/sound/incorrectSound.mp3`\r\n        );\r\n        this.incorrectSound.load();\r\n\r\n        this.ref = React.createRef<HTMLDivElement>();\r\n    }\r\n\r\n    componentDidMount() {\r\n        scrollToElement(this.ref.current);\r\n    }\r\n\r\n    onClickBtn = async (i: ButtonIndex) => {\r\n        const { availableKanaList, romajiToAsk, buttonLabels, question } =\r\n            this.state;\r\n        const { changeKanaStatus, kanaSounds } = this.props;\r\n\r\n        const answer = buttonLabels[i];\r\n        const correctRomaji = (Object.keys(availableKanaList) as Romaji[]).find(\r\n            r => availableKanaList[r] === question\r\n        );\r\n\r\n        if (!romajiToAsk || !answer || !correctRomaji) {\r\n            return;\r\n        }\r\n\r\n        const isCorrect = correctRomaji === answer; // judge if it's correct\r\n\r\n        this.openDialog(isCorrect ? \"correct\" : \"incorrect\", question); // open dialog\r\n\r\n        changeKanaStatus(correctRomaji, isCorrect); // save to localStorage\r\n\r\n        void playSound(\r\n            kanaSounds,\r\n            correctRomaji,\r\n            isCorrect,\r\n            this.correctSound,\r\n            this.incorrectSound\r\n        );\r\n    };\r\n\r\n    openDialog = (type: \"correct\" | \"incorrect\", question: string) => {\r\n        const { availableKanaList } = this.state;\r\n        this.setState({\r\n            dialogState: {\r\n                type,\r\n                question,\r\n                answer: (Object.keys(availableKanaList) as Romaji[]).find(\r\n                    k => availableKanaList[k] === question\r\n                ),\r\n            },\r\n        });\r\n    };\r\n\r\n    closeDialog = () => {\r\n        const { correct, incorrectList, dialogState, availableKanaList } =\r\n            this.state;\r\n        const {\r\n            maxChar,\r\n            kanaStatus,\r\n            changePage,\r\n            consts: { KANA_LIST },\r\n            kanaSounds,\r\n        } = this.props;\r\n\r\n        if (dialogState === \"closed\") {\r\n            // never happen\r\n            return;\r\n        }\r\n\r\n        const { type, answer, question } = dialogState;\r\n        if (!answer) {\r\n            return;\r\n        }\r\n\r\n        const isCorrect = type === \"correct\";\r\n        const newCorrect = isCorrect ? correct + 1 : correct;\r\n        const newIncorrectList = isCorrect\r\n            ? incorrectList\r\n            : {\r\n                  ...incorrectList,\r\n                  [answer]: question,\r\n              };\r\n\r\n        // remove already asked word\r\n        const { [answer]: _, ...newAvailableKanaList } = availableKanaList;\r\n\r\n        this.setState({\r\n            availableKanaList: newAvailableKanaList,\r\n            correct: newCorrect,\r\n            incorrectList: newIncorrectList,\r\n            dialogState: \"closed\",\r\n        });\r\n\r\n        // judge if the game should be finished\r\n        const gameCount = newCorrect + Object.keys(newIncorrectList).length;\r\n        if (gameCount === maxChar) {\r\n            // game finish\r\n            changePage(3);\r\n            return;\r\n        }\r\n\r\n        // prepare next game\r\n        const stateToUpdate =\r\n            getStateToUpdate(newAvailableKanaList, kanaStatus, KANA_LIST) || {};\r\n        this.setState(stateToUpdate);\r\n\r\n        // load kana sound\r\n        kanaSounds[stateToUpdate.romajiToAsk].load();\r\n    };\r\n\r\n    render() {\r\n        const { dialogState, correct, incorrectList, question, buttonLabels } =\r\n            this.state;\r\n        const { kanaSounds, maxChar, font, screenWidth } = this.props;\r\n\r\n        const incorrect = Object.keys(incorrectList).length || 0;\r\n        const currentGame = correct + incorrect;\r\n\r\n        return (\r\n            <div id=\"disp2\" ref={this.ref}>\r\n                {\"Progress: \"}\r\n                {currentGame}/{maxChar}\r\n                <br />\r\n                <span style={{ marginRight: 15 }}>\r\n                    {\"Correct: \"}\r\n                    {correct}\r\n                </span>\r\n                <span>\r\n                    {\"Incorrect: \"}\r\n                    {incorrect}\r\n                </span>\r\n                <br />\r\n                <br />\r\n                Question:\r\n                <br />\r\n                <span\r\n                    className={\"question \" + font}\r\n                    style={{ fontWeight: \"bold\" }}\r\n                >\r\n                    {question}\r\n                </span>\r\n                <br />\r\n                <br />\r\n                {\"Which is the correct Romaji for the \"}\r\n                {this.props.consts.KANA_TYPE} character above?\r\n                <br />\r\n                <table>\r\n                    <tbody>\r\n                        <tr>\r\n                            <ButtonTd\r\n                                buttonIndex={0}\r\n                                buttonLabels={buttonLabels}\r\n                                onClickBtn={this.onClickBtn}\r\n                            />\r\n                            <ButtonTd\r\n                                buttonIndex={1}\r\n                                buttonLabels={buttonLabels}\r\n                                onClickBtn={this.onClickBtn}\r\n                            />\r\n                        </tr>\r\n                        <tr>\r\n                            <ButtonTd\r\n                                buttonIndex={2}\r\n                                buttonLabels={buttonLabels}\r\n                                onClickBtn={this.onClickBtn}\r\n                            />\r\n                            <ButtonTd\r\n                                buttonIndex={3}\r\n                                buttonLabels={buttonLabels}\r\n                                onClickBtn={this.onClickBtn}\r\n                            />\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n                <div style={{ maxWidth: 600 }}>\r\n                    <hr />\r\n                    <AuthorArea\r\n                        title=\"Developer\"\r\n                        screenWidth={Math.min(screenWidth, 600)}\r\n                    />\r\n                    <ResultDialog\r\n                        dialogState={dialogState}\r\n                        onClose={() => {\r\n                            this.closeDialog();\r\n                        }}\r\n                        kanaSounds={kanaSounds}\r\n                        font={font}\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport { Quiz2 };\r\n\r\nfunction ResultDialog({\r\n    dialogState,\r\n    onClose,\r\n    kanaSounds,\r\n    font,\r\n}: {\r\n    dialogState: DialogState;\r\n    onClose: () => void;\r\n    kanaSounds: KanaSounds;\r\n    font: FontClassName;\r\n}) {\r\n    const okRef = useRef<HTMLButtonElement>(null);\r\n    useEffect(() => {\r\n        if (dialogState !== \"closed\") {\r\n            okRef.current?.focus();\r\n        }\r\n    }, [dialogState]);\r\n\r\n    if (dialogState === \"closed\") {\r\n        return null;\r\n    }\r\n\r\n    const { type, question, answer } = dialogState;\r\n    if (!answer) {\r\n        return null;\r\n    }\r\n    const isCorrect = type === \"correct\";\r\n\r\n    return (\r\n        <div\r\n            style={{\r\n                position: \"fixed\",\r\n                top: 0,\r\n                left: 0,\r\n                width: \"100%\",\r\n                height: \"100%\",\r\n                backgroundColor: \"rgba(0,0,0,0.7)\",\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                alignItems: \"center\",\r\n            }}\r\n        >\r\n            <Card\r\n                style={{\r\n                    width: \"100%\",\r\n                    maxWidth: 300,\r\n                    height: \"100%\",\r\n                    maxHeight: 300,\r\n                    backgroundColor: \"white\",\r\n                    display: \"flex\",\r\n                    justifyContent: \"space-around\",\r\n                    alignItems: \"center\",\r\n                    flexDirection: \"column\",\r\n                }}\r\n            >\r\n                <span\r\n                    style={{\r\n                        fontSize: \"xx-large\",\r\n                        fontWeight: \"bold\",\r\n                        color: isCorrect ? undefined : \"red\",\r\n                    }}\r\n                >\r\n                    {isCorrect ? \"Correct!\" : \"Incorrect!\"}\r\n                </span>\r\n                <div>\r\n                    {!isCorrect && (\r\n                        <>\r\n                            <span\r\n                                style={{\r\n                                    fontSize: \"large\",\r\n                                    fontWeight: \"bold\",\r\n                                }}\r\n                            >\r\n                                {\"Correct answer:\"}\r\n                            </span>\r\n                            <br />\r\n                        </>\r\n                    )}\r\n                    <div\r\n                        style={{\r\n                            fontSize: \"xx-large\",\r\n                            fontWeight: \"bold\",\r\n                            display: \"flex\",\r\n                            alignItems: \"center\",\r\n                            justifyContent: \"space-around\",\r\n                        }}\r\n                    >\r\n                        <span style={{ marginLeft: 30 }} className={font}>\r\n                            {question}\r\n                        </span>\r\n                        <ArrowForward\r\n                            style={{ margin: \"0 20px\", opacity: 0.5 }}\r\n                        />\r\n                        <span\r\n                            style={{\r\n                                display: \"flex\",\r\n                                alignItems: \"center\",\r\n                            }}\r\n                        >\r\n                            {answer.replace(\"_\", \"\")}\r\n                            {\r\n                                <button\r\n                                    className=\"btn btn-dark\"\r\n                                    style={{\r\n                                        display: \"flex\",\r\n                                        alignItems: \"center\",\r\n                                        width: 45,\r\n                                        height: 40,\r\n                                        cursor: \"pointer\",\r\n                                    }}\r\n                                    onClick={() => {\r\n                                        kanaSounds[answer].play();\r\n                                    }}\r\n                                >\r\n                                    <img\r\n                                        alt=\"speaker\"\r\n                                        src={\r\n                                            BLOB_URL +\r\n                                            \"/articles/img/speaker.png\"\r\n                                        }\r\n                                        style={{ width: \"100%\" }}\r\n                                    />\r\n                                </button>\r\n                            }\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n                <button\r\n                    className={\"btn btn-\" + (isCorrect ? \"primary\" : \"danger\")}\r\n                    style={{ height: 50, fontSize: \"large\" }}\r\n                    onClick={() => {\r\n                        playingRomajiContainer.playingRomaji = \"\";\r\n                        onClose();\r\n                    }}\r\n                    ref={okRef}\r\n                >\r\n                    OK\r\n                </button>\r\n            </Card>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction ButtonTd({\r\n    buttonIndex,\r\n    buttonLabels,\r\n    onClickBtn,\r\n}: {\r\n    buttonIndex: ButtonIndex;\r\n    buttonLabels: ButtonLabels;\r\n    onClickBtn: (buttonIndex: ButtonIndex) => void;\r\n}) {\r\n    return (\r\n        <td>\r\n            <button\r\n                className={ANSWER_BUTTON_PRIMARY}\r\n                onClick={() => {\r\n                    onClickBtn(buttonIndex);\r\n                }}\r\n            >\r\n                {buttonLabels[buttonIndex]?.replace(\"_\", \"\")}\r\n            </button>\r\n        </td>\r\n    );\r\n}\r\n\r\nfunction getStateToUpdate(\r\n    availableKanaList: Partial<KanaList>,\r\n    kanaStatus: KanaStatus,\r\n    allKanaList: KanaList\r\n): { romajiToAsk: Romaji; question: string; buttonLabels: ButtonLabels } {\r\n    const arrAvailableRomaji = Object.keys(\r\n        availableKanaList\r\n    ) as (keyof typeof availableKanaList)[];\r\n    const arrRomajiToAsk = arrAvailableRomaji.filter(\r\n        romaji => !kanaStatus[romaji]\r\n    );\r\n\r\n    let romajiToAsk = getRandomItem(arrAvailableRomaji);\r\n\r\n    if (arrRomajiToAsk.length) {\r\n        // 未だ正解していないものがある場合は、90%の確率で優先的に問う\r\n        if (Math.random() < 0.9) {\r\n            romajiToAsk = getRandomItem(arrRomajiToAsk);\r\n        }\r\n    }\r\n\r\n    const question = availableKanaList[romajiToAsk] || \"\";\r\n\r\n    // Prepare button label options\r\n    const arrKeys = (Object.keys(allKanaList) as Romaji[]).filter(\r\n        r =>\r\n            r !== romajiToAsk &&\r\n            romajiToAsk?.replace(\"_\", \"\") !== r.replace(\"_\", \"\") &&\r\n            romajiToAsk?.replace(\"_w\", \"\") !== r.replace(\"_w\", \"\")\r\n    );\r\n\r\n    // Choose similar options to the answer\r\n    const similarKeys = arrKeys\r\n        .filter(\r\n            // first character is the same\r\n            k =>\r\n                Math.random() < 0.1 ||\r\n                romajiToAsk.replace(\"_\", \"\")[0] === k.replace(\"_\", \"\")[0]\r\n        )\r\n        .filter(\r\n            // includes the same character\r\n            k =>\r\n                Math.random() < 0.05 ||\r\n                [...romajiToAsk.replace(\"_\", \"\")].some(a => k.includes(a))\r\n        )\r\n        .filter(\r\n            // same length\r\n            k =>\r\n                Math.random() < 0.05 ||\r\n                romajiToAsk.replace(\"_\", \"\").length ===\r\n                    k.replace(\"_\", \"\").length\r\n        );\r\n\r\n    // Set button labels\r\n    const buttonLabels = [0, 1, 2, 3].reduce((acc, val) => {\r\n        const unusedKeys = getUnusedKeys(similarKeys, acc);\r\n        const keys =\r\n            unusedKeys.length > 0 ? unusedKeys : getUnusedKeys(arrKeys, acc);\r\n        return {\r\n            ...acc,\r\n            [val]: getRandomItem(keys),\r\n        };\r\n    }, {} as ButtonLabels);\r\n\r\n    // Put an correct button at a random position\r\n    const q = Math.floor(Math.random() * 4) as ButtonIndex;\r\n    buttonLabels[q] = romajiToAsk;\r\n\r\n    return { romajiToAsk, question, buttonLabels };\r\n}\r\n\r\nfunction getUnusedKeys(keys: Romaji[], currentButtonLabels: ButtonLabels) {\r\n    return keys.filter(\r\n        r => !Object.values(currentButtonLabels).some(romaji => romaji === r)\r\n    );\r\n}\r\n\r\nasync function playSound(\r\n    kanaSounds: KanaSounds,\r\n    correctRomaji: Romaji,\r\n    isCorrect: boolean,\r\n    correctSound: EasyAudioPlayer,\r\n    incorrectSound: EasyAudioPlayer\r\n) {\r\n    playingRomajiContainer.playingRomaji = correctRomaji;\r\n\r\n    if (isCorrect) {\r\n        await correctSound.play();\r\n    } else {\r\n        await incorrectSound.play();\r\n        await sleepAsync(500);\r\n    }\r\n\r\n    if (playingRomajiContainer.playingRomaji !== correctRomaji) {\r\n        return;\r\n    }\r\n    await kanaSounds[correctRomaji].play();\r\n\r\n    await sleepAsync(1000);\r\n    if (playingRomajiContainer.playingRomaji !== correctRomaji) {\r\n        return;\r\n    }\r\n    kanaSounds[correctRomaji].play();\r\n}\r\n","C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\Game\\NinjaAdventure\\Items\\FixedItems\\BlackFrame.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\components\\Game\\NinjaAdventure\\Items\\FixedItems\\GameController.tsx",[],"C:\\Users\\kosuk\\source\\repos\\Z-Apps\\Z-Apps\\ClientApp\\src\\common\\util\\Array\\getRandomItem.ts",[],{"ruleId":null,"fatal":true,"severity":2,"message":"956","line":16,"column":49},{"ruleId":null,"fatal":true,"severity":2,"message":"957","line":222,"column":28},{"ruleId":null,"fatal":true,"severity":2,"message":"958","line":38,"column":17},{"ruleId":null,"fatal":true,"severity":2,"message":"959","line":571,"column":2},{"ruleId":null,"fatal":true,"severity":2,"message":"960","line":203,"column":2},{"ruleId":null,"fatal":true,"severity":2,"message":"961","line":202,"column":2},{"ruleId":null,"fatal":true,"severity":2,"message":"962","line":95,"column":35},{"ruleId":null,"fatal":true,"severity":2,"message":"963","line":243,"column":24},{"ruleId":null,"fatal":true,"severity":2,"message":"964","line":210,"column":24},{"ruleId":null,"fatal":true,"severity":2,"message":"965","line":713,"column":41},{"ruleId":null,"fatal":true,"severity":2,"message":"966","line":46,"column":26},{"ruleId":null,"fatal":true,"severity":2,"message":"967","line":41,"column":26},{"ruleId":null,"fatal":true,"severity":2,"message":"968","line":8,"column":11},{"ruleId":null,"fatal":true,"severity":2,"message":"969","line":144,"column":24},{"ruleId":null,"fatal":true,"severity":2,"message":"970","line":17,"column":14},{"ruleId":null,"fatal":true,"severity":2,"message":"971","line":8,"column":33},{"ruleId":null,"fatal":true,"severity":2,"message":"972","line":243,"column":15},{"ruleId":null,"fatal":true,"severity":2,"message":"973","line":121,"column":15},{"ruleId":null,"fatal":true,"severity":2,"message":"974","line":28,"column":13},{"ruleId":null,"fatal":true,"severity":2,"message":"975","line":87,"column":15},{"ruleId":null,"fatal":true,"severity":2,"message":"976","line":107,"column":15},{"ruleId":null,"fatal":true,"severity":2,"message":"977","line":2,"column":18},{"ruleId":null,"fatal":true,"severity":2,"message":"978","line":41,"column":19},{"ruleId":null,"fatal":true,"severity":2,"message":"979","line":35,"column":19},{"ruleId":null,"fatal":true,"severity":2,"message":"980","line":102,"column":74},{"ruleId":null,"fatal":true,"severity":2,"message":"981","line":16,"column":33},{"ruleId":null,"fatal":true,"severity":2,"message":"982","line":13,"column":2},{"ruleId":null,"fatal":true,"severity":2,"message":"983","line":4,"column":30},{"ruleId":null,"fatal":true,"severity":2,"message":"984","line":49,"column":25},{"ruleId":null,"fatal":true,"severity":2,"message":"985","line":6,"column":2},{"ruleId":null,"fatal":true,"severity":2,"message":"986","line":12,"column":67},{"ruleId":null,"fatal":true,"severity":2,"message":"987","line":7,"column":2},{"ruleId":null,"fatal":true,"severity":2,"message":"988","line":17,"column":10},{"ruleId":null,"fatal":true,"severity":2,"message":"989","line":19,"column":16},{"ruleId":null,"fatal":true,"severity":2,"message":"990","line":76,"column":13},{"ruleId":null,"fatal":true,"severity":2,"message":"991","line":16,"column":15},{"ruleId":null,"fatal":true,"severity":2,"message":"992","line":116,"column":15},{"ruleId":null,"fatal":true,"severity":2,"message":"993","line":5,"column":33},{"ruleId":null,"fatal":true,"severity":2,"message":"994","line":3,"column":31},{"ruleId":null,"fatal":true,"severity":2,"message":"995","line":41,"column":44},{"ruleId":null,"fatal":true,"severity":2,"message":"996","line":290,"column":16},{"ruleId":null,"fatal":true,"severity":2,"message":"997","line":13,"column":10},{"ruleId":null,"fatal":true,"severity":2,"message":"998","line":16,"column":17},{"ruleId":null,"fatal":true,"severity":2,"message":"999","line":139,"column":58},{"ruleId":null,"fatal":true,"severity":2,"message":"1000","line":26,"column":28},"Parsing error: Unexpected token, expected \",\"\n\n\u001b[0m \u001b[90m 14 |\u001b[39m }\u001b[0m\n\u001b[0m \u001b[90m 15 |\u001b[39m\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 16 |\u001b[39m \u001b[36mexport\u001b[39m \u001b[36minterface\u001b[39m \u001b[33mAnimationObject\u001b[39m\u001b[33m<\u001b[39m\u001b[33mStateToAnimate\u001b[39m \u001b[36mextends\u001b[39m \u001b[33mMinimumAnimationState\u001b[39m\u001b[33m>\u001b[39m {\u001b[0m\n\u001b[0m \u001b[90m    |\u001b[39m                                                 \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 17 |\u001b[39m     state\u001b[33m:\u001b[39m \u001b[33mStateToAnimate\u001b[39m\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 18 |\u001b[39m     fncForEachTime\u001b[33m:\u001b[39m (state\u001b[33m:\u001b[39m \u001b[33mStateToAnimate\u001b[39m) \u001b[33m=>\u001b[39m \u001b[33mStateToAnimate\u001b[39m\u001b[33m;\u001b[39m \u001b[90m//単位時間あたりの変更を加えたステートを返す関数\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 19 |\u001b[39m     setState\u001b[33m:\u001b[39m \u001b[33mReact\u001b[39m\u001b[33m.\u001b[39m\u001b[33mDispatch\u001b[39m\u001b[33m<\u001b[39m\u001b[33mReact\u001b[39m\u001b[33m.\u001b[39m\u001b[33mSetStateAction\u001b[39m\u001b[33m<\u001b[39m\u001b[33mStateToAnimate\u001b[39m\u001b[33m>>\u001b[39m\u001b[33m;\u001b[39m\u001b[0m","Parsing error: Unexpected token, expected \",\"\n\n\u001b[0m \u001b[90m 220 |\u001b[39m }\u001b[0m\n\u001b[0m \u001b[90m 221 |\u001b[39m\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 222 |\u001b[39m \u001b[36mexport\u001b[39m \u001b[36mfunction\u001b[39m debounce\u001b[33m<\u001b[39m\u001b[33mT\u001b[39m \u001b[36mextends\u001b[39m unknown[]\u001b[33m>\u001b[39m(\u001b[0m\n\u001b[0m \u001b[90m     |\u001b[39m                            \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 223 |\u001b[39m     fn\u001b[33m:\u001b[39m (\u001b[33m...\u001b[39marg\u001b[33m:\u001b[39m \u001b[33mT\u001b[39m) \u001b[33m=>\u001b[39m \u001b[36mvoid\u001b[39m\u001b[33m,\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 224 |\u001b[39m     milliSecond\u001b[33m:\u001b[39m number\u001b[0m\n\u001b[0m \u001b[90m 225 |\u001b[39m ) {\u001b[0m","Parsing error: Unexpected token, expected \",\"\n\n\u001b[0m \u001b[90m 36 |\u001b[39m         isDevelopment \u001b[33m&&\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 37 |\u001b[39m         \u001b[36mtypeof\u001b[39m window \u001b[33m!==\u001b[39m \u001b[32m\"undefined\"\u001b[39m \u001b[33m&&\u001b[39m\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 38 |\u001b[39m         (window \u001b[36mas\u001b[39m any)\u001b[33m.\u001b[39mdevToolsExtension\u001b[0m\n\u001b[0m \u001b[90m    |\u001b[39m                 \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 39 |\u001b[39m     ) {\u001b[0m\n\u001b[0m \u001b[90m 40 |\u001b[39m         enhancers\u001b[33m.\u001b[39mpush((window \u001b[36mas\u001b[39m any)\u001b[33m.\u001b[39mdevToolsExtension())\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 41 |\u001b[39m     }\u001b[0m","Parsing error: Missing semicolon.\n\n\u001b[0m \u001b[90m 569 |\u001b[39m         content\u001b[33m:\u001b[39m \u001b[32m`\\`\\`\\`Example-black\\n\\`\\`\\`e\\n天気が良ければ公園に行こう。\\nてんき が よけれ ば こうえん に いこ う。\\nte n ki ga yo ke re ba ko u e n ni i ko u\\nIf the weather is good, let's go to the park.\\n{K:[3,7],H:[6,11],R:[11,22],E:[0,2,18,22]}\\nhttps://lingualninja.blob.core.windows.net/lingual-storage/articles/japanese-i-adjectives-list-for-jlpt-n5/hypothetical_form.m4a\\n[\"天気\",\"てんき\",\"weather\",\"が\",\"\",\"が is a Japanese particle that is used right after the subject of a verb.\",\"良ければ\",\"よければ\",\"If ... is good\",\"公園\",\"こうえん\",\"park\",\"に\",\"\",\"to\",\"行こう\",\"いこう\",\"Let's go\"]\\n\\`\\`\\``\u001b[39m\u001b[33m,\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 570 |\u001b[39m     }\u001b[33m,\u001b[39m\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 571 |\u001b[39m ] \u001b[36mas\u001b[39m \u001b[36mconst\u001b[39m\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m     |\u001b[39m  \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 572 |\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 573 |\u001b[39m \u001b[36mfunction\u001b[39m \u001b[33mSamplePanel\u001b[39m({\u001b[0m\n\u001b[0m \u001b[90m 574 |\u001b[39m     openSamplePanel\u001b[33m,\u001b[39m\u001b[0m","Parsing error: Missing semicolon.\n\n\u001b[0m \u001b[90m 201 |\u001b[39m     pyu\u001b[33m:\u001b[39m \u001b[32m\"ぴゅ\"\u001b[39m\u001b[33m,\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 202 |\u001b[39m     pyo\u001b[33m:\u001b[39m \u001b[32m\"ぴょ\"\u001b[39m\u001b[33m,\u001b[39m\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 203 |\u001b[39m } \u001b[36mas\u001b[39m \u001b[36mconst\u001b[39m\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m     |\u001b[39m  \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 204 |\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 205 |\u001b[39m \u001b[36mexport\u001b[39m \u001b[36mconst\u001b[39m consts\u001b[33m:\u001b[39m \u001b[33mKanaQuizConsts\u001b[39m \u001b[33m=\u001b[39m {\u001b[0m\n\u001b[0m \u001b[90m 206 |\u001b[39m     \u001b[33mKANA_TYPE\u001b[39m\u001b[33m:\u001b[39m \u001b[32m\"Hiragana\"\u001b[39m\u001b[33m,\u001b[39m\u001b[0m","Parsing error: Missing semicolon.\n\n\u001b[0m \u001b[90m 200 |\u001b[39m     pyu\u001b[33m:\u001b[39m \u001b[32m\"ピュ\"\u001b[39m\u001b[33m,\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 201 |\u001b[39m     pyo\u001b[33m:\u001b[39m \u001b[32m\"ピョ\"\u001b[39m\u001b[33m,\u001b[39m\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 202 |\u001b[39m } \u001b[36mas\u001b[39m \u001b[36mconst\u001b[39m\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m     |\u001b[39m  \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 203 |\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 204 |\u001b[39m \u001b[36mconst\u001b[39m consts\u001b[33m:\u001b[39m \u001b[33mKanaQuizConsts\u001b[39m \u001b[33m=\u001b[39m {\u001b[0m\n\u001b[0m \u001b[90m 205 |\u001b[39m     \u001b[33mKANA_TYPE\u001b[39m\u001b[33m:\u001b[39m \u001b[32m\"Katakana\"\u001b[39m\u001b[33m,\u001b[39m\u001b[0m","Parsing error: Unexpected token, expected \",\"\n\n\u001b[0m \u001b[90m 93 |\u001b[39m         \u001b[36mconst\u001b[39m title \u001b[33m=\u001b[39m storyName\u001b[33m.\u001b[39msplit(\u001b[32m\"--\"\u001b[39m)\u001b[33m.\u001b[39mjoin(\u001b[32m\" - \"\u001b[39m)\u001b[33m.\u001b[39msplit(\u001b[32m\"_\"\u001b[39m)\u001b[33m.\u001b[39mjoin(\u001b[32m\" \"\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 94 |\u001b[39m\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 95 |\u001b[39m         \u001b[36mconst\u001b[39m line \u001b[33m=\u001b[39m (type\u001b[33m:\u001b[39m keyof sentence) \u001b[33m=>\u001b[39m {\u001b[0m\n\u001b[0m \u001b[90m    |\u001b[39m                                   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 96 |\u001b[39m             \u001b[36mconst\u001b[39m r \u001b[33m=\u001b[39m sentences[playingSentence][\u001b[32m\"romaji\"\u001b[39m]\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 97 |\u001b[39m             \u001b[36mconst\u001b[39m size \u001b[33m=\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 98 |\u001b[39m                 r\u001b[33m?\u001b[39m\u001b[33m.\u001b[39mlength \u001b[33m<\u001b[39m \u001b[35m150\u001b[39m\u001b[0m","Parsing error: Unexpected token, expected \",\"\n\n\u001b[0m \u001b[90m 241 |\u001b[39m             (window\u001b[33m.\u001b[39m\u001b[33mURL\u001b[39m \u001b[33m||\u001b[39m window\u001b[33m.\u001b[39mwebkitURL)\u001b[33m.\u001b[39mcreateObjectURL \u001b[33m||\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 242 |\u001b[39m             (\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 243 |\u001b[39m                 window \u001b[36mas\u001b[39m \u001b[36mtypeof\u001b[39m window \u001b[33m&\u001b[39m {\u001b[0m\n\u001b[0m \u001b[90m     |\u001b[39m                        \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 244 |\u001b[39m                     createObjectURL\u001b[33m:\u001b[39m (file\u001b[33m:\u001b[39m \u001b[33mFile\u001b[39m) \u001b[33m=>\u001b[39m string\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 245 |\u001b[39m                 }\u001b[0m\n\u001b[0m \u001b[90m 246 |\u001b[39m             )\u001b[33m.\u001b[39mcreateObjectURL\u001b[33m;\u001b[39m\u001b[0m","Parsing error: Unexpected token, expected \",\"\n\n\u001b[0m \u001b[90m 208 |\u001b[39m             (window\u001b[33m.\u001b[39m\u001b[33mURL\u001b[39m \u001b[33m||\u001b[39m window\u001b[33m.\u001b[39mwebkitURL)\u001b[33m.\u001b[39mcreateObjectURL \u001b[33m||\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 209 |\u001b[39m             (\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 210 |\u001b[39m                 window \u001b[36mas\u001b[39m \u001b[36mtypeof\u001b[39m window \u001b[33m&\u001b[39m {\u001b[0m\n\u001b[0m \u001b[90m     |\u001b[39m                        \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 211 |\u001b[39m                     createObjectURL\u001b[33m:\u001b[39m (file\u001b[33m:\u001b[39m \u001b[33mFile\u001b[39m) \u001b[33m=>\u001b[39m string\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 212 |\u001b[39m                 }\u001b[0m\n\u001b[0m \u001b[90m 213 |\u001b[39m             )\u001b[33m.\u001b[39mcreateObjectURL\u001b[33m;\u001b[39m\u001b[0m","Parsing error: Unexpected token, expected \",\"\n\n\u001b[0m \u001b[90m 711 |\u001b[39m         setTimeout(() \u001b[33m=>\u001b[39m {\u001b[0m\n\u001b[0m \u001b[90m 712 |\u001b[39m             \u001b[36mtry\u001b[39m {\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 713 |\u001b[39m                 (document\u001b[33m.\u001b[39mactiveElement \u001b[36mas\u001b[39m \u001b[33mHTMLElement\u001b[39m)\u001b[33m.\u001b[39mblur()\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m     |\u001b[39m                                         \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 714 |\u001b[39m             } \u001b[36mcatch\u001b[39m (e) {}\u001b[0m\n\u001b[0m \u001b[90m 715 |\u001b[39m         }\u001b[33m,\u001b[39m \u001b[35m300\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 716 |\u001b[39m\u001b[0m","Parsing error: Unexpected token, expected \",\"\n\n\u001b[0m \u001b[90m 44 |\u001b[39m     \u001b[36mconst\u001b[39m changeGenre \u001b[33m=\u001b[39m (\u001b[0m\n\u001b[0m \u001b[90m 45 |\u001b[39m         originalGenre\u001b[33m:\u001b[39m vocabMergedGenre\u001b[33m,\u001b[39m\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 46 |\u001b[39m         targetKey\u001b[33m:\u001b[39m keyof vocabMergedGenre\u001b[33m,\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m    |\u001b[39m                          \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 47 |\u001b[39m         newValue\u001b[33m:\u001b[39m vocabMergedGenre[keyof vocabMergedGenre]\u001b[0m\n\u001b[0m \u001b[90m 48 |\u001b[39m     ) \u001b[33m=>\u001b[39m {\u001b[0m\n\u001b[0m \u001b[90m 49 |\u001b[39m         \u001b[36mconst\u001b[39m newGenre \u001b[33m=\u001b[39m { \u001b[33m...\u001b[39moriginalGenre\u001b[33m,\u001b[39m [targetKey]\u001b[33m:\u001b[39m newValue }\u001b[33m;\u001b[39m\u001b[0m","Parsing error: Unexpected token, expected \",\"\n\n\u001b[0m \u001b[90m 39 |\u001b[39m     \u001b[36mconst\u001b[39m changeGenre \u001b[33m=\u001b[39m (\u001b[0m\n\u001b[0m \u001b[90m 40 |\u001b[39m         originalGenre\u001b[33m:\u001b[39m vocabGenre\u001b[33m,\u001b[39m\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 41 |\u001b[39m         targetKey\u001b[33m:\u001b[39m keyof vocabGenre\u001b[33m,\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m    |\u001b[39m                          \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 42 |\u001b[39m         newValue\u001b[33m:\u001b[39m vocabGenre[keyof vocabGenre]\u001b[0m\n\u001b[0m \u001b[90m 43 |\u001b[39m     ) \u001b[33m=>\u001b[39m {\u001b[0m\n\u001b[0m \u001b[90m 44 |\u001b[39m         \u001b[36mconst\u001b[39m newGenre \u001b[33m=\u001b[39m { \u001b[33m...\u001b[39moriginalGenre\u001b[33m,\u001b[39m [targetKey]\u001b[33m:\u001b[39m newValue }\u001b[33m;\u001b[39m\u001b[0m","Parsing error: Unexpected token\n\n\u001b[0m \u001b[90m  6 |\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m  7 |\u001b[39m \u001b[36mclass\u001b[39m \u001b[33mGameOver\u001b[39m \u001b[36mextends\u001b[39m \u001b[33mReact\u001b[39m\u001b[33m.\u001b[39m\u001b[33mComponent\u001b[39m {\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m  8 |\u001b[39m     consts\u001b[33m?\u001b[39m\u001b[33m:\u001b[39m {\u001b[0m\n\u001b[0m \u001b[90m    |\u001b[39m           \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m  9 |\u001b[39m         \u001b[33mBTN_START_CLASS\u001b[39m\u001b[33m:\u001b[39m \u001b[32m\"btn btn-primary btn-lg btn-block\"\u001b[39m\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 10 |\u001b[39m     }\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 11 |\u001b[39m\u001b[0m","Parsing error: Unexpected token, expected \",\"\n\n\u001b[0m \u001b[90m 142 |\u001b[39m                 \u001b[36mreturn\u001b[39m \u001b[32m\"Second needs to be 0 to 99.\"\u001b[39m\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 143 |\u001b[39m         } \u001b[36mcatch\u001b[39m (ex) {\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 144 |\u001b[39m             \u001b[36mreturn\u001b[39m (ex \u001b[36mas\u001b[39m \u001b[33mError\u001b[39m)\u001b[33m.\u001b[39mmessage\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m     |\u001b[39m                        \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 145 |\u001b[39m         }\u001b[0m\n\u001b[0m \u001b[90m 146 |\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 147 |\u001b[39m         \u001b[36mreturn\u001b[39m \u001b[32m\"\"\u001b[39m\u001b[33m;\u001b[39m\u001b[0m","Parsing error: Missing semicolon.\n\n\u001b[0m \u001b[90m 15 |\u001b[39m }\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 16 |\u001b[39m \u001b[36mexport\u001b[39m \u001b[36mfunction\u001b[39m \u001b[33mVocabGenreId\u001b[39m(id\u001b[33m:\u001b[39m number) {\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 17 |\u001b[39m     \u001b[36mreturn\u001b[39m id \u001b[36mas\u001b[39m vocabGenre[\u001b[32m\"genreId\"\u001b[39m]\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m    |\u001b[39m              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 18 |\u001b[39m }\u001b[0m\n\u001b[0m \u001b[90m 19 |\u001b[39m \u001b[36mexport\u001b[39m type vocabMergedGenre \u001b[33m=\u001b[39m {\u001b[0m\n\u001b[0m \u001b[90m 20 |\u001b[39m     genreId\u001b[33m:\u001b[39m number \u001b[33m&\u001b[39m { _mergedVocabGenreId\u001b[33m:\u001b[39m never }\u001b[33m;\u001b[39m\u001b[0m","Parsing error: Missing semicolon.\n\n\u001b[0m \u001b[90m  6 |\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m  7 |\u001b[39m     \u001b[90m// ２つのオブジェクトのキーをマージ\u001b[39m\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m  8 |\u001b[39m     \u001b[36mconst\u001b[39m keys1 \u001b[33m=\u001b[39m \u001b[33mObject\u001b[39m\u001b[33m.\u001b[39mkeys(a) \u001b[36mas\u001b[39m (keyof \u001b[33mT\u001b[39m)[]\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m    |\u001b[39m                                 \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m  9 |\u001b[39m     \u001b[36mconst\u001b[39m keys2 \u001b[33m=\u001b[39m \u001b[33mObject\u001b[39m\u001b[33m.\u001b[39mkeys(b) \u001b[36mas\u001b[39m (keyof \u001b[33mT\u001b[39m)[]\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 10 |\u001b[39m     \u001b[36mconst\u001b[39m allKeys \u001b[33m=\u001b[39m [\u001b[33m...\u001b[39mkeys1\u001b[33m,\u001b[39m \u001b[33m...\u001b[39mkeys2]\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 11 |\u001b[39m     \u001b[90m// 重複除去\u001b[39m\u001b[0m","Parsing error: Unexpected token\n\n\u001b[0m \u001b[90m 241 |\u001b[39m     }\u001b[0m\n\u001b[0m \u001b[90m 242 |\u001b[39m \u001b[33m>\u001b[39m {\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 243 |\u001b[39m     vocabSound\u001b[33m?\u001b[39m\u001b[33m:\u001b[39m \u001b[33mHTMLAudioElement\u001b[39m\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m     |\u001b[39m               \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 244 |\u001b[39m     didUnmount\u001b[33m:\u001b[39m boolean\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 245 |\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 246 |\u001b[39m     constructor(props\u001b[33m:\u001b[39m \u001b[33mSpeakerProps\u001b[39m) {\u001b[0m","Parsing error: Unexpected token, expected \",\"\n\n\u001b[0m \u001b[90m 119 |\u001b[39m                 height\u001b[33m:\u001b[39m \u001b[35m90\u001b[39m \u001b[33m*\u001b[39m \u001b[33mUL\u001b[39m\u001b[33m,\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 120 |\u001b[39m                 backgroundColor\u001b[33m:\u001b[39m \u001b[32m\"ivory\"\u001b[39m\u001b[33m,\u001b[39m\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 121 |\u001b[39m             } \u001b[36mas\u001b[39m \u001b[36mconst\u001b[39m)\u001b[33m,\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m     |\u001b[39m               \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 122 |\u001b[39m         [\u001b[33mUL\u001b[39m]\u001b[0m\n\u001b[0m \u001b[90m 123 |\u001b[39m     )\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 124 |\u001b[39m\u001b[0m","Parsing error: Identifier 'Page' has already been declared.\n\n\u001b[0m \u001b[90m 26 |\u001b[39m     thumbnail\u001b[33m:\u001b[39m \u001b[35m5\u001b[39m\u001b[33m,\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 27 |\u001b[39m }\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 28 |\u001b[39m \u001b[36mexport\u001b[39m type \u001b[33mPage\u001b[39m \u001b[33m=\u001b[39m \u001b[36mtypeof\u001b[39m \u001b[33mPage\u001b[39m[keyof \u001b[36mtypeof\u001b[39m \u001b[33mPage\u001b[39m]\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m    |\u001b[39m             \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 29 |\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 30 |\u001b[39m \u001b[36mexport\u001b[39m type \u001b[33mChangePage\u001b[39m \u001b[33m=\u001b[39m (nextPage\u001b[33m:\u001b[39m \u001b[33mPage\u001b[39m) \u001b[33m=>\u001b[39m \u001b[36mvoid\u001b[39m\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 31 |\u001b[39m\u001b[0m","Parsing error: Unexpected token\n\n\u001b[0m \u001b[90m 85 |\u001b[39m     state\u001b[33m:\u001b[39m any\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 86 |\u001b[39m\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 87 |\u001b[39m     terminalPC\u001b[33m?\u001b[39m\u001b[33m:\u001b[39m boolean\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m    |\u001b[39m               \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 88 |\u001b[39m     initFlag\u001b[33m?\u001b[39m\u001b[33m:\u001b[39m boolean\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 89 |\u001b[39m     prevStage\u001b[33m?\u001b[39m\u001b[33m:\u001b[39m number\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 90 |\u001b[39m     \u001b[33mUL\u001b[39m\u001b[33m?\u001b[39m\u001b[33m:\u001b[39m number\u001b[33m;\u001b[39m\u001b[0m","Parsing error: Unexpected token\n\n\u001b[0m \u001b[90m 105 |\u001b[39m     state\u001b[33m:\u001b[39m any\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 106 |\u001b[39m\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 107 |\u001b[39m     terminalPC\u001b[33m?\u001b[39m\u001b[33m:\u001b[39m boolean\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m     |\u001b[39m               \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 108 |\u001b[39m     lang\u001b[33m:\u001b[39m any\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 109 |\u001b[39m     prevStage\u001b[33m?\u001b[39m\u001b[33m:\u001b[39m number\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 110 |\u001b[39m     \u001b[33mUL\u001b[39m\u001b[33m?\u001b[39m\u001b[33m:\u001b[39m number\u001b[33m;\u001b[39m\u001b[0m","Parsing error: Unexpected token\n\n\u001b[0m \u001b[90m 1 |\u001b[39m \u001b[36mexport\u001b[39m \u001b[36mclass\u001b[39m \u001b[33mVideoRecorder\u001b[39m {\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 2 |\u001b[39m     mediaRecorder\u001b[33m?\u001b[39m\u001b[33m:\u001b[39m \u001b[33mMediaRecorder\u001b[39m\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m                  \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 3 |\u001b[39m     videoName\u001b[33m:\u001b[39m string \u001b[33m=\u001b[39m \u001b[32m\"\"\u001b[39m\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 4 |\u001b[39m     recordingState \u001b[33m=\u001b[39m { isRecording\u001b[33m:\u001b[39m \u001b[36mfalse\u001b[39m }\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 5 |\u001b[39m\u001b[0m","Parsing error: Unexpected token, expected \",\"\n\n\u001b[0m \u001b[90m 39 |\u001b[39m                 }\u001b[0m\n\u001b[0m \u001b[90m 40 |\u001b[39m                 \u001b[36mreturn\u001b[39m nextArr\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 41 |\u001b[39m             }\u001b[33m,\u001b[39m [] \u001b[36mas\u001b[39m string[])\u001b[33m,\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m    |\u001b[39m                   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 42 |\u001b[39m         []\u001b[0m\n\u001b[0m \u001b[90m 43 |\u001b[39m     )\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 44 |\u001b[39m     \u001b[36mconst\u001b[39m [hiraganaList\u001b[33m,\u001b[39m setHiraganaList] \u001b[33m=\u001b[39m useState\u001b[33m<\u001b[39m\u001b[33mstring\u001b[39m[]\u001b[33m>\u001b[39m(\u001b[0m","Parsing error: Unexpected token, expected \",\"\n\n\u001b[0m \u001b[90m 33 |\u001b[39m                     transitionDuration\u001b[33m:\u001b[39m \u001b[32m`${timeStep}ms`\u001b[39m\u001b[33m,\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 34 |\u001b[39m                     transitionTimingFunction\u001b[33m:\u001b[39m \u001b[32m\"linear\"\u001b[39m\u001b[33m,\u001b[39m\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 35 |\u001b[39m                 } \u001b[36mas\u001b[39m \u001b[36mconst\u001b[39m)\u001b[33m,\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m    |\u001b[39m                   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 36 |\u001b[39m             [\u001b[33mUL\u001b[39m\u001b[33m,\u001b[39m x\u001b[33m,\u001b[39m y\u001b[33m,\u001b[39m width]\u001b[0m\n\u001b[0m \u001b[90m 37 |\u001b[39m         )\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 38 |\u001b[39m         \u001b[36mreturn\u001b[39m \u001b[33m<\u001b[39m\u001b[33mimg\u001b[39m alt\u001b[33m=\u001b[39m\u001b[32m\"running ninja\"\u001b[39m src\u001b[33m=\u001b[39m{ninja_src} style\u001b[33m=\u001b[39m{ninjaStyle} \u001b[33m/\u001b[39m\u001b[33m>\u001b[39m\u001b[33m;\u001b[39m\u001b[0m","Parsing error: Unexpected token, expected \",\"\n\n\u001b[0m \u001b[90m 100 |\u001b[39m             \u001b[33m...\u001b[39m\u001b[33mStageParts\u001b[39m\u001b[33m.\u001b[39mgetFlyingRockLeft(\u001b[35m1\u001b[39m\u001b[33m,\u001b[39m \u001b[35m17\u001b[39m\u001b[33m,\u001b[39m \u001b[35m160\u001b[39m\u001b[33m,\u001b[39m \u001b[35m21\u001b[39m\u001b[33m,\u001b[39m \u001b[35m30\u001b[39m\u001b[33m,\u001b[39m \u001b[35m55\u001b[39m)\u001b[33m,\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 101 |\u001b[39m             \u001b[33m...\u001b[39m\u001b[33mStageParts\u001b[39m\u001b[33m.\u001b[39mgetFlyingRockLeft(\u001b[35m2\u001b[39m\u001b[33m,\u001b[39m \u001b[35m17\u001b[39m\u001b[33m,\u001b[39m \u001b[35m160\u001b[39m\u001b[33m,\u001b[39m \u001b[35m52\u001b[39m\u001b[33m,\u001b[39m \u001b[35m30\u001b[39m)\u001b[33m,\u001b[39m\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 102 |\u001b[39m             bottomGate\u001b[33m:\u001b[39m \u001b[33mStageParts\u001b[39m\u001b[33m.\u001b[39mgetBottomGate(\u001b[35m17\u001b[39m\u001b[33m,\u001b[39m \u001b[35m90\u001b[39m\u001b[33m,\u001b[39m \u001b[35m115\u001b[39m\u001b[33m,\u001b[39m \u001b[33m-\u001b[39m\u001b[35m12\u001b[39m\u001b[33m,\u001b[39m \u001b[36mtrue\u001b[39m) \u001b[36mas\u001b[39m any\u001b[33m,\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m     |\u001b[39m                                                                          \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 103 |\u001b[39m         }\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 104 |\u001b[39m     } \u001b[36melse\u001b[39m {\u001b[0m\n\u001b[0m \u001b[90m 105 |\u001b[39m         returnObjs \u001b[33m=\u001b[39m {\u001b[0m","Parsing error: Unexpected token, expected \"]\"\n\n\u001b[0m \u001b[90m 14 |\u001b[39m \u001b[36mexport\u001b[39m type \u001b[33mSubMenu\u001b[39m \u001b[33m=\u001b[39m \u001b[32m\"Game\"\u001b[39m \u001b[33m|\u001b[39m \u001b[32m\"About\"\u001b[39m\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 15 |\u001b[39m\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 16 |\u001b[39m \u001b[36mexport\u001b[39m \u001b[36mconst\u001b[39m menuLabels\u001b[33m:\u001b[39m { [key \u001b[36min\u001b[39m \u001b[33mSubMenu\u001b[39m]\u001b[33m:\u001b[39m { name\u001b[33m:\u001b[39m string }[] } \u001b[33m=\u001b[39m {\u001b[0m\n\u001b[0m \u001b[90m    |\u001b[39m                                 \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 17 |\u001b[39m     \u001b[33mGame\u001b[39m\u001b[33m:\u001b[39m [{ name\u001b[33m:\u001b[39m \u001b[32m\"status\"\u001b[39m }\u001b[33m,\u001b[39m { name\u001b[33m:\u001b[39m \u001b[32m\"skills\"\u001b[39m }]\u001b[33m,\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 18 |\u001b[39m     \u001b[33mAbout\u001b[39m\u001b[33m:\u001b[39m [{ name\u001b[33m:\u001b[39m \u001b[32m\"test1\"\u001b[39m }\u001b[33m,\u001b[39m { name\u001b[33m:\u001b[39m \u001b[32m\"test2\"\u001b[39m }\u001b[33m,\u001b[39m { name\u001b[33m:\u001b[39m \u001b[32m\"test3\"\u001b[39m }]\u001b[33m,\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 19 |\u001b[39m }\u001b[33m;\u001b[39m\u001b[0m","Parsing error: Missing semicolon.\n\n\u001b[0m \u001b[90m 11 |\u001b[39m     speakingCharacter\u001b[33m:\u001b[39m \u001b[32m\"speakingCharacter\"\u001b[39m\u001b[33m,\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 12 |\u001b[39m     enemy\u001b[33m:\u001b[39m \u001b[32m\"enemy\"\u001b[39m\u001b[33m,\u001b[39m\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 13 |\u001b[39m } \u001b[36mas\u001b[39m \u001b[36mconst\u001b[39m\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m    |\u001b[39m  \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 14 |\u001b[39m \u001b[36mexport\u001b[39m type \u001b[33mItemType\u001b[39m \u001b[33m=\u001b[39m \u001b[36mtypeof\u001b[39m itemTypes[keyof \u001b[36mtypeof\u001b[39m itemTypes]\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 15 |\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 16 |\u001b[39m \u001b[36mexport\u001b[39m \u001b[36mclass\u001b[39m \u001b[33mRenderable\u001b[39m {\u001b[0m","Parsing error: Unexpected token, expected \",\"\n\n\u001b[0m \u001b[90m 2 |\u001b[39m \u001b[36mimport\u001b[39m { \u001b[33mGameState\u001b[39m } \u001b[36mfrom\u001b[39m \u001b[32m\"./GameStateManager\"\u001b[39m\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 3 |\u001b[39m\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 4 |\u001b[39m \u001b[36mexport\u001b[39m type \u001b[33mGameItemState\u001b[39m\u001b[33m<\u001b[39m\u001b[33mGS\u001b[39m \u001b[36mextends\u001b[39m \u001b[33mGameState\u001b[39m\u001b[33m<\u001b[39m\u001b[33mGS\u001b[39m\u001b[33m>>\u001b[39m \u001b[33m=\u001b[39m \u001b[33mPick\u001b[39m\u001b[33m<\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 5 |\u001b[39m     \u001b[33mGameItem\u001b[39m\u001b[33m<\u001b[39m\u001b[33mGS\u001b[39m\u001b[33m>\u001b[39m\u001b[33m,\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 6 |\u001b[39m     \u001b[32m\"id\"\u001b[39m \u001b[33m|\u001b[39m \u001b[32m\"x\"\u001b[39m \u001b[33m|\u001b[39m \u001b[32m\"y\"\u001b[39m \u001b[33m|\u001b[39m \u001b[32m\"width\"\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 7 |\u001b[39m \u001b[33m>\u001b[39m\u001b[33m;\u001b[39m\u001b[0m","Parsing error: Unexpected token, expected \",\"\n\n\u001b[0m \u001b[90m 47 |\u001b[39m     \u001b[36mconst\u001b[39m changeValue \u001b[33m=\u001b[39m (\u001b[0m\n\u001b[0m \u001b[90m 48 |\u001b[39m         targetFallingImage\u001b[33m:\u001b[39m fallingImage\u001b[33m,\u001b[39m\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 49 |\u001b[39m         propName\u001b[33m:\u001b[39m keyof fallingImage\u001b[33m,\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m    |\u001b[39m                         \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 50 |\u001b[39m         newVal\u001b[33m:\u001b[39m fallingImage[keyof fallingImage]\u001b[0m\n\u001b[0m \u001b[90m 51 |\u001b[39m     ) \u001b[33m=>\u001b[39m {\u001b[0m\n\u001b[0m \u001b[90m 52 |\u001b[39m         setFallingImages(\u001b[0m","Parsing error: Missing semicolon.\n\n\u001b[0m \u001b[90m 4 |\u001b[39m     left\u001b[33m:\u001b[39m \u001b[32m\"left\"\u001b[39m\u001b[33m,\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 5 |\u001b[39m     right\u001b[33m:\u001b[39m \u001b[32m\"right\"\u001b[39m\u001b[33m,\u001b[39m\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 6 |\u001b[39m } \u001b[36mas\u001b[39m \u001b[36mconst\u001b[39m\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m  \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 7 |\u001b[39m \u001b[36mexport\u001b[39m type \u001b[33mDirection\u001b[39m \u001b[33m=\u001b[39m \u001b[36mtypeof\u001b[39m \u001b[33mDirection\u001b[39m[keyof \u001b[36mtypeof\u001b[39m \u001b[33mDirection\u001b[39m]\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 8 |\u001b[39m\u001b[0m","Parsing error: Missing semicolon.\n\n\u001b[0m \u001b[90m 10 |\u001b[39m     style\u001b[33m?\u001b[39m\u001b[33m:\u001b[39m \u001b[33mReact\u001b[39m\u001b[33m.\u001b[39m\u001b[33mCSSProperties\u001b[39m\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 11 |\u001b[39m }\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 12 |\u001b[39m \u001b[36mconst\u001b[39m buttonColor \u001b[33m=\u001b[39m { \u001b[35m1\u001b[39m\u001b[33m:\u001b[39m \u001b[32m\"secondary\"\u001b[39m\u001b[33m,\u001b[39m \u001b[35m2\u001b[39m\u001b[33m:\u001b[39m \u001b[32m\"success\"\u001b[39m\u001b[33m,\u001b[39m \u001b[35m3\u001b[39m\u001b[33m:\u001b[39m \u001b[32m\"primary\"\u001b[39m } \u001b[36mas\u001b[39m \u001b[36mconst\u001b[39m\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m    |\u001b[39m                                                                   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 13 |\u001b[39m \u001b[36mconst\u001b[39m arrColors \u001b[33m=\u001b[39m \u001b[33mObject\u001b[39m\u001b[33m.\u001b[39mvalues(buttonColor)\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 14 |\u001b[39m type \u001b[33mButtonKey\u001b[39m \u001b[33m=\u001b[39m keyof \u001b[36mtypeof\u001b[39m buttonColor\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 15 |\u001b[39m \u001b[36mexport\u001b[39m \u001b[36mconst\u001b[39m \u001b[33mColorChangeButton\u001b[39m \u001b[33m=\u001b[39m ({\u001b[0m","Parsing error: Missing semicolon.\n\n\u001b[0m \u001b[90m  5 |\u001b[39m     rock\u001b[33m:\u001b[39m \u001b[32m`${gameStorage}ninja1/objs/rock.png`\u001b[39m\u001b[33m,\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m  6 |\u001b[39m     fugu\u001b[33m:\u001b[39m \u001b[32m`${gameStorage}ninja2/objs/fugu.png`\u001b[39m\u001b[33m,\u001b[39m\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m  7 |\u001b[39m } \u001b[36mas\u001b[39m \u001b[36mconst\u001b[39m\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m    |\u001b[39m  \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m  8 |\u001b[39m \u001b[36mexport\u001b[39m type \u001b[33mImgSrc\u001b[39m \u001b[33m=\u001b[39m \u001b[36mtypeof\u001b[39m imgSrc[keyof \u001b[36mtypeof\u001b[39m imgSrc]\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m  9 |\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 10 |\u001b[39m \u001b[36mexport\u001b[39m \u001b[36mconst\u001b[39m backgroundSrc \u001b[33m=\u001b[39m {\u001b[0m","Parsing error: Unexpected token\n\n\u001b[0m \u001b[90m 15 |\u001b[39m \u001b[36mexport\u001b[39m \u001b[36mclass\u001b[39m \u001b[33mStageChanger\u001b[39m \u001b[36mextends\u001b[39m \u001b[33mStageItem\u001b[39m {\u001b[0m\n\u001b[0m \u001b[90m 16 |\u001b[39m     nextStage\u001b[33m:\u001b[39m number\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 17 |\u001b[39m     nextX\u001b[33m?\u001b[39m\u001b[33m:\u001b[39m number\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m    |\u001b[39m          \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 18 |\u001b[39m     nextY\u001b[33m?\u001b[39m\u001b[33m:\u001b[39m number\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 19 |\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 20 |\u001b[39m     constructor({ nextStage\u001b[33m,\u001b[39m nextX\u001b[33m,\u001b[39m nextY\u001b[33m,\u001b[39m \u001b[33m...\u001b[39mrest }\u001b[33m:\u001b[39m \u001b[33mProps\u001b[39m) {\u001b[0m","Parsing error: Unexpected token\n\n\u001b[0m \u001b[90m 17 |\u001b[39m \u001b[36mexport\u001b[39m \u001b[36mclass\u001b[39m \u001b[33mSpeakingCharacter\u001b[39m \u001b[36mextends\u001b[39m \u001b[33mStageItem\u001b[39m {\u001b[0m\n\u001b[0m \u001b[90m 18 |\u001b[39m     isSpeaking\u001b[33m:\u001b[39m boolean\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 19 |\u001b[39m     withoutIcon\u001b[33m?\u001b[39m\u001b[33m:\u001b[39m boolean\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m    |\u001b[39m                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 20 |\u001b[39m     imgSrc\u001b[33m?\u001b[39m\u001b[33m:\u001b[39m \u001b[33mImgSrc\u001b[39m\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 21 |\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 22 |\u001b[39m     constructor(props\u001b[33m:\u001b[39m \u001b[33mProps\u001b[39m) {\u001b[0m","Parsing error: Unexpected token\n\n\u001b[0m \u001b[90m 74 |\u001b[39m     }\u001b[0m\n\u001b[0m \u001b[90m 75 |\u001b[39m\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 76 |\u001b[39m     \u001b[36mprivate\u001b[39m calcNextPosition(ninja\u001b[33m:\u001b[39m \u001b[33mNinja\u001b[39m) {\u001b[0m\n\u001b[0m \u001b[90m    |\u001b[39m             \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 77 |\u001b[39m         \u001b[90m// 忍者に向かって近づいてくる\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 78 |\u001b[39m         \u001b[36mconst\u001b[39m ninjaCenter \u001b[33m=\u001b[39m [\u001b[0m\n\u001b[0m \u001b[90m 79 |\u001b[39m             ninja\u001b[33m.\u001b[39mx \u001b[33m+\u001b[39m ninja\u001b[33m.\u001b[39mwidth \u001b[33m/\u001b[39m \u001b[35m2\u001b[39m\u001b[33m,\u001b[39m\u001b[0m","Parsing error: Unexpected token\n\n\u001b[0m \u001b[90m 14 |\u001b[39m     }\u001b[0m\n\u001b[0m \u001b[90m 15 |\u001b[39m \u001b[33m>\u001b[39m {\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 16 |\u001b[39m     vocabSound\u001b[33m?\u001b[39m\u001b[33m:\u001b[39m \u001b[33mHTMLAudioElement\u001b[39m\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m    |\u001b[39m               \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 17 |\u001b[39m     didUnmount\u001b[33m:\u001b[39m boolean\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 18 |\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 19 |\u001b[39m     constructor(props\u001b[33m:\u001b[39m \u001b[33mSpeakerProps\u001b[39m) {\u001b[0m","Parsing error: Unexpected token\n\n\u001b[0m \u001b[90m 114 |\u001b[39m     }\u001b[0m\n\u001b[0m \u001b[90m 115 |\u001b[39m \u001b[33m>\u001b[39m {\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 116 |\u001b[39m     vocabSound\u001b[33m?\u001b[39m\u001b[33m:\u001b[39m \u001b[33mHTMLAudioElement\u001b[39m\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m     |\u001b[39m               \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 117 |\u001b[39m     didUnmount\u001b[33m:\u001b[39m boolean\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 118 |\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 119 |\u001b[39m     constructor(props\u001b[33m:\u001b[39m \u001b[33mSpeakerProps\u001b[39m) {\u001b[0m","Parsing error: Unexpected token, expected \",\"\n\n\u001b[0m \u001b[90m 3 |\u001b[39m \u001b[36mimport\u001b[39m { \u001b[33mGameState\u001b[39m\u001b[33m,\u001b[39m \u001b[33mGameStateManager\u001b[39m } \u001b[36mfrom\u001b[39m \u001b[32m\"./GameStateManager\"\u001b[39m\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 4 |\u001b[39m\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 5 |\u001b[39m \u001b[36mexport\u001b[39m \u001b[36mfunction\u001b[39m useGameState\u001b[33m<\u001b[39m\u001b[33mGS\u001b[39m \u001b[36mextends\u001b[39m \u001b[33mGameState\u001b[39m\u001b[33m<\u001b[39m\u001b[33mGS\u001b[39m\u001b[33m>>\u001b[39m(\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m                                 \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 6 |\u001b[39m     gameStateManager\u001b[33m:\u001b[39m \u001b[33mGameStateManager\u001b[39m\u001b[33m<\u001b[39m\u001b[33mGS\u001b[39m\u001b[33m>\u001b[39m\u001b[33m,\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 7 |\u001b[39m     eachTimeProc\u001b[33m:\u001b[39m (state\u001b[33m:\u001b[39m \u001b[33mGS\u001b[39m) \u001b[33m=>\u001b[39m \u001b[36mvoid\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 8 |\u001b[39m )\u001b[33m:\u001b[39m \u001b[33mGS\u001b[39m {\u001b[0m","Parsing error: Unexpected token, expected \",\"\n\n\u001b[0m \u001b[90m 1 |\u001b[39m \u001b[36mimport\u001b[39m { \u001b[33mGameItem\u001b[39m } \u001b[36mfrom\u001b[39m \u001b[32m\"./GameItem\"\u001b[39m\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 |\u001b[39m\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 3 |\u001b[39m \u001b[36mexport\u001b[39m \u001b[36minterface\u001b[39m \u001b[33mGameState\u001b[39m\u001b[33m<\u001b[39m\u001b[33mGS\u001b[39m \u001b[36mextends\u001b[39m \u001b[33mGameState\u001b[39m\u001b[33m<\u001b[39m\u001b[33mGS\u001b[39m\u001b[33m>>\u001b[39m {\u001b[0m\n\u001b[0m \u001b[90m   |\u001b[39m                               \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 4 |\u001b[39m     readonly timeStep\u001b[33m:\u001b[39m number\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 5 |\u001b[39m     \u001b[33mUL\u001b[39m\u001b[33m:\u001b[39m number\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 6 |\u001b[39m     items\u001b[33m:\u001b[39m \u001b[33mGameItem\u001b[39m\u001b[33m<\u001b[39m\u001b[33mGS\u001b[39m\u001b[33m>\u001b[39m[]\u001b[33m;\u001b[39m\u001b[0m","Parsing error: Unexpected token, expected \",\"\n\n\u001b[0m \u001b[90m 39 |\u001b[39m     \u001b[36mconst\u001b[39m kanaSounds \u001b[33m=\u001b[39m useMemo(\u001b[0m\n\u001b[0m \u001b[90m 40 |\u001b[39m         () \u001b[33m=>\u001b[39m\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 41 |\u001b[39m             (\u001b[33mObject\u001b[39m\u001b[33m.\u001b[39mkeys(consts\u001b[33m.\u001b[39m\u001b[33mKANA_LIST\u001b[39m) \u001b[36mas\u001b[39m \u001b[33mRomaji\u001b[39m[])\u001b[33m.\u001b[39mreduce(\u001b[0m\n\u001b[0m \u001b[90m    |\u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 42 |\u001b[39m                 (acc\u001b[33m,\u001b[39m romaji) \u001b[33m=>\u001b[39m ({\u001b[0m\n\u001b[0m \u001b[90m 43 |\u001b[39m                     \u001b[33m...\u001b[39macc\u001b[33m,\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 44 |\u001b[39m                     [romaji]\u001b[33m:\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mEasyAudioPlayer\u001b[39m(\u001b[0m","Parsing error: Unexpected token, expected \",\"\n\n\u001b[0m \u001b[90m 288 |\u001b[39m     (window\u001b[33m.\u001b[39m\u001b[33mURL\u001b[39m \u001b[33m||\u001b[39m window\u001b[33m.\u001b[39mwebkitURL)\u001b[33m.\u001b[39mcreateObjectURL \u001b[33m||\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 289 |\u001b[39m     (\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 290 |\u001b[39m         window \u001b[36mas\u001b[39m \u001b[36mtypeof\u001b[39m window \u001b[33m&\u001b[39m {\u001b[0m\n\u001b[0m \u001b[90m     |\u001b[39m                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 291 |\u001b[39m             createObjectURL\u001b[33m:\u001b[39m (file\u001b[33m:\u001b[39m \u001b[33mFile\u001b[39m) \u001b[33m=>\u001b[39m string\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 292 |\u001b[39m         }\u001b[0m\n\u001b[0m \u001b[90m 293 |\u001b[39m     )\u001b[33m.\u001b[39mcreateObjectURL\u001b[33m;\u001b[39m\u001b[0m","Parsing error: Unexpected token, expected \"]\"\n\n\u001b[0m \u001b[90m 11 |\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 12 |\u001b[39m \u001b[36mconst\u001b[39m setValues\u001b[33m:\u001b[39m {\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 13 |\u001b[39m     [key \u001b[36min\u001b[39m keyof \u001b[33mAppState\u001b[39m]\u001b[33m?\u001b[39m\u001b[33m:\u001b[39m ((value\u001b[33m:\u001b[39m \u001b[33mAppState\u001b[39m[keyof \u001b[33mAppState\u001b[39m]) \u001b[33m=>\u001b[39m \u001b[36mvoid\u001b[39m)[]\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m    |\u001b[39m          \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 14 |\u001b[39m } \u001b[33m=\u001b[39m {}\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 15 |\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 16 |\u001b[39m \u001b[36mexport\u001b[39m \u001b[36mfunction\u001b[39m changeAppState\u001b[33m<\u001b[39m\u001b[33mT\u001b[39m \u001b[36mextends\u001b[39m keyof \u001b[33mAppState\u001b[39m\u001b[33m>\u001b[39m(\u001b[0m","Parsing error: Unexpected reserved word 'private'.\n\n\u001b[0m \u001b[90m 14 |\u001b[39m \u001b[90m */\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 15 |\u001b[39m \u001b[36mexport\u001b[39m \u001b[36mclass\u001b[39m \u001b[33mEasyAudioPlayer\u001b[39m \u001b[36mextends\u001b[39m \u001b[33mAudio\u001b[39m {\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 16 |\u001b[39m     constructor(\u001b[36mprivate\u001b[39m path\u001b[33m:\u001b[39m string) {\u001b[0m\n\u001b[0m \u001b[90m    |\u001b[39m                 \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 17 |\u001b[39m         \u001b[36msuper\u001b[39m()\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 18 |\u001b[39m     }\u001b[0m\n\u001b[0m \u001b[90m 19 |\u001b[39m\u001b[0m","Parsing error: Missing semicolon.\n\n\u001b[0m \u001b[90m 137 |\u001b[39m                         value\u001b[33m=\u001b[39m{font}\u001b[0m\n\u001b[0m \u001b[90m 138 |\u001b[39m                         onChange\u001b[33m=\u001b[39m{ev \u001b[33m=>\u001b[39m {\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 139 |\u001b[39m                             \u001b[36mconst\u001b[39m value \u001b[33m=\u001b[39m ev\u001b[33m.\u001b[39mtarget\u001b[33m.\u001b[39mvalue \u001b[36mas\u001b[39m \u001b[33mFontClassName\u001b[39m\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m     |\u001b[39m                                                          \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 140 |\u001b[39m                             setFont(value)\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 141 |\u001b[39m                             window\u001b[33m.\u001b[39mlocalStorage\u001b[33m.\u001b[39msetItem(\u001b[32m\"kana-font\"\u001b[39m\u001b[33m,\u001b[39m value)\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 142 |\u001b[39m                         }}\u001b[0m","Parsing error: Unexpected token, expected \"]\"\n\n\u001b[0m \u001b[90m 24 |\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 25 |\u001b[39m type \u001b[33mButtonIndex\u001b[39m \u001b[33m=\u001b[39m \u001b[35m0\u001b[39m \u001b[33m|\u001b[39m \u001b[35m1\u001b[39m \u001b[33m|\u001b[39m \u001b[35m2\u001b[39m \u001b[33m|\u001b[39m \u001b[35m3\u001b[39m\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 26 |\u001b[39m type \u001b[33mButtonLabels\u001b[39m \u001b[33m=\u001b[39m { [key \u001b[36min\u001b[39m \u001b[33mButtonIndex\u001b[39m]\u001b[33m?\u001b[39m\u001b[33m:\u001b[39m \u001b[33mRomaji\u001b[39m }\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m    |\u001b[39m                            \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 27 |\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 28 |\u001b[39m \u001b[36mconst\u001b[39m \u001b[33mANSWER_BUTTON_PRIMARY\u001b[39m \u001b[33m=\u001b[39m \u001b[32m\"btn btn-primary btn-lg btn-block active\"\u001b[39m\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 29 |\u001b[39m\u001b[0m"]